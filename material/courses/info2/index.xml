<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info2 on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/material/courses/info2/</link><description>Recent content in Info2 on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Jul 2024 08:45:49 +0200</lastBuildDate><atom:link href="https://bkleinen.github.io/material/courses/info2/index.xml" rel="self" type="application/rss+xml"/><item><title>Backus-Naur-Form</title><link>https://bkleinen.github.io/material/languages/bnf/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/bnf/</guid><description>The Gist You might see something like&amp;hellip;.
if your repository is
https://github.com/&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt; the entry in your .git/config would be
[remote &amp;quot;origin&amp;quot;] url = git@github.com:&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt;.git Where \&amp;lt;organisation\&amp;gt; should be replaced with the github organisation, e.g. &amp;ldquo;htw-imi-info2&amp;rdquo; and \&amp;lt;repo\&amp;gt; with the name of the respective git repository, e.g. &amp;ldquo;python-jupyter-notebooks&amp;rdquo;, yielding at this concrete text:
https://github.com/htw-imi-info2/python-jupyter-notebooks [remote &amp;quot;origin&amp;quot;] url = git@github.com:htw-imi-info2/python-jupyter-notebooks.git Rewrite Rules The convention of informally marking placeholders that should be replaced with the delimiters &amp;lt; and &amp;gt; stems from the Backus-Naur-Form (BNF).</description></item><item><title>Notes on Learning Python</title><link>https://bkleinen.github.io/material/languages/python/python/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/python/python/</guid><description>Some Notes and Tips on Getting Started with the Python Programming Language There are many, and many good Python resources available, many of them for free - after all, it&amp;rsquo;s the most frequently used programming language for introductionary courses.
See Python Resources
Suggested Path for Info3 &amp;amp; Info3 As we are already using IntelliJ IDEA, using the Python Flavour of IntelliJ IDEA called &amp;ldquo;PyCharm&amp;rdquo; doesn&amp;rsquo;t have that steep of a learning curve.</description></item><item><title>Working with HTW Machines</title><link>https://bkleinen.github.io/material/ops/hrz/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/hrz/</guid><description>Copy files from your HRZ Home Directory (aka HTW-Space) There are rather verbose manuals about various ways to copy files from your HTW-RZ home directory to somewhere else. (see Freigabe von Dateien und Ordner über den Webdrive )
The gist is: you may connect via SSH File Transfer Protocol to the server webdrive.htw-berlin.de (on default port 22)- see example below. The sftp program used in the example is included in the OpenSSH Package; most probably you&amp;rsquo;ll already have it installed on your computer, e.</description></item><item><title>VI</title><link>https://bkleinen.github.io/material/ops/vi/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/vi/</guid><description>VI You should learn a couple of vi commands to survive, as vi is available on most *nix computers.
The absolute minimum There are two modes in vi: normal and insert. You need to know which mode you are in, as different commands are available. (Why this may be problematic has been discussed thoroughly in the UX field)
Normal Mode: vi starts there get there with ESC start command with: :w write (save) file :q quit (without save, won’t quit if there are changes) :wq quit and save :q!</description></item><item><title>GIT Intro</title><link>https://bkleinen.github.io/material/git-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/git-intro/</guid><description>Source Code Management mit GIT Für Info2 hatte ich im letzten Semester eine GIT-Introduction aufgenomen:
(Zugänglich mit HTW-Login)
Part 1 - Basics and a simple git workflow: Repository anlegen, commit, push, pull, clone Part 2 - committing the right files: git status, git add, index Part 3 - Stolpersteine: andere machen Änderungen! - merge conflicts, vi als editor Part 4 - Adding SSH Keys and copying Repos from Github to Gitlab Seither habe ich gelernt, dass die Beispiele meiner commit messages nicht gut gewählt waren.</description></item><item><title>Learn Python with Tests</title><link>https://bkleinen.github.io/material/languages/python/learn-with-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/languages/python/learn-with-tests/</guid><description>I often recommend to write a suite of (automatic) tests to explore a programming language and compile your own &amp;ldquo;cheat sheet&amp;rdquo; for the language.
By keeping the test suite &amp;ldquo;green&amp;rdquo;, you can be sure that everything you see in the source code is actually working.
I drew this idea from two sources: Jim Weirich&amp;rsquo;s Ruby Koans and the recommendation of API Testing by Michael Feathers.
Jim Weirich&amp;rsquo;s Ruby Koans, are a big suite of prepared test cases where you have to fill out the test expectations to learn ruby with a strong emphasis on edge cases - where ruby works in a special way that may not be totally clear or deductible from other programming languages.</description></item><item><title>Python Resources</title><link>https://bkleinen.github.io/material/languages/python/python-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/languages/python/python-resources/</guid><description>This is a collection of Python Resources. See Python Notes
The Official Python Documentation 3 Documentation The Python Standard Library — Python 3 documentation The Python Language Reference — Python 3 documentation Python Setup and Usage — Python 3 documentation The Python Tutorial — Python 3 documentation Books Robert Sedgewick, Kevin Wayne, Robert Dondero: Introduction to Programming in Python: An Interdisciplinary Approach. Pearson, 2015 The linked companion website contains excerpts and lots of examples:</description></item><item><title>Sorting Algorithms</title><link>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</guid><description>..
Algorithm Description Invariant Plus O(n) Comparisions Swaps Stable adaptive space Selection Sort select smallest from rest, append to already sorted on left a[1..i] in place n^2 n^2 n not stable Insertion Sort take card from unsorted pile (right), insert it into sorted pile a[1..i] sorted adaptable, simple -&amp;gt; ok for small n n^2 n^2 n^2 stable yes O(1) extra Shell Sort Insertion sort on every h-th element decreasing h down to 1 each h-array is sorted adaptable, still simple n^(3/2) stable yes O(1) extra Bubble Sort go up through array, compare two and swap if not in right order (up to 1.</description></item></channel></rss>