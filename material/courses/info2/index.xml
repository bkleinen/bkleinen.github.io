<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info2 on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/material/courses/info2/</link><description>Recent content in Info2 on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 03 Oct 2024 23:45:32 +0200</lastBuildDate><atom:link href="https://bkleinen.github.io/material/courses/info2/index.xml" rel="self" type="application/rss+xml"/><item><title>Backus-Naur-Form</title><link>https://bkleinen.github.io/material/languages/bnf/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/bnf/</guid><description>&lt;h2 id="the-gist">The Gist&lt;/h2>
&lt;p>You might see something like&amp;hellip;.&lt;/p>
&lt;p>if your repository is&lt;/p>
&lt;pre>&lt;code> https://github.com/&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>the entry in your &lt;code>.git/config&lt;/code> would be&lt;/p>
&lt;pre>&lt;code> [remote &amp;quot;origin&amp;quot;]
 url = git@github.com:&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt;.git
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>\&amp;lt;organisation\&amp;gt;&lt;/code> should be replaced with the github organisation, e.g. &amp;ldquo;htw-imi-info2&amp;rdquo; and
&lt;code>\&amp;lt;repo\&amp;gt;&lt;/code> with the name of the respective git repository, e.g. &amp;ldquo;python-jupyter-notebooks&amp;rdquo;, yielding at this concrete text:&lt;/p>
&lt;pre>&lt;code>https://github.com/htw-imi-info2/python-jupyter-notebooks

[remote &amp;quot;origin&amp;quot;]
 url = git@github.com:htw-imi-info2/python-jupyter-notebooks.git
&lt;/code>&lt;/pre>
&lt;h2 id="rewrite-rules">Rewrite Rules&lt;/h2>
&lt;p>The convention of informally marking placeholders
that should be replaced with the delimiters &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code> stems from the Backus-Naur-Form (BNF).&lt;/p></description></item><item><title>Notes on Learning Python</title><link>https://bkleinen.github.io/material/languages/python/python/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/python/python/</guid><description>&lt;h2 id="some-notes-and-tips-on-getting-started-with-the-python-programming-language">Some Notes and Tips on Getting Started with the Python Programming Language&lt;/h2>
&lt;p>There are many, and many good Python resources available, many of them for
free - after all, it&amp;rsquo;s the most frequently used programming language for
introductionary courses.&lt;/p>
&lt;p>&lt;a href="../python-resources/">See Python Resources&lt;/a>&lt;/p>
&lt;h2 id="suggested-path-for-info3--info3">Suggested Path for Info3 &amp;amp; Info3&lt;/h2>
&lt;p>As we are already using IntelliJ IDEA, using the Python Flavour of IntelliJ IDEA called &amp;ldquo;PyCharm&amp;rdquo; doesn&amp;rsquo;t have that steep of a learning curve.&lt;/p></description></item><item><title>Working with HTW Machines</title><link>https://bkleinen.github.io/material/ops/hrz/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/hrz/</guid><description>&lt;h2 id="copy-files-from-your-hrz-home-directory-aka-htw-space">Copy files from your HRZ Home Directory (aka HTW-Space)&lt;/h2>
&lt;p>There are rather verbose manuals about various ways to
copy files from your HTW-RZ home directory to somewhere else.
(see
&lt;a href="https://rz.htw-berlin.de/anleitungen/speicherplatz/htw-space/webdrive/freigabe-dateien-und-ordner/">Freigabe von Dateien und Ordner über den Webdrive&lt;/a>
)&lt;/p>
&lt;p>The gist is: you may connect via SSH File Transfer Protocol to the server
webdrive.htw-berlin.de (on default port 22)- see example below.
The &lt;a href="https://man.openbsd.org/sftp">sftp&lt;/a> program used in the example is included in
the &lt;a href="https://www.openssh.com/manual.html">OpenSSH Package&lt;/a>; most probably you&amp;rsquo;ll
already have it installed on your computer, e.g. in git-bash on a windows machine.&lt;/p></description></item><item><title>VI</title><link>https://bkleinen.github.io/material/ops/vi/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/vi/</guid><description>&lt;h1 id="vi">VI&lt;/h1>
&lt;p>You should learn a couple of vi commands to survive, as vi is available on most *nix computers.&lt;/p>
&lt;h2 id="the-absolute-minimum">The absolute minimum&lt;/h2>
&lt;p>There are two modes in vi: normal and insert.
You need to know which mode you are in, as different commands are available.
&lt;a href="https://www.nngroup.com/articles/modes/">(Why this may be problematic has been discussed thoroughly in the UX field)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Normal Mode:
&lt;ul>
&lt;li>vi starts there&lt;/li>
&lt;li>&lt;strong>get there with &lt;code>ESC&lt;/code>&lt;/strong>&lt;/li>
&lt;li>start command with&lt;code>:&lt;/code>&lt;/li>
&lt;li>&lt;code>:w&lt;/code> write (save) file&lt;/li>
&lt;li>&lt;code>:q&lt;/code> quit (without save, won’t quit if there are changes)&lt;/li>
&lt;li>&lt;strong>&lt;code>:wq&lt;/code> quit and save&lt;/strong>&lt;/li>
&lt;li>&lt;code>:q!&lt;/code> quit without save no matter what&lt;/li>
&lt;li>&amp;lt; &lt;code>h&lt;/code> ^&lt;code> j&lt;/code> v &lt;code>k &lt;/code> &amp;gt;&lt;code>l&lt;/code> the keys under your right hand double as cursor keys; this makes editing fast!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Insert Mode:
&lt;ul>
&lt;li>type to insert text&lt;/li>
&lt;li>get there with any insert command, eg
&lt;ul>
&lt;li>&lt;strong>&lt;code>i&lt;/code> insert before cursor&lt;/strong>&lt;/li>
&lt;li>&lt;code>a&lt;/code> insert after cursor&lt;/li>
&lt;li>&lt;code>o&lt;/code> insert in new line after this one&lt;/li>
&lt;li>&lt;code>O&lt;/code> insert in new line before this one&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="some-links-and-further-resources">Some Links and further Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">Graphical vi-vim Cheat Sheet and Tutorial&lt;/a>, &lt;a href="https://www.glump.net/_media/howto/desktop/vim-graphical-cheat-sheet-and-tutorial/vi-vim-cheat-sheet-and-tutorial.pdf">also available in one PDF&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.viemu.com/a-why-vi-vim.html">Why, oh WHY, do those #?@! nutheads use vi?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes">Learning the vi Editor/Vim/Modes - Wikibooks, open books for an open world&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>GIT Intro</title><link>https://bkleinen.github.io/material/git-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/git-intro/</guid><description>&lt;h2 id="source-code-management-mit-git">Source Code Management mit GIT&lt;/h2>
&lt;p>Für Info2 hatte ich im letzten Semester eine GIT-Introduction aufgenomen:&lt;/p>
&lt;p>(Zugänglich mit HTW-Login)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mediathek.htw-berlin.de/video/git-intro-part1/2980e3c60421ee9a96089108c12b21da">Part 1&lt;/a> - Basics and a simple git workflow: Repository anlegen, commit, push, pull, clone&lt;/li>
&lt;li>&lt;a href="https://mediathek.htw-berlin.de/video/git-intro-part2/45cd6d8891579afd4889dba15a7a901e">Part 2&lt;/a> - committing the right files: git status, git add, index&lt;/li>
&lt;li>&lt;a href="https://mediathek.htw-berlin.de/video/git-intro-part3/92013add95f331153835580f374c68a1">Part 3&lt;/a> - Stolpersteine: andere machen Änderungen! - merge conflicts, vi als editor&lt;/li>
&lt;li>&lt;a href="https://mediathek.htw-berlin.de/video/git-intro-part4/0f299fb70d15ab9ff4d82b7865d8482d">Part 4&lt;/a> - Adding SSH Keys and copying Repos from Github to Gitlab&lt;/li>
&lt;/ul>
&lt;p>Seither habe ich gelernt, dass die Beispiele meiner commit messages nicht
gut gewählt waren.
&lt;a href="https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53">In diesem Gist&lt;/a>
gibt es gute Hinweise dazu.&lt;/p></description></item><item><title>Learn Python with Tests</title><link>https://bkleinen.github.io/material/languages/python/learn-with-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/languages/python/learn-with-tests/</guid><description>&lt;p>I often recommend to write a suite of (automatic) tests to explore a programming language
and compile your own &amp;ldquo;cheat sheet&amp;rdquo; for the language.&lt;/p>
&lt;p>By keeping the test suite &amp;ldquo;green&amp;rdquo;, you can be sure that everything you see in the
source code is actually working.&lt;/p>
&lt;p>I drew this idea from two sources: &lt;a href="https://www.rubykoans.com/">Jim Weirich&amp;rsquo;s Ruby Koans&lt;/a> and the
recommendation of API Testing by Michael Feathers.&lt;/p>
&lt;p>&lt;a href="https://www.rubykoans.com/">Jim Weirich&amp;rsquo;s Ruby Koans&lt;/a>, are a big
suite of prepared test cases where you have to fill out the test expectations to learn ruby
with a strong emphasis on edge cases - where ruby works in a special way that may not be
totally clear or deductible from other programming languages. This idea has been transferred to
many other programming languages, e.g. &lt;a href="https://github.com/gregmalcolm/python_koans">Greg Malcoms Python Koans&lt;/a>.&lt;/p></description></item><item><title>Python Resources</title><link>https://bkleinen.github.io/material/languages/python/python-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/languages/python/python-resources/</guid><description>&lt;p>This is a collection of Python Resources. See &lt;a href="../python/">Python Notes&lt;/a>&lt;/p>
&lt;h2 id="the-official-python-documentation">The Official Python Documentation&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/">3 Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/index.html">The Python Standard Library — Python 3 documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/reference/index.html">The Python Language Reference — Python 3 documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/using/index.html">Python Setup and Usage — Python 3 documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/tutorial/index.html">The Python Tutorial — Python 3 documentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="books">Books&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://introcs.cs.princeton.edu/python/home/">Robert Sedgewick, Kevin Wayne, Robert Dondero: Introduction to Programming in Python: An Interdisciplinary Approach. Pearson, 2015&lt;/a>
The linked companion website contains excerpts and lots of examples:&lt;/p></description></item><item><title>Sorting Algorithms</title><link>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</guid><description>&lt;p>..&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Algorithm&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;th style="text-align: left">Invariant&lt;/th>
 &lt;th style="text-align: left">Plus&lt;/th>
 &lt;th style="text-align: left">O(n)&lt;/th>
 &lt;th style="text-align: left">Comparisions&lt;/th>
 &lt;th style="text-align: left">Swaps&lt;/th>
 &lt;th style="text-align: left">Stable&lt;/th>
 &lt;th style="text-align: left">adaptive&lt;/th>
 &lt;th style="text-align: left">space&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">Selection Sort&lt;/td>
 &lt;td style="text-align: left">select smallest from rest, append to already sorted on left&lt;/td>
 &lt;td style="text-align: left">a[1..i] in place&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n&lt;/td>
 &lt;td style="text-align: left">not stable&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Insertion Sort&lt;/td>
 &lt;td style="text-align: left">take card from unsorted pile (right), insert it into sorted pile&lt;/td>
 &lt;td style="text-align: left">a[1..i] sorted&lt;/td>
 &lt;td style="text-align: left">adaptable, simple -&amp;gt; ok for small n&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">stable&lt;/td>
 &lt;td style="text-align: left">yes&lt;/td>
 &lt;td style="text-align: left">O(1) extra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Shell Sort&lt;/td>
 &lt;td style="text-align: left">Insertion sort on every h-th element decreasing h down to 1&lt;/td>
 &lt;td style="text-align: left">each h-array is sorted&lt;/td>
 &lt;td style="text-align: left">adaptable, still simple&lt;/td>
 &lt;td style="text-align: left">n^(3/2)&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">stable&lt;/td>
 &lt;td style="text-align: left">yes&lt;/td>
 &lt;td style="text-align: left">O(1) extra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Bubble Sort&lt;/td>
 &lt;td style="text-align: left">go up through array, compare two and swap if not in right order (up to 1..n)&lt;/td>
 &lt;td style="text-align: left">a[1..i] in place&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">n^2&lt;/td>
 &lt;td style="text-align: left">stable&lt;/td>
 &lt;td style="text-align: left">yes&lt;/td>
 &lt;td style="text-align: left">O(1) extra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Merge Sort&lt;/td>
 &lt;td style="text-align: left">split in two, sort rec, merge two parts.&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">predictable, works on linked lists&lt;/td>
 &lt;td style="text-align: left">n log n&lt;/td>
 &lt;td style="text-align: left">(0,5 to 1 )log n&lt;/td>
 &lt;td style="text-align: left">(1 to 1,5)log n&lt;/td>
 &lt;td style="text-align: left">stable&lt;/td>
 &lt;td style="text-align: left">no&lt;/td>
 &lt;td style="text-align: left">O(n) extra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Quick Sort&lt;/td>
 &lt;td style="text-align: left">go up through array, compare two and swap if not in right order (up to 1..n)&lt;/td>
 &lt;td style="text-align: left">a[1..k-1] &amp;lt; a[k] &amp;lt;= a[k+1..n]&lt;/td>
 &lt;td style="text-align: left">general purpose sort, but not stable&lt;/td>
 &lt;td style="text-align: left">n log n (n^2 worst)&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">no&lt;/td>
 &lt;td style="text-align: left">no&lt;/td>
 &lt;td style="text-align: left">O(n·lg(n)) for some optimizatiosn&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Bogo Sort&lt;/td>
 &lt;td style="text-align: left">randomly arrange array. If sorted, done.&lt;/td>
 &lt;td style="text-align: left">-&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">n!&lt;/td>
 &lt;td style="text-align: left">n * n!&lt;/td>
 &lt;td style="text-align: left">n*n!&lt;/td>
 &lt;td style="text-align: left">not stable&lt;/td>
 &lt;td style="text-align: left">no&lt;/td>
 &lt;td style="text-align: left">O(1)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item></channel></rss>