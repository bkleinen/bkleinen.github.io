<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info1 on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/material/courses/info1/</link><description>Recent content in Info1 on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 02 Jul 2024 01:33:15 +0200</lastBuildDate><atom:link href="https://bkleinen.github.io/material/courses/info1/index.xml" rel="self" type="application/rss+xml"/><item><title>Conditional Statement</title><link>https://bkleinen.github.io/material/info1-script/01_basics/conditional/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1-script/01_basics/conditional/</guid><description>Conditional Statement (if-then-else statement) A conditional statement allows you to conditionally execute code parts based on a condition, either true or false or something that results in true or false (see boolean expression).
Structure // before conditional if(condition){ // if-part } else { // else-part } // after conditional flowchart TD A[Start] B(before conditional) D(if-part) E(else-part) F(after conditional) A --> B B --> C{condition true?} C --true--> D C -->|false| E D &amp; E --> F F -->G[End] The else part can be omitted&amp;hellip; &amp;hellip; if you don&amp;rsquo;t need it.</description></item><item><title>While Loop</title><link>https://bkleinen.github.io/material/info1-script/01_basics/while-loop/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1-script/01_basics/while-loop/</guid><description>While Loop Structure // before loop while(condition){ // loop body } // after loop shorter flowchart TD S[Start] C{cond?} L(LOOP BODY) E(End) S --> C C --true?--> L L --> C C -->|false?| E longer version flowchart TD A[Start] B(before loop) L(loop body) F(after loop) A --> B B --> C{condition true?} L --> C C --true--> L C -->|false| F F -->G[End] ## Examples ## Further Reading https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html</description></item><item><title>Info1 Script</title><link>https://bkleinen.github.io/material/info1-script/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1-script/</guid><description> Conditional Statement</description></item><item><title>Notes on Sketchnotes</title><link>https://bkleinen.github.io/material/visual/sketchnotes/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/visual/sketchnotes/</guid><description>To get started with sketchnotes, I recommend one of the sketchnote workshops held at Re:publica (about 1h):
the one at Republica 2015 is great, but the sketches on the flipcarts are sometimes hard to see. in 2016 they projected the sketchnotes, but mirror-inverted :) If you want to dig deeper:
Martin Rhode coined the term with &amp;ldquo;The Sketchnote Handbook&amp;rdquo; Kathy Schrock on Sketchnoting in Education - with lots of resources Über Sketchnotes, lehren und lernen On Visual Notetaking in General Wie Zeichnen beim Merken hilft, Graham Shaw, TEDxVienna and, last not least: Ottis kleine Malstunde</description></item><item><title>BlueJ Trick - Save your Object Bench using Test Fixtures</title><link>https://bkleinen.github.io/material/info1/save_object_bench/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/save_object_bench/</guid><description>You can save and re-create your Object Bench with a trick that uses the Unit Test Support in BlueJ, especially “Object Bench to Test Fixture” “Test Fixture to Object Bench”:
1. Save the state of your object bench Let’s say you have created a lot of objects manually and want to reuse them. To save the state of your Object Bench, first create a Test Class for an arbitrary class: Now, call “Object Bench to Test Fixture” from the Test Class’ context menu.</description></item><item><title>ClockDisplay Example: Reflections and Improvements</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/</guid><description>I have been working with the ClockDisplay example as shown in the Textbook &amp;ldquo;Objects First with Java: A Practical Introduction Using Bluej.&amp;rdquo; by David J Barnes and Michael Kölling (Barnes and Kölling 2017) for a while now. While the book contains many great examples that allow the discussion of a broad range of object oriented design, this example has some issues that always bugged me.
This page is about my approach(es) to improve the ClockDisplay example.</description></item><item><title>JUnit in BlueJ</title><link>https://bkleinen.github.io/material/info1/junit_in_bluej/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/junit_in_bluej/</guid><description>Monday, 04.December 2023 JUnit is not part of the Java API, it is a third-party software. You find all information about JUnit, including a user guide and information about and download of the latest version on https://junit.org.
As of this writing, the current version is 5.10.1, but the version included in BlueJ 5.2.1 is JUnit 5.5.2, as you can check within the installation of BlueJ:
BlueJ.app/Contents/Java&amp;gt;ls junit* junit-4.12.jar	junit-jupiter-params-5.5.2.jar	junit-platform-suite-api-1.5.2.jar junit-jupiter-5.</description></item></channel></rss>