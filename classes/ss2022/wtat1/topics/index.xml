<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WTAT1 Topics on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/</link><description>Recent content in WTAT1 Topics on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ss2022/wtat1/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>Sprint 01 - Building a Static Web Application</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-01-static-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-01-static-node-app/</guid><description>&lt;h4 id="agile-topic-project-ideas">Agile Topic: Project Ideas&lt;/h4>
&lt;p>You will be working on one project throughout the term in a small, 3-5 person team.
Collect and discuss your project ideas with other students. You can pitch your idea next week in class.&lt;/p>
&lt;p>Write up a short project proposal for discussion in the next lab meeting, possibly together with other
students. Develop some user stories for the product backlog. After this discussion we will decide on the
different projects and the associated teams for the remainder of this class.&lt;/p></description></item><item><title>Sprint 02 - Building a First Express App</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-02-first-express-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-02-first-express-app/</guid><description>&lt;h4 id="agile-topic-product-owner">Agile Topic: Product Owner&lt;/h4>
&lt;p>Name a product owner in your Scrum team. Set up your project and create a formal backlog as a plain text file (in the team but
with the product owner leading). Note: we will not use a dedicated tool for managing backlogs in this class. Their use is too
involved and therefore not in scope&lt;/p>
&lt;h4 id="development-topic-installing-and-understanding-expressjs">Development Topic: Installing and Understanding Express.js&lt;/h4>
&lt;p>Setup Express and understand the basic structure of the framework as described in Unit 2 of the book (lessons 8 and 9).&lt;/p></description></item><item><title>Sprint 03 - Adding Views to the Express App</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-03-express-views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-03-express-views/</guid><description>&lt;h4 id="agile-topic-scrum-master">Agile Topic: Scrum Master&lt;/h4>
&lt;p>Name a Scrum Master from your team and have this person coordinate team meetings, such as the daily scrum.&lt;/p>
&lt;h4 id="development-topic-adding-views-to-the-express-app">Development Topic: Adding Views to the Express App&lt;/h4>
&lt;p>Add views and error handling to your application using Express.js (lessons 10, 11 and 12 of unit 2). If you&amp;rsquo;ve already
created views in Sprint 01, you can migrate them to the Express app. Chose one or more stories where you can make use of
the two new technological topics you&amp;rsquo;ve learned in Unit 2: View Templates and Dynamic Content.&lt;/p></description></item><item><title>Sprint 04 - Adding Mongo Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-04-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-04-mongo/</guid><description>&lt;h4 id="agile-topic-daily-scrum">Agile Topic: Daily Scrum&lt;/h4>
&lt;p>As one of the most frequent meetings, get into the habit of holding a daily stand up meeting to exchange with other team members.&lt;/p>
&lt;h4 id="development-topic-adding-mongo-support">Development Topic: Adding Mongo Support&lt;/h4>
&lt;p>Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose (lessons 13-14). The functionality
implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).&lt;/p></description></item><item><title>Sprint 05 - Understanding Promises</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-05-promises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-05-promises/</guid><description>&lt;h4 id="agile-topic-sprint-backlog">Agile Topic: Sprint Backlog&lt;/h4>
&lt;p>Select items from the product backlog for the sprint backlog. Define a sprint goal by focussing on &amp;ldquo;what&amp;rdquo; should be delivered.&lt;/p>
&lt;h4 id="development-topic-understanding-promises">Development Topic: Understanding Promises&lt;/h4>
&lt;p>Based on lessons 15-16 of Unit 3, add controllers and promises to coordinate your interaction with the database.&lt;/p>
&lt;h5 id="topic-of-the-week">Topic of the Week&lt;/h5>
&lt;p>Promises&lt;/p>
&lt;ul>
&lt;li>Add controllers and promises to your application to coordinate your interaction with the database.&lt;/li>
&lt;li>Work with git. Create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo;
&lt;ul>
&lt;li>You may also clean your git history to just have one commit per story.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tag the version where the sprint was completed with &amp;ldquo;Sprint_05&amp;rdquo;&lt;/li>
&lt;li>Include the repo url in your status report (you can use any service, e.g. &lt;a href="https://gitlab.rz.htw-berlin.de/">https://gitlab.rz.htw-berlin.de/&lt;/a>)
&lt;ul>
&lt;li>Please use a public repository or grant read access to the lecturer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="status-report">Status Report&lt;/h4>
&lt;p>Write up a brief status report containing:&lt;/p></description></item><item><title>Sprint 06 - Supporting Complex Models</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-06-complex-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-06-complex-models/</guid><description>&lt;h4 id="agile-topic-sprint-planning">Agile Topic: Sprint Planning&lt;/h4>
&lt;p>Focus your sprint planning meeting on &amp;ldquo;how&amp;rdquo; to deliver the sprint backlog items, possibly adjusting a previously selected
sprint goal as necessary.&lt;/p>
&lt;h4 id="development-topic-supporting-complex-models">Development Topic: Supporting Complex Models&lt;/h4>
&lt;p>Lessons 17 and 18 of Unit 4 cover model associations and validations using the example of a user model.&lt;/p>
&lt;p>You will need such a model for authentication in addition to your domain models (i.e. models relevant for
implemeting your business logic). You can just copy and adapt the user model from the example application,
to ensure that it fits to your application domain.&lt;/p></description></item><item><title>Sprint 07 - Adding CRUD Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-07-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-07-crud/</guid><description>&lt;h4 id="agile-topic-estimation">Agile Topic: Estimation&lt;/h4>
&lt;p>Estimate the effort for individal backlog items by means of Planning Poker. Use the Fibonacci numbers
0, 1, 2, 3, 5, 8, 13, and 21 for scoring.&lt;/p>
&lt;h4 id="development-topic-adding-crud-support">Development Topic: Adding CRUD Support&lt;/h4>
&lt;p>Lessons 19-21 of Unit 4 describe the necessary steps for adding CRUD (Create - Read - Update - Delete) support to a model.
It describes how to implement CRUD functionality across models, views, controllers as well as by defining the appropriate routes.&lt;/p></description></item><item><title>Sprint 08 - Adding Login Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-08-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-08-login/</guid><description>&lt;h4 id="agile-topic-definition-of-done">Agile Topic: Definition of Done&lt;/h4>
&lt;p>Discuss the &amp;ldquo;Definition of Done&amp;rdquo; for the items in your sprint backlog.&lt;/p>
&lt;h4 id="development-topic-adding-login-support">Development Topic: Adding Login Support&lt;/h4>
&lt;p>Add support for user login, following lessons 22-23 of unit 5 of the book. Note that this unit only covers authentication
but no authorisation. Restricting access to parts of the application will be handled during the next sprint.&lt;/p>
&lt;h5 id="topic-of-the-week">Topic of the Week&lt;/h5>
&lt;p>User login, password hashing:&lt;/p>
&lt;ul>
&lt;li>Add support for user login based on user id and password.&lt;/li>
&lt;li>Work with git. Create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo;
&lt;ul>
&lt;li>You may also clean your git history to just have one commit per story.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tag the version where the sprint was completed with &amp;ldquo;Sprint_08&amp;rdquo;&lt;/li>
&lt;li>Include the repo url in your status report (you can use any service, e.g. &lt;a href="https://gitlab.rz.htw-berlin.de/">https://gitlab.rz.htw-berlin.de/&lt;/a>)
&lt;ul>
&lt;li>Please use a public repository or grant read access to the lecturer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="status-report">Status Report&lt;/h4>
&lt;p>Write up a brief status report containing:&lt;/p></description></item><item><title>Sprint 09 - Adding Support for Passport.js</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-09-passport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-09-passport/</guid><description>&lt;h4 id="agile-topic-sprint-review">Agile Topic: Sprint Review&lt;/h4>
&lt;p>Hold a sprint review meeting for the current sprint. What were the biggest technical obstacles that prevented you to reach the sprint goal?
What would need to be adjusted to avoid these technical problems in the future?&lt;/p>
&lt;h4 id="development-topic-adding-support-for-passportjs">Development Topic: Adding Support for Passport.js&lt;/h4>
&lt;p>Lessons 24 and 25 describe the use of the Node module Passport.js. Follow along by implementing a user story from your backlog that relies
on user authentication, either by means of the &amp;ldquo;local&amp;rdquo; strategy or by means of an external authentication provider (not covered in the book).&lt;/p></description></item><item><title>Sprint 10 - Building a REST API</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-10-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-10-rest/</guid><description>&lt;h4 id="agile-topic-sprint-retrospective">Agile Topic: Sprint Retrospective&lt;/h4>
&lt;p>Hold a sprint retrospective meeting for the current sprint. Discuss process and external issues that prevented you from working towards the sprint goal,
e.g. capacity limitations. Agree on steps to improve the situation for upcoming sprints.&lt;/p>
&lt;h4 id="development-topic-building-a-rest-api">Development Topic: Building a REST API&lt;/h4>
&lt;p>Lessons 26 and 27 introduce RESTful APIs and describe the steps to add support for such APIs to your application. Choose a user story that benefits
from a headless REST API and implement it in your application context.&lt;/p></description></item><item><title>Sprint 11 - Securing a REST API</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-11-securing-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-11-securing-rest/</guid><description>&lt;h4 id="agile-topic">Agile Topic&lt;/h4>
&lt;p>No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that
you may encounter.&lt;/p>
&lt;h4 id="development-topic-securing-a-rest-api">Development Topic: Securing a REST API&lt;/h4>
&lt;p>Lessons 28 and 29 describe mechanisms to secure a RESTful API. Choose a user story that benefits from exposing a secure REST API and implement
it in your application context.&lt;/p>
&lt;h5 id="topic-of-the-week">Topic of the Week&lt;/h5>
&lt;p>JWT:&lt;/p></description></item><item><title>Sprint 12 - Adding Support for Socket.io</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-12-socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-12-socket/</guid><description>&lt;h4 id="agile-topic">Agile Topic&lt;/h4>
&lt;p>No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that
you may encounter during the regular Scrum events.&lt;/p>
&lt;h4 id="development-topic-adding-support-for-socketio">Development Topic: Adding Support for Socket.io&lt;/h4>
&lt;p>Find something in your app that may benefit from real-time communication. Add support for this fuctionality following the instructions given in
lessons 30 - 33 of unit 7.&lt;/p>
&lt;h5 id="topic-of-the-week">Topic of the Week&lt;/h5>
&lt;p>Socket.io:&lt;/p></description></item><item><title>Sprint 13 - Deployment to Heroku</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-13-heroku/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-13-heroku/</guid><description>&lt;h4 id="agile-topic">Agile Topic&lt;/h4>
&lt;p>No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that
you may encounter during the regular Scrum events.&lt;/p>
&lt;h4 id="development-topic-deployment-to-heroku">Development Topic: Deployment to Heroku&lt;/h4>
&lt;p>Deploy your app to Heroku along the lines of the process described in unit 8 (lessons 34 - 37). A user story should be used to guide deployment decisions.
It&amp;rsquo;s arguable if this week&amp;rsquo;s work should be called a sprint, as you will not implement any new features that are of interest to users or customers.
Nonetheless, automatic testing and continuously deploying your app such that the users and customers will be able to see and test the deliverables is
a crucial part of agile development.&lt;/p></description></item></channel></rss>