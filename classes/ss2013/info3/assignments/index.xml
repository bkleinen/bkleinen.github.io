<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info3/SS2013 - Assignments on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/</link><description>Recent content in Info3/SS2013 - Assignments on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ss2013/info3/assignments/index.xml" rel="self" type="application/rss+xml"/><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-02/</guid><description>&lt;p>In this exercise you will create a description, develop a detailed Scenario for a Use Case, and draw a Class Diagram for your Web Application. First, write a detailed description what your application should do (in English or German, as you like) as the[one for the HorseTravelWorld in the old exercise][1]. Then, pick the most important (or interesting) use case. For HTW, that might be the Use Case of a User booking a trip, or of a user browsing for trips, or of a user contributing a review. Write down a detailed scenario for that use case (see below). If you work on this in a group, choose a different scenario for each person such that you get a couple covered (that is, everyone has to write an own scenario!) Last, draw a Class Diagram for your Application. It should contain associations (aggregations and compositions, association classes as needed), generalizations, as well as the most important fields and method names of the classes. As last fortnight, include the Lab report in your submitted PDF. You can draw all diagrams by hand and include scans or photos in your PDF. If you feel you need to, you can also use an UML Tool for that. We will discuss UML Tools in the Lab. – about Use Cases – Use-cases are a szenario-based technique for requirements elicitation. They were first proposed by Ivar Jacobsen as part of his Objectory methodology. There are many different variations on use cases, but the basic idea is to record the situation in which something happens, explain what should happen, and describe any exceptional circumstances which might arise.&lt;/p></description></item><item><title>Assignment 03 - Gilded Rose Patterns and Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-03/</guid><description>&lt;h1 id="reading-assignment-for-friday-may-3rd-2013">Reading Assignment for Friday, May 3rd 2013:&lt;/h1>
&lt;p>For this week&amp;rsquo;s lecture and especially the exercise, you will need some knowledge about sequence diagrams, and the Patterns Strategy, Factory, Factory method, Abstract Factory and Template Method.&lt;/p>
&lt;p>Here are some good sources:&lt;/p>
&lt;ul>
&lt;li>Sequence Diagrams: Sample Chapter from Fowler&amp;rsquo;s UML distilled: &lt;a href="https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2">https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2 &lt;/a>- Please read the full chapter.&lt;/li>
&lt;li>Strategy Pattern:  - make sure you understand the pattern.&lt;/li>
&lt;li>Template Method: we talked about that in class (Sandy Metz Ruby example!), but you can look it up here: &lt;/li>
&lt;li>Factory Patterns: You don&amp;rsquo;t need to read all of the following web pages, but make sure you understand the idea of Factories (german wikipedia might also be helpful with this) and the distinction between the different factory patterns.&lt;/li>
&lt;li>Factory, ,&lt;/li>
&lt;li>Factory Method&lt;a href="https://www.oodesign.com/factory-method-pattern.html"> https://www.oodesign.com/factory-method-pattern.html&lt;/a>&lt;/li>
&lt;li>Optional:&lt;/li>
&lt;li>Abstract Factory&lt;a href="https://www.oodesign.com/abstract-factory-pattern.html"> https://www.oodesign.com/abstract-factory-pattern.html&lt;/a>&lt;/li>
&lt;li>Abstract Factory from the GoF-Book &lt;/li>
&lt;/ul>
&lt;p>Please read them before coming to class on Friday, as we will work with these topics in class.&lt;/p></description></item><item><title>Assignment 05: Functionality and Libraries</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-05/</guid><description>&lt;p>In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.&lt;/p></description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-01/</guid><description>&lt;h2 id="a-test-driven-development">A. Test Driven Development&lt;/h2>
&lt;p>Create a new Java Project in Eclipse (or your preferred IDE).&lt;/p>
&lt;p>Source Code for this Assignment: (removed)&lt;/p>
&lt;p>Create a Class Node as in Node.java _as Head of a linked list (added 5.4.13) _and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.java or creating a toString method as in toString.java.&lt;/p></description></item><item><title>Assignment 4: First Rails Steps</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-04/</guid><description>&lt;p>In this exercise, you will create a rails application for the first one or two features / user stories of your application. Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one or two model classes. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.&lt;/p></description></item><item><title>Preparation for Week 3</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/preparation-for-week-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/preparation-for-week-3/</guid><description>&lt;p>This week and in Exercise 2, we will start working on the web applications. Please use the time till Friday to gather some ideas about which web application you might want to develop! We will have a topic collection, discussion and decision in class on friday. Here are my current ideas, just for inspiration:&lt;/p>
&lt;ul>
&lt;li>DailyTasks: An application where a user can make a list of daily tasks (e.g. study English, cleaning kitchen, exercise) and check them off every day. Next step would be making the app &amp;ldquo;social&amp;rdquo; with friends, an activity feed and some means to help motivate each other keeping on track.&lt;/li>
&lt;li>Learn Student Names: An application that helps me a professor learn student names based on pictures in some index-card-learning style, e.g. with a certain number of repetitions that decreases as names are memorized etc.&lt;/li>
&lt;li>Classroom Ballot: a tool for anonymous ballots during class.&lt;/li>
&lt;/ul>
&lt;p>It is rather easy to create a website that shows and stores some information backed by a database in Rails. Your apps should be based on simple information storage and retrieval via the web (e.g. don&amp;rsquo;t plan on creating a video editing application or a 3D Game, Rails is not good at that) and think of something that has some extra complexity, e.g. does some calculation based on the data, tracks user progress as in the Student Name Learning Application, gathers and visualizes data as in the Ballot idea, etc. Don&amp;rsquo;t worry too much about limitations, though, as you&amp;rsquo;ll be able to switch your topic later if you encounter a dead end. It will just serve as an example for discussing and practicing various topics and techniques around Enterprise Applications, Software Engineering and Patterns.&lt;/p></description></item></channel></rss>