<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WTAT1 Topics on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/</link><description>Recent content in WTAT1 Topics on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ss2020/wtat1/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>Sprint 03 - Persistence with Mongo</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-05-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-05-mongo/</guid><description>&lt;h2 id="sprint-03-persistence-with-mongo">Sprint 03: Persistence with Mongo&lt;/h2>
&lt;p>Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose.
The functionality implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).&lt;/p>
&lt;p>As usual, select a story or two you will implement using the new technological features.
You will create a full CRUD (Create/read/update/delete) in later Sprints.&lt;/p>
&lt;h3 id="example-application">Example Application&lt;/h3>
&lt;p>With this sprint, you can pretty much follow the book. See my doc in the readme for the example app:&lt;/p></description></item><item><title>Sprint 04 - Deployment</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-06-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-06-deployment/</guid><description>&lt;p>As this Sprint is about preparing your app for deployment and deploying it on Heroku,
you will not implement any new functionality in this sprint.&lt;/p>
&lt;p>It&amp;rsquo;s arguable if this weeks work should be called a sprint, as you will not implement any new
features that are of interest to users or customers.&lt;/p>
&lt;p>Nonetheless, automatic testing and continuously deploying your app such that the users
and customers will be able to see and test the deliverables is a crucial part of agile development.&lt;/p></description></item><item><title>Sprint 05 - CRUD Part 1 and 2 (2 weeks)</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-07-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-07-crud/</guid><description>&lt;p>Unit 4 - Building a User Model - is a rather long unit, thus we will take two
weeks to work through it. The technical topics are:&lt;/p>
&lt;ul>
&lt;li>CRUD - Create, Read, Update, Delete actions on Models in the Rest architectural style&lt;/li>
&lt;li>Validations&lt;/li>
&lt;li>Model Associations&lt;/li>
&lt;/ul>
&lt;p>It discusses CRUD by creating CRUD functionality via model, views, controller and routes for
the User model.&lt;/p>
&lt;p>You will need a user model for authentication in addition to your individual models.
You can just copy and adapt the model from the example application,
and adapt it such that it fits to your application domain.&lt;/p></description></item><item><title>Sprint 06 User Authentication</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-08-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-08-authentication/</guid><description>&lt;h1 id="sprint-06-user-authentication">Sprint 06 User Authentication&lt;/h1>
&lt;p>Build in a User Authentication and some extras according to&lt;br>
Unit 5 - &amp;ldquo;User Authentication&amp;rdquo;.&lt;/p>
&lt;p>Sprint 06 in the Module-Handbook example application:&lt;br>
&lt;a href="https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_06">https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_06&lt;/a>&lt;/p>
&lt;p>Note that this unit only covers authentication - establishing the identity of
the user - but no authorisation. Restricting access to parts of the application
will be handled during the next sprint.&lt;/p>
&lt;h1 id="sprint-06-extras">Sprint 06 Extras&lt;/h1>
&lt;p>To add some more protection against attacs, add helmet.js.&lt;/p></description></item><item><title>Sprint 07 API and JWT</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-09-api-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-09-api-jwt/</guid><description>&lt;h1 id="sprint-07-api-and-jwt">Sprint 07 API and JWT&lt;/h1>
&lt;p>Pick or create user stories that make use of an api delivering JSON data.
Build in one form of api authentication/authorisation (API Token or JWT)
Unit 6 - &amp;ldquo;Building an API&amp;rdquo;.&lt;/p>
&lt;p>Sprint 07 in the Module-Handbook example application:&lt;br>
&lt;a href="https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_07">https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_07&lt;/a>&lt;/p>
&lt;h1 id="sprint-07---testing">Sprint 07 - Testing&lt;/h1>
&lt;ul>
&lt;li>Testing APIs with Jest and Superagent is straightforward.&lt;/li>
&lt;li>Testing Routes that need authentication&lt;/li>
&lt;li>See the documentation in the Example app: &lt;a href="https://github.com/htw-imi-wtat1/module-handbook/blob/master/doc/authentication_authorization.md">https://github.com/htw-imi-wtat1/module-handbook/blob/master/doc/authentication_authorization.md&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Sprint 09-12 - Real Time Communication and React</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/sprint-09-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/sprint-09-12/</guid><description>&lt;h2 id="sprint-09-12-real-time-communication-and-react">Sprint 09-12: Real Time Communication and React&lt;/h2>
&lt;p>You should plan the remaining 4 sprints together, as you may want to
postpone Sprint 09 to combine it with a React frontend.&lt;/p>
&lt;p>Thus, the following order is tentative:&lt;/p>
&lt;ul>
&lt;li>Sprint 09: Real-Time-Communication (Unit 7, &amp;ldquo;Adding Chat Functionality&amp;rdquo;)&lt;/li>
&lt;li>Sprint 10: React Tutorial (&lt;a href="https://reactjs.org/docs/hello-world.html">Main Concepts in the React Doc&lt;/a>)&lt;/li>
&lt;li>Sprint 11-12: Implement Stories with React&lt;/li>
&lt;/ul>
&lt;p>Please plan the following sprints using the backlog planning tool at:&lt;/p></description></item><item><title>Startup - Project Idea</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-00-project-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-00-project-ideas/</guid><description>&lt;h2 id="project-ideas">Project Ideas&lt;/h2>
&lt;p>Collect and Discuss your project ideas in the Forum &amp;ldquo;Project Ideas&amp;rdquo; in Moodle.&lt;/p>
&lt;p>You will be working on one project throughout the term in a small, 3 person team.&lt;/p>
&lt;p>You can submit and discuss any ideas for now.&lt;/p>
&lt;p>You will write Project Proposals as Assignment for Week 02,
and the teams will be formed during class in week 02.&lt;/p></description></item><item><title>Topic 01 - Project Proposal</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-01-proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-01-proposal/</guid><description>&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;p>Write down your project Idea as a short proposal. (1-2 Pages). You can use any
kind of format. You can also include sketches how the user interface might look
like.&lt;/p>
&lt;h2 id="scope">Scope&lt;/h2>
&lt;p>Working through different topics of web development with node and react, you
will develop a web application that has&lt;/p>
&lt;ul>
&lt;li>at least one model class that can be created, read, updated and deleted&lt;/li>
&lt;li>a user model&lt;/li>
&lt;li>user authentication&lt;/li>
&lt;li>something with real-time communication (e.g. a chat or notification service)&lt;/li>
&lt;li>and some interactive elements created with Rest&lt;/li>
&lt;/ul>
&lt;p>Thus, try to sketch something that has these elements in it. It&amp;rsquo;s ok if your idea
is more complex - you will not need to implement all aspects that you describe now.&lt;/p></description></item><item><title>Topic 02 - Product Backlog</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-02-backlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-02-backlog/</guid><description>&lt;h2 id="backlog">Backlog&lt;/h2>
&lt;p>Write a simple Product Backlog for Your Project.&lt;/p>
&lt;p>Don&amp;rsquo;t worry about writing too many stories, or too complex ones. You don&amp;rsquo;t need
to implement all of them - and it will be easier if you have several to choose from for the
sprints. You order your backlog by business value now; but you will pick stories
that can be implemented with the technologies we learn(ed) during the week
for each sprint. I copy the scope of the projects again such that you get an
idea of what will be implemented:&lt;/p></description></item><item><title>Topic 03 - Sprint 01 - Two Static Sites</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-03-first-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-03-first-node-app/</guid><description>&lt;h2 id="sprint-01-first-node-app-with-two-static-sites">Sprint 01: First Node App with two static sites&lt;/h2>
&lt;ul>
&lt;li>number the stories in your backlog (see the example below)&lt;/li>
&lt;li>create a static prototype for the most important story or stories in your backlog.&lt;/li>
&lt;li>it should contain at least two different static sites and routes.&lt;/li>
&lt;li>follow the tutorial in unit 01 in the book - create a simple node app without any other framework.&lt;/li>
&lt;li>work with git. create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo;&lt;/li>
&lt;li>you may also clean your git history to just have one commit per story.&lt;/li>
&lt;li>tag the version where the sprint was completed with &amp;ldquo;Sprint_01&amp;rdquo;&lt;/li>
&lt;li>include the repo url in your status report (you can use any service, e.g. &lt;a href="https://gitlab.rz.htw-berlin.de/">https://gitlab.rz.htw-berlin.de/&lt;/a>)
&lt;ul>
&lt;li>if you have a private repository, make sure to grant me read access&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example-module-database">Example: Module Database&lt;/h3>
&lt;pre>&lt;code>Story_042 - As a student or lecturer, I see an overview of the whole study program with all modules including Title, Format and ECTS on the site.
Story_023 - As a student, I can quickly get an overview of the my progress within the study program.
&lt;/code>&lt;/pre>
&lt;h3 id="status-report">Status Report&lt;/h3>
&lt;p>Write up a brief status report containing:&lt;/p></description></item><item><title>Topic 04 - Sprint 02 - First Express App with view templates and dynamic content</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-04-first-express-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-04-first-express-app/</guid><description>&lt;h2 id="sprint-02-first-express-app-with-view-templates-and-dynamic-content">Sprint 02: First Express App with view templates and dynamic content&lt;/h2>
&lt;ul>
&lt;li>number the stories in your backlog (see the example below)&lt;/li>
&lt;li>choose and implement stories according to this weeks topic&lt;/li>
&lt;li>work with git. create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo;&lt;/li>
&lt;li>you may also clean your git history to just have one commit per story.&lt;/li>
&lt;li>tag the version where the sprint was completed with &amp;ldquo;Sprint_02&amp;rdquo;&lt;/li>
&lt;li>include the repo url in your status report (you can use any service, e.g. &lt;a href="https://gitlab.rz.htw-berlin.de/">https://gitlab.rz.htw-berlin.de/&lt;/a>)
&lt;ul>
&lt;li>if you have a private repository, make sure to grant me read access&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="step-1-using-express">Step 1: Using Express&lt;/h2>
&lt;p>Create a new application using express, and migrate your existing views to the new express app. This may result in a new repository, but does not have to.
Chose one or more stories where you can make use of the two new technological topics you&amp;rsquo;ve learned in Unit 2: View Templates and Dynamic Content.&lt;/p></description></item></channel></rss>