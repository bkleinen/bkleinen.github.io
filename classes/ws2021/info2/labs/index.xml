<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info 2 WS 2021/22 - Labs and Exercises on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/</link><description>Recent content in Info 2 WS 2021/22 - Labs and Exercises on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ws2021/info2/labs/index.xml" rel="self" type="application/rss+xml"/><item><title>Info2: Exercise 00: Programming &amp; Tools</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-00/</guid><description>&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements&lt;/p>
&lt;p>I am familiar with programming in IntelliJ:&lt;/p>
&lt;ul>
&lt;li>I can create a new Java project in IntelliJ&lt;/li>
&lt;li>I remember most of the concepts from A1 Ex1&lt;/li>
&lt;li>I can run my new Java project in IntelliJ&lt;/li>
&lt;/ul>
&lt;p>I am ready to use Git:&lt;/p>
&lt;ul>
&lt;li>I can clone an online repository&lt;/li>
&lt;li>I can create an empty repository on GitLab&lt;/li>
&lt;li>I can update my local repository&amp;rsquo;s remotes&lt;/li>
&lt;li>I can add changes to be committed&lt;/li>
&lt;li>I can commit changes&lt;/li>
&lt;li>I can push changes&lt;/li>
&lt;/ul>
&lt;h2 id="pre-lab-do-this-before-the-lab">Pre-Lab (Do this BEFORE the lab)&lt;/h2>
&lt;h3 id="1-prepare-your-work-environment">1. Prepare your work environment&lt;/h3>
&lt;p>The labs will be taught on campus. You can either&lt;/p></description></item><item><title>Info2: Exercise 01: Application Design</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-01/</guid><description>&lt;figure>&lt;img src="https://bkleinen.github.io/images/classes/info2/crc-cards.jpg"
 alt="CRC Cards">&lt;figcaption>
 &lt;p>CRC Cards&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements.&lt;/p>
&lt;p>I can use CRC Cards to design an application:&lt;/p>
&lt;ul>
&lt;li>Using the underline methods, I can identify candidates for classes, methods and fields.&lt;/li>
&lt;li>By working through scenarios I can identify cases where a class needs to be split up.&lt;/li>
&lt;li>By working through scenarios I can identify cases where classes need to be merged.&lt;/li>
&lt;li>By working through scenarios I can identify cases where additional classes need to be added.&lt;/li>
&lt;li>By working through scenarios I can identify what data needs to be stored.&lt;/li>
&lt;/ul>
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>Remember to do all the necessary steps listed on the &lt;a href="..">Labs&lt;/a> page, including the following exercises:&lt;/p></description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-02/</guid><description>&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements. This looks like a lot, but it is all repetition from what you learned in Info1. Ideally you agree with each statement even before starting the lab.&lt;/p>
&lt;p>I remember programming concepts concerning classes and objects:&lt;/p>
&lt;ul>
&lt;li>I know the difference between classes and objects.&lt;/li>
&lt;li>I can instantiate an object.&lt;/li>
&lt;/ul>
&lt;p>I remember programming concepts concerning fields and variable types:&lt;/p></description></item><item><title>Info2: Exercise 03: Histogram</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-03/</guid><description>&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements.&lt;/p>
&lt;p>I can handle File-based IO with Java:&lt;/p>
&lt;ul>
&lt;li>I can read from a text file using a Reader, eg. BufferedReader.&lt;/li>
&lt;li>I can write to a text file using a Writer, eg. BufferedWriter.&lt;/li>
&lt;li>I close my streams after I finished reading or writing.&lt;/li>
&lt;li>I can use try-with-resources to make sure that in the end, a resource is always closed&lt;/li>
&lt;/ul>
&lt;p>I can handle Exceptions:&lt;/p></description></item><item><title>Info2: Exercise 04: Chatterbox</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-04/</guid><description>&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements.&lt;/p>
&lt;p>I can use the Socket API for TCP connections:&lt;/p>
&lt;ul>
&lt;li>I can create a server that listens for and accepts connections&lt;/li>
&lt;li>I can create a client that makes a connection request to the server&lt;/li>
&lt;li>I can send text from a client to a server via streams&lt;/li>
&lt;li>I can send text from a server to a client via streams&lt;/li>
&lt;li>I can use multithreading to simultaneously process tcp requests and input from the user&lt;/li>
&lt;li>(if you do the &amp;ldquo;for the bored&amp;rdquo; part: I can use multithreading for the server to handle multiple connection requests)&lt;/li>
&lt;/ul>
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>Write down the code for the following questions and be able to explain what is happening.&lt;/p></description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-05/</guid><description>&lt;h2 id="learning-goals">Learning Goals&lt;/h2>
&lt;p>After this lab you should be able to agree with each of the following statements.&lt;/p>
&lt;p>I can evaluate the efficiency of algorithms:&lt;/p>
&lt;ul>
&lt;li>I understand the correlation between input and running time for different program structures&lt;/li>
&lt;li>I can use big-o-notation to describe the running time of algorithms&lt;/li>
&lt;li>I can calculate the running time of algorithms by adding up running times of different structures&lt;/li>
&lt;li>I can compare running times based on their running time in big-o-notation&lt;/li>
&lt;/ul>
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->, respectively. Answer the following questions, if possible:&lt;/p></description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> Make sure that you understand postfix evaluation. If you do the complete Pre-Lab you will be able to understand the algorithms given in the &lt;a href="../lab-06-handout">hand out&lt;/a>.&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> What is the order of precedence for the operators &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;rdquo;, &amp;ldquo;*&amp;rdquo;, &amp;ldquo;/&amp;rdquo;, &amp;ldquo;^&amp;rdquo;? If we wanted to include &amp;ldquo;(&amp;rdquo; and &amp;ldquo;)&amp;rdquo; in this order, where would each of them be?&lt;/p>
&lt;p>&lt;em>&lt;strong>P3.&lt;/strong>&lt;/em> Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation. To get your brain in gear, convert the following expressions to RPN! What are the values of the expressions?&lt;/p></description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-07/</guid><description>&lt;p>&lt;img src="../images/SierpinskiTriangle.png" alt="Machine" title="Sierpinski Triangle">&lt;/p>
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> What exactly is an equilateral triangle? Draft a class that draws a triangle. What data do you need to know in order to put a triangle at a particular position on the screen?&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> What is the mathematical formula for finding the midpoint of a line segment that connects two Points?&lt;/p>
&lt;p>&lt;em>&lt;strong>P3.&lt;/strong>&lt;/em> What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?&lt;/p></description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-08/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> Make a chess board and mark how a Queen moves and threatens.&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> Define a matrix (two-dimensional array) of integers in Java. Write a method to put a &lt;em>-1&lt;/em> in every cell of the matrix.&lt;/p>
&lt;p>&lt;em>&lt;strong>P3.&lt;/strong>&lt;/em> Given two cells in a matrix, (r1, c1) and (r2, c2). How can you determine if
a) the cells are in the same row?
b) the cells are in the same column?
c) the cells are in the same ascending diagonal (lower left to upper right)?
d) the cells are in the same descending diagonal (upper left to lower right)?&lt;/p></description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-09/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> How do you compute the area of a circle and a rectangle?&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> Draw an circle that matches exactly into a square. How do the areas of the
circle and the square relate to each other?&lt;/p>
&lt;p>&lt;em>&lt;strong>P3.&lt;/strong>&lt;/em> How can you represent points in a plane?&lt;/p>
&lt;p>&lt;em>&lt;strong>P4.&lt;/strong>&lt;/em> Prepare a sketch with formulas about the ratio of the areas and how to determine
if a given point in the square is as well within the circle.&lt;/p></description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-10/</guid><description>&lt;p>&lt;img src="https://bkleinen.github.io/images/s-bahn.jpg" alt="S-Bahn-Ring">
&lt;!-- raw HTML omitted -->S-Bahn Ring generated with &lt;a href="https://github.com/bkleinen/bvg-graph">https://github.com/bkleinen/bvg-graph&lt;/a> based on OpenStreetMap&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> Define an interface data type for a weighted graph. What methods does it need? What are the signatures?&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> Read up on Depth-First-Search to compute a path in a given graph. Sketch the algorithm on paper. Do you have an idea how you could find the &lt;em>shortest&lt;/em> path, instead of just a path?&lt;/p></description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-11/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> What is the difference between an NFA and an DFA?&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> Which sorting algorithms have you learned about so far? Review their algorithms.&lt;/p>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/">Geeks for Geeks&lt;/a> has some helpful explanations, including nice videos. Useful for a quick reminder of the algorithms. Eg. &lt;a href="https://www.geeksforgeeks.org/selection-sort/">Selection Sort&lt;/a>.&lt;/p>
&lt;p>Really good more detailed explanations can be found at the Back to Back SWE YouTube Channel:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://youtu.be/ufIET8dMnus">Insertion Sort&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/alJswNJ4P3U">Merge Sort&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/uXBnyYuwPe8">Quick Sort&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/k72DtCnY4MU">Heap Sort&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="assignment-1-finite-automata">Assignment 1: Finite Automata&lt;/h2>
&lt;p>This is to get some practice with Finite Automata.&lt;/p></description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-12/</guid><description>&lt;p>&lt;img src="./../images/scrabble_4468636695_2434bc60ff_b.jpg" alt="Scrabble" title="scrabble tile rack">
Foto by &lt;a href="https://www.flickr.com/photos/mk1971/4468636695">Mags_cat&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;em>&lt;strong>P1.&lt;/strong>&lt;/em> Review the rules of &lt;a href="https://en.wikipedia.org/wiki/Scrabble">Scrabble&lt;/a>, if you have never played it before.&lt;/p>
&lt;p>&lt;em>&lt;strong>P2.&lt;/strong>&lt;/em> What is a permutation?&lt;/p>
&lt;p>&lt;em>&lt;strong>P3.&lt;/strong>&lt;/em> What would a normalization function for different permutations of words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like?&lt;/p>
&lt;p>&lt;em>&lt;strong>P4.&lt;/strong>&lt;/em> How do you determine if two Strings are permutations of each other?&lt;/p></description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-13/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;p>&lt;img src="../../images/scrabble_331161309_a8e6c6c3fd_o.jpg" alt="Scrabble" title="scrabble 1">
Foto by &lt;a href="https://www.flickr.com/photos/derbeth/331161309/">Piotr&lt;/a>&lt;/p>
&lt;ol>
&lt;li>What would the exact data structure be for a hash table that stores Strings and chains the collisions?&lt;/li>
&lt;li>Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now.&lt;/li>
&lt;/ol>
&lt;h2 id="assignment">Assignment&lt;/h2>
&lt;p>This week we will improve the Scrabble Cheater by finding matches for shorter
Words that can be build with your tile rack (method allValidWords()).&lt;/p></description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06-handout/</guid><description>&lt;h2 id="definitions">Definitions&lt;/h2>
&lt;p>&lt;strong>Infix:&lt;/strong> The operator is placed between the two operands: 3 + 5&lt;/p>
&lt;p>&lt;strong>Prefix:&lt;/strong> The operator is placed before the two operands: + 3 5&lt;/p>
&lt;p>&lt;strong>Postfix:&lt;/strong> The operator is placed after the two operands: 3 5 +&lt;/p>
&lt;h2 id="calculator-algorithm">Calculator algorithm&lt;/h2>
&lt;ol>
&lt;li>Convert infix to postfix&lt;/li>
&lt;li>Use stack to evaluate postfix&lt;/li>
&lt;li>Output top of stack (should be the only element)&lt;/li>
&lt;/ol>
&lt;h3 id="convert-infix-to-postfix-algorithm">Convert infix to postfix algorithm&lt;/h3>
&lt;ol>
&lt;li>Given a sequence of tokens s and a result r&lt;/li>
&lt;li>While s is not empty:
&lt;ol>
&lt;li>Let t = next token.&lt;/li>
&lt;li>If t is an operand, r = r + t;&lt;/li>
&lt;li>If t is an open parenthesis, push it.&lt;/li>
&lt;li>If t is a close parenthesis:
&lt;ol>
&lt;li>while top &amp;lt;&amp;gt; open parenthesis
&lt;ol>
&lt;li>r = r + top&lt;/li>
&lt;li>pop&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>pop // removes the open parenthesis&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If t is an operator
&lt;ol>
&lt;li>while not (top is of lower precedence than t OR t is right associative and top is of equal precedence)
&lt;ol>
&lt;li>r = r + top&lt;/li>
&lt;li>pop&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>push t&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>while stack not empty
&lt;ol>
&lt;li>r = r + top&lt;/li>
&lt;li>pop&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="evaluate-postfix-algorithm">Evaluate postfix algorithm&lt;/h3>
&lt;ol>
&lt;li>Given a sequence of tokens s&lt;/li>
&lt;li>While s is not empty:
&lt;ol>
&lt;li>Let t = next token.&lt;/li>
&lt;li>If t is an operand, push it;&lt;/li>
&lt;li>If t is an operator:
&lt;ol>
&lt;li>put the top into rhs, pop it;&lt;/li>
&lt;li>put the top into lhs, pop it;&lt;/li>
&lt;li>calculate lhs t rhs;&lt;/li>
&lt;li>push the result&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The top of the stack is the result.&lt;/li>
&lt;/ol></description></item></channel></rss>