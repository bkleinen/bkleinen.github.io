<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info3/SS2013 - Labs and Exercises on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/</link><description>Recent content in Info3/SS2013 - Labs and Exercises on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ws2013/info3/labs/index.xml" rel="self" type="application/rss+xml"/><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-02/</guid><description>&lt;p>In this exercise you will create a description, develop a detailed Scenario for a Use Case, and draw a Class Diagram for your Web Application. First, write a detailed description what your application should do (in English or German, as you like) as the[one for the HorseTravelWorld in the old exercise][1]. Then, pick the most important (or interesting) use case. For HTW, that might be the Use Case of a User booking a trip, or of a user browsing for trips, or of a user contributing a review. Write down a detailed scenario for that use case (see below). If you work on this in a group, choose a different scenario for each person such that you get a couple covered (that is, everyone has to write an own scenario!) Last, draw a Class Diagram for your Application. It should contain associations (aggregations and compositions, association classes as needed), generalizations, as well as the most important fields and method names of the classes. As last fortnight, include the Lab report in your submitted PDF. You can draw all diagrams by hand and include scans or photos in your PDF. If you feel you need to, you can also use an UML Tool for that. We will discuss UML Tools in the Lab. – about Use Cases – Use-cases are a szenario-based technique for requirements elicitation. They were first proposed by Ivar Jacobsen as part of his Objectory methodology. There are many different variations on use cases, but the basic idea is to record the situation in which something happens, explain what should happen, and describe any exceptional circumstances which might arise.&lt;/p></description></item><item><title>Assignment 03 - Gilded Rose Patterns and Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-03/</guid><description>&lt;h1 id="reading-assignment-for-friday-may-3rd-2013">Reading Assignment for Friday, May 3rd 2013:&lt;/h1>
&lt;p>For this week&amp;rsquo;s lecture and especially the exercise, you will need some knowledge about sequence diagrams, and the Patterns Strategy, Factory, Factory method, Abstract Factory and Template Method.&lt;/p>
&lt;p>Here are some good sources:&lt;/p>
&lt;ul>
&lt;li>Sequence Diagrams: Sample Chapter from Fowler&amp;rsquo;s UML distilled: &lt;a href="https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2">https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2 &lt;/a>- Please read the full chapter.&lt;/li>
&lt;li>Strategy Pattern: - make sure you understand the pattern.&lt;/li>
&lt;li>Template Method: we talked about that in class (Sandy Metz Ruby example!), but you can look it up here:&lt;/li>
&lt;li>Factory Patterns: You don&amp;rsquo;t need to read all of the following web pages, but make sure you understand the idea of Factories (german wikipedia might also be helpful with this) and the distinction between the different factory patterns.&lt;/li>
&lt;li>Factory, ,&lt;/li>
&lt;li>Factory Method&lt;a href="https://www.oodesign.com/factory-method-pattern.html"> https://www.oodesign.com/factory-method-pattern.html&lt;/a>&lt;/li>
&lt;li>Optional:&lt;/li>
&lt;li>Abstract Factory&lt;a href="https://www.oodesign.com/abstract-factory-pattern.html"> https://www.oodesign.com/abstract-factory-pattern.html&lt;/a>&lt;/li>
&lt;li>Abstract Factory from the GoF-Book&lt;/li>
&lt;/ul>
&lt;p>Please read them before coming to class on Friday, as we will work with these topics in class.&lt;/p></description></item><item><title>Assignment 05: Functionality and Libraries</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-05/</guid><description>&lt;p>asdf
In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.&lt;/p></description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-01/</guid><description>&lt;h2 id="a-test-driven-development">A. Test Driven Development&lt;/h2>
&lt;p>Create a new Java Project in Eclipse (or your preferred IDE).&lt;/p>
&lt;p>Source Code for this Assignment: (removed)&lt;/p>
&lt;p>Create a Class Node as in Node.java _as Head of a linked list (added 5.4.13) _and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.java or creating a toString method as in toString.java.&lt;/p></description></item><item><title>Assignment 4: First Rails Steps</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-04/</guid><description>&lt;p>In this exercise, you will create a rails application for the first one or two features / user stories of your application. Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one or two model classes. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.&lt;/p></description></item><item><title>Exercise 01: Git and Markdown with a Practical Application</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-01/</guid><description>&lt;h2 id="pre-lab">Pre-Lab&lt;/h2>
&lt;ul>
&lt;li>Sign up on &lt;a href="https://github.com/">GitHub&lt;/a> if you haven&amp;rsquo;t already done so.&lt;/li>
&lt;li>Github translates markdown files automatically to HTML - That&amp;rsquo;s how the README.md files you see in most repositories work. Read through the &lt;a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown&lt;/a> documentation.&lt;/li>
&lt;/ul>
&lt;p>This exercise is for getting aquaintained with git and github (and markdown) with the practical application of creating online notes collaboratively. This gives you the opportunity to practice using git and github collaboration features with a bunch of plain text files before moving on to managing heaps of source code.&lt;/p></description></item><item><title>Exercise 02 - Use Cases and Scenarios</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-02/</guid><description>&lt;p>In this exercise you will develop detailed Scenarios for Use Cases for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.&lt;/p>
&lt;p>First, have a look at the description of the system:&lt;/p>
&lt;hr>
&lt;h2 id="halloween-treats-worldwide">Halloween Treats Worldwide&lt;/h2>
&lt;p>&lt;img src="../../images/pumpkins-wide.jpg" alt="Pumpkins" title="pumpkins">
Foto by &lt;a href="https://www.flickr.com/photos/pedroferrer/3615212504">Pedro J. Ferreira&lt;/a>&lt;/p>
&lt;p>Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats. The product manager has asked you to design and develop the platform for their business.&lt;/p></description></item><item><title>Exercise 03 - Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-03/</guid><description>&lt;p>&lt;img src="../../images/led-pumpkin.jpg" alt="LED Pumpkin" title="pumpkins">&lt;/p>
&lt;p>In this exercise you will create a Class Diagram for the HTW Application.
You should work on this exercise in a team of 2-4 people.&lt;/p>
&lt;p>Based on the system description in the &lt;a href="../lab-02">last exercise&lt;/a> and the use
cases you&amp;rsquo;ve developed,
draw a Class Diagram for your Application. It should contain associations (aggregations and compositions, association classes as needed), generalizations (inheritance), as well as the most important fields and method names of the classes.&lt;/p></description></item><item><title>Exercise 04 - UML Part III: State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-04/</guid><description>&lt;p>&lt;img src="../../images/machine.jpg" alt="Machine" title="machine">
Foto by &lt;a href="https://bkleinen.github.io/broken_link">Jeff Kubina&lt;/a>&lt;/p>
&lt;h2 id="prelab">Prelab&lt;/h2>
&lt;p>Please do read this Introduction to State Machine Diagrams before coming to lab!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.agilemodeling.com/style/stateChartDiagram.htm">UML 2 State Machine Diagramming Guidelines&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I will only give a brief intro/Q&amp;amp;A to State Machine Diagrams in the lab.&lt;/p>
&lt;h2 id="assignment">Assignment&lt;/h2>
&lt;p>Your job in this exercise is to model all of the following systems (2 points per system for 1-3, 4 points for system 4):&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Model the modified goat/cabbage/wolf problem: The farmer is in Schöneweide and wants to get his goat, his cabbage and his wolf over to Oberschöneweide. Only one thing can fit in his boat at a time beside himself. He cannot leave the cabbage and the goat or the goat and the wolf alone on the same side of the river, for obvious reasons. Is it possible for him to get all three possessions across the Spree? Draw a State Machine Diagram modelling a solution to this problem.&lt;/p></description></item><item><title>Exercise 05 - UML Part IV: Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-05/</guid><description>&lt;p>&lt;img src="../../images/sequence.jpg" alt="Launch Sequence">
&lt;!-- raw HTML omitted -->Pelican launch sequence. &lt;a href="https://www.flickr.com/photos/69214385@N04/9172233502">Foto by Don McCullough &lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="prelab">Prelab&lt;/h2>
&lt;p>Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; &lt;a href="https://www.informit.com/articles/article.aspx?p=169507">is available as a sample chapter online.&lt;/a>&lt;/p>
&lt;p>Read it as a preparation for the lab.&lt;/p>
&lt;h2 id="assignment">Assignment&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:&lt;/p></description></item><item><title>Exercise 06 - Ruby Exercise</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-06/</guid><description>&lt;p>You&amp;rsquo;ll find Stubs, Tests and examples for this exercise on &lt;a href="https://github.com/htw-imi-info3-archive/ruby-exercise">github&lt;/a>.&lt;/p>
&lt;h2 id="1-hobby-matcher">1. Hobby Matcher&lt;/h2>
&lt;p>Program a class &amp;ldquo;Person&amp;rdquo; that implements matching Persons for their hobbies, implementing those two user stories:&lt;/p>
&lt;p>Vision/Goal: As a User of the Service, I want to be able to find other People with the same hobbies as I do.&lt;/p>
&lt;p>Story 1: As a User of the Service I want to be able to enter my Hobbies as a comma-separated list.&lt;/p></description></item><item><title>Exercise 07: Test Driven Development</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-07/</guid><description>&lt;h1 id="assignment">Assignment&lt;/h1>
&lt;p>This exercise is about developing a linked list test driven.&lt;/p>
&lt;p>You can either do it in Java - completing the project we&amp;rsquo;ve started in class&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/htw-imi-info3-archive/TestDrivenList">TestDrivenList in Java (Eclipse Project)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>or in Ruby&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/htw-imi-info3-archive/TestDrivenListRuby">TestDrivenList in Ruby&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>or, if interested or bored, or undecided, both. But one is sufficient.&lt;/p>
&lt;p>The initial class Node is given in both versions, together with a test class and a to_s/toString method to ease testing.&lt;/p></description></item><item><title>Exercise 08: Black and White Box Tests</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-08/</guid><description>&lt;h2 id="assignment">Assignment&lt;/h2>
&lt;p>After exploring Unit Testing in the last exercise, we will be looking at &lt;a href="https://en.wikipedia.org/wiki/Black_box_testing">black-box&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/White_box_testing">white-box&lt;/a> testing in this second testing exercise.&lt;/p>
&lt;p>Source code for this exercise: &lt;a href="https://github.com/htw-imi-info3-archive/lab-08-blackwhite">https://github.com/htw-imi-info3-archive/lab-08-blackwhite&lt;/a>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Getting started:&lt;/strong> Give the equivalence classes for testing a method that determines the absolute value of an integer using the black-box methodology. Don&amp;rsquo;t peek at the code yet! Now check out &lt;a href="https://github.com/htw-imi-info3-archive/lab-08-blackwhite/blob/master/absolute.java">&lt;code>absolute.java&lt;/code>&lt;/a> in the repository and give the equivalence classes for a white-box test. Develop one test case for each equivalence class using JUnit.&lt;/li>
&lt;li>&lt;strong>Black-box test&lt;/strong>: Look at the grading scale at the bottom of the page (Which is not the [grading scale for this course]({{ site.BaseURL }}/studies/grading/grading-scale) ). Give the equivalence classes for a program that loops until a -1 is entered, asking for the number of points on this scale, prints the appropriate letter grade (A-F), and then prints the average number of points when -1 has been entered. Develop one test case for each equivalence class. Test your test cases with &lt;a href="https://github.com/htw-imi-info3-archive/lab-08-blackwhite/blob/master/GradingScale.class">GradingScale.class&lt;/a>. No fair decompiling the class! Report on the results. Did you find any errors?&lt;/li>
&lt;li>&lt;strong>White-box test&lt;/strong> / path coverage: Examine the code for &lt;a href="https://github.com/htw-imi-info3-archive/lab-08-blackwhite/blob/master/TaxTime.java">TaxTime.java&lt;/a>. Draw a code graph of the main class! How many independent paths are there? What are the conditions that cause each of the paths to be taken? Draw up a table giving you an overview of the conditions. Give test cases that exercise each path. Are there any errors in the program (besides the size of the tax bite)?&lt;/li>
&lt;li>&lt;strong>Reflection&lt;/strong> Consider the last two examples, especially TaxTime. What makes this programs hard to test? How would you refactor TaxTime to make it testable automatically with JUnit?&lt;/li>
&lt;/ol>
&lt;h3 id="grading-scale-points--procent">Grading Scale (Points = Procent)&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Points&lt;/th>
 &lt;th style="text-align: left">Grade&lt;/th>
 &lt;th style="text-align: left">ECTS&lt;/th>
 &lt;th style="text-align: left">Points&lt;/th>
 &lt;th style="text-align: left">Grade&lt;/th>
 &lt;th style="text-align: left">ECTS&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">95-100&lt;/td>
 &lt;td style="text-align: left">1,0&lt;/td>
 &lt;td style="text-align: left">A&lt;/td>
 &lt;td style="text-align: left">65-69&lt;/td>
 &lt;td style="text-align: left">3,0&lt;/td>
 &lt;td style="text-align: left">C&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">90-94&lt;/td>
 &lt;td style="text-align: left">1,3&lt;/td>
 &lt;td style="text-align: left">A&lt;/td>
 &lt;td style="text-align: left">60-64&lt;/td>
 &lt;td style="text-align: left">3,3&lt;/td>
 &lt;td style="text-align: left">C&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">85-89&lt;/td>
 &lt;td style="text-align: left">1,7&lt;/td>
 &lt;td style="text-align: left">B&lt;/td>
 &lt;td style="text-align: left">55-59&lt;/td>
 &lt;td style="text-align: left">3,7&lt;/td>
 &lt;td style="text-align: left">D&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">80-84&lt;/td>
 &lt;td style="text-align: left">2,0&lt;/td>
 &lt;td style="text-align: left">B&lt;/td>
 &lt;td style="text-align: left">50-54&lt;/td>
 &lt;td style="text-align: left">4,0&lt;/td>
 &lt;td style="text-align: left">D&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">75-79&lt;/td>
 &lt;td style="text-align: left">2,3&lt;/td>
 &lt;td style="text-align: left">B&lt;/td>
 &lt;td style="text-align: left">0-49&lt;/td>
 &lt;td style="text-align: left">5,0&lt;/td>
 &lt;td style="text-align: left">F&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">70-74&lt;/td>
 &lt;td style="text-align: left">2,7&lt;/td>
 &lt;td style="text-align: left">C&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="lab-writeup">Lab Writeup&lt;/h2>
&lt;p>Submit your Report as PDF to moodle.&lt;/p></description></item><item><title>Exercise 09 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-09/</guid><description>&lt;p>&lt;img src="../../images/The_Gilded_Rose.jpg" alt="The Gilded Rose">
&lt;!-- raw HTML omitted -->The Gilded Rose, Trade District, &lt;a href="https://wowwiki-archive.fandom.com/wiki/Gilded_Rose">World of Warcraft.&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="assignment-gilded-rose-kata">Assignment: Gilded Rose Kata&lt;/h2>
&lt;p>Source Code: There are three versions. Choose one. Have brief look at the
readme and the GuildedRose class.&lt;/p>
&lt;ul>
&lt;li>Ruby Version: &lt;a href="https://github.com/htw-imi-info3-archive/gilded-rose-kata">https://github.com/htw-imi-info3-archive/gilded-rose-kata&lt;/a>&lt;/li>
&lt;li>Java/Eclipse Version with Test Stub: &lt;a href="https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRoseJavaEclipse">https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRoseJavaEclipse&lt;/a>&lt;/li>
&lt;li>Original Version using Maven: &lt;a href="https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose">https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="write-characterization-tests">Write Characterization Tests&lt;/h3>
&lt;p>To be able to add the new functionality as requested you should write
Characterization tests first.
You will not yet refactor or add the required new functionality!&lt;/p></description></item><item><title>Exercise 10 - Legacy Code - Refactoring to Patterns - Part 2</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10-gilded-rose-part-2-draft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10-gilded-rose-part-2-draft/</guid><description>&lt;p>&lt;img src="../../images/gilded-rose-2696723066.jpg" alt="The Gilded Rose">
&lt;!-- raw HTML omitted -->A Gilded Rose, Foto by &lt;a href="https://www.flickr.com/photos/94464132@N00/2696723066">Kelton&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="assignment-gilded-rose-refactoring-and-enhancement">Assignment: Gilded Rose Refactoring and Enhancement&lt;/h2>
&lt;p>Refactor the Gilded Rose and add the requested new functionality.&lt;/p>
&lt;p>Last week, you&amp;rsquo;ve developed characterization tests for the guilded rose. Secured by that, you&amp;rsquo;re now safe to refactor the given implementation to a good object-oriented design - but don&amp;rsquo;t forget the goblin in the corner!&lt;/p>
&lt;p>That is, you can&amp;rsquo;t simply create an Item-Hierarchy where each item knows how to update it&amp;rsquo;s quality. You have to find another solution without touching the Item-Class.&lt;/p></description></item><item><title>Exercise 10 - Rails first steps</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10/</guid><description>&lt;p>In this exercise, you will create a rails application and add one or two features to it in which you work with the Model, View and Controller.&lt;/p>
&lt;p>Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one model class. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.&lt;/p></description></item><item><title>Exercise 11 - Associations and Internationalization</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-11/</guid><description>&lt;p>In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.&lt;/p></description></item><item><title>Lab Startup: Set up your development environment</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-00/</guid><description>&lt;p>&amp;mdash; To be done as e-Learning on Friday 11-Oct-2013 until Thursday 17-Oct-2013 latest! &amp;mdash;&lt;/p>
&lt;h2 id="which-computer-to-use">Which Computer to use?&lt;/h2>
&lt;p>As most of your colleagues in the former semesters completely ignored the new &lt;a href="https://imi-bachelor.htw-berlin.de/studium/labore/web-technology/">iMacs in our Web Technology lab&lt;/a> and rather unfolded their old, dirty little subnotebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises. If doing so, you need to make sure to have a set of software available.&lt;/p></description></item></channel></rss>