<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miscellany on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/</link><description>Recent content in Miscellany on Prof. Dr. Barne Kleinen</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Info 2</title><link>https://bkleinen.github.io/classes/ss2012/info2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2012/info2/</guid><description/></item><item><title>Informatics 1 (WS2011/2012)</title><link>https://bkleinen.github.io/classes/ws2011/info1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2011/info1/</guid><description>B1.1 Informatik 1 Wichtige Links [Kurs in Moodle][1] [Kurs im LSF][2] Bluej-Projekte: [Book Projects (zip file, 1.7Mb)][3] [Grading Scale][4] Informatik 1 ist eine Einführung in die (Objektorientierte) Programmierung, mit Java und BlueJ. Ich orientiere ich mich am Info1-Konzept von Prof. Dr. Weber-Wulff, dessen Webseite Sie [hier finden können][5], aber nicht ansehen müssen. Die für unseren Kurs relevanten Informationen werden Sie jeweils hier bzw. in Moodle finden.
Die Kurstermine finden Sie im LSF:[ B1.</description></item><item><title>Praxisprojekt</title><link>https://bkleinen.github.io/classes/ws2011/praxisprojekt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2011/praxisprojekt/</guid><description/></item><item><title>Repetition - Finger Exercises</title><link>https://bkleinen.github.io/classes/ss2024/info2/material/00_repetition_info1_finger_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/material/00_repetition_info1_finger_exercises/</guid><description>This is a small collection of programming finger exercises to get you back to programming java, and to get to know your new programming environment.
I&amp;rsquo;ve numbered them for easier referencing in the Q&amp;amp;A.
Basic Exercises Finger Exercise 1: Count 0s in an array Write a method that takes an integer array as parameter and returns the number of 0 contained in it.
Finger Exercise 2: Count occurrences of an character in a String Write a method that takes a String s and a character c as parameters and returns the number of occurrences of c in s.</description></item><item><title>Repetition - Finger Exercises</title><link>https://bkleinen.github.io/classes/ws2021/info2/material/00_repetition_info1_finger_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/material/00_repetition_info1_finger_exercises/</guid><description>This is a small collection of programming finger exercises to get you back to programming java, and to get to know your new programming environment.
I&amp;rsquo;ve numbered them for easier referencing in the Q&amp;amp;A.
Basic Exercises Finger Exercise 1: Count 0s in an array Write a method that takes an integer array as parameter and returns the number of 0 contained in it.
Finger Exercise 2: Count occurrences of an character in a String Write a method that takes a String s and a character c as parameters and returns the number of occurrences of c in s.</description></item><item><title>Backus-Naur-Form</title><link>https://bkleinen.github.io/material/languages/bnf/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/bnf/</guid><description>The Gist You might see something like&amp;hellip;.
if your repository is
https://github.com/&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt; the entry in your .git/config would be
[remote &amp;quot;origin&amp;quot;] url = git@github.com:&amp;lt;organisation&amp;gt;/&amp;lt;repo&amp;gt;.git Where \&amp;lt;organisation\&amp;gt; should be replaced with the github organisation, e.g. &amp;ldquo;htw-imi-info2&amp;rdquo; and \&amp;lt;repo\&amp;gt; with the name of the respective git repository, e.g. &amp;ldquo;python-jupyter-notebooks&amp;rdquo;, yielding at this concrete text:
https://github.com/htw-imi-info2/python-jupyter-notebooks [remote &amp;quot;origin&amp;quot;] url = git@github.com:htw-imi-info2/python-jupyter-notebooks.git Rewrite Rules The convention of informally marking placeholders that should be replaced with the delimiters &amp;lt; and &amp;gt; stems from the Backus-Naur-Form (BNF).</description></item><item><title>Notes on Learning Python</title><link>https://bkleinen.github.io/material/languages/python/</link><pubDate>Fri, 08 Oct 2021 21:32:10 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/python/</guid><description>Some Notes and Tips on Getting Started with the Python Programming Language There are many, and many good Python resources available, many of them for free - after all, it&amp;rsquo;s the most frequently used programming language for introductionary courses.
See Python Resources
Suggested Path for info3 As we are already using IntelliJ IDEA: PyCharm Edu comes with a nice interactive Python Course. You can either install/use PyCharm Edu or install the EduTools plugin for PyCharm Professional.</description></item><item><title>Aktuelle Themen II Agile Entwicklung mit Ruby on Rails</title><link>https://bkleinen.github.io/classes/ws2011/wtat1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2011/wtat1/</guid><description>Aktuelle Themen II Agile Entwicklung mit Ruby on Rails
- no further content here</description></item><item><title>Info 3</title><link>https://bkleinen.github.io/classes/ws2012/info3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info3/</guid><description/></item><item><title>Praxisprojekt Wheelmap Spiel MapATag</title><link>https://bkleinen.github.io/classes/ss2012/praxisprojekt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2012/praxisprojekt/</guid><description>-&amp;gt; SG-Seite</description></item><item><title>Repetition - Terms</title><link>https://bkleinen.github.io/classes/ss2024/info2/material/02_terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/material/02_terms/</guid><description>These are the Terms from the Info1 Book. Chapter Term chapter 01 01 object 01 class 01 instance 01 method 01 signature 01 parameter 01 type 01 state 01 source code 01 return value / result 01 method calling 01 compiler chapter 02 02 field / instance variable 02 constructor 02 method 02 method signature 02 method body 02 parameter 02 accessor method 02 mutator method 02 declaration 02 initialization 02 block 02 statement 02 assignment statement 02 conditional statement 02 return statement 02 result type 02 comment 02 expression boolean expression 02 operator 02 variable 02 local variable 02 scope 02 lifetime 02 actual parameter 02 formal parameters chapter 03 03 abstraction 03 object creation 03 modularization 03 divide and conquer 03 class diagram 03 object diagram 03 instance diagram 03 object reference 03 overloading 03 internal method call 03 external method call 03 dot notation 03 debugger 03 breakpoint 03 classes define types 03 primitive type chapter 04 + 07 04 collection 04 array 04 iterator 04 for-each-loop 04 while loop 04 for loop 04 index 04 import statement 04 library 04 package 04 anonymous object 04 null 05 chapter 05 05 lambda 05 functional style 05 streams 05 filter 05 map 05 reduce 05 pipeline chapter 06 06 interface 06 implementation 06 map 06 set 06 javadoc 06 access modifier 06 information hiding 06 coupling 06 class variable 06 static 06 constant 06 final 06 java library 06 library documentation 06 documentation 06 immutable 06 static variables chapter 09 09 testing 09 debugging 09 positive testing 09 negative testing 09 assertion 09 fixture 09 walkthrough chapter 08 08 coupling 08 cohesion 08 code duplication 08 encapsulation 08 responsibility-driven design 08 localizing change 08 method cohesion 08 class cohesion 08 refactoring 08 switch statement chapter 10 10 inheritance 10 superclass (parent), 10 subclass (child) 10 is-a 10 inheritance hierarchy 10 superclass constructors 10 reuse 10 abstract class 10 subtype 10 substituion 10 variables and subtypes 10 polymorphic variable 10 cast 10 object 10 autoboxing 10 wrapper classes chapter 11 11 static type 11 dynamic type 11 overriding 11 method polymorphism 11 toString 11 protected 11 redefinition 11 method lookup 11 method dispatch 11 method polymorphism chapter 11 12 abstract method 12 abstract class 12 concrete class 12 abstract subclass 12 multiple inheritance 12 interface (java construct) 12 implements (keyword) chapter 13 (not covered) 13 swing 13 component 13 layout 13 event 13 event handling 13 event listener 13 frame 13 menu bar 13 menu menu item 13 content pane 13 modal dialog 13 anonymous inner class 13 final variable 13 image formats chapter 14 14 exception 14 unchecked exception 14 checked exception 14 exception handler 14 assertion 14 serialization</description></item><item><title>Repetition - Terms</title><link>https://bkleinen.github.io/classes/ws2021/info2/material/02_terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/material/02_terms/</guid><description>These are the Terms from the Info1 Book. Chapter Term chapter 01 01 object 01 class 01 instance 01 method 01 signature 01 parameter 01 type 01 state 01 source code 01 return value / result 01 method calling 01 compiler chapter 02 02 field / instance variable 02 constructor 02 method 02 method signature 02 method body 02 parameter 02 accessor method 02 mutator method 02 declaration 02 initialization 02 block 02 statement 02 assignment statement 02 conditional statement 02 return statement 02 result type 02 comment 02 expression boolean expression 02 operator 02 variable 02 local variable 02 scope 02 lifetime 02 actual parameter 02 formal parameters chapter 03 03 abstraction 03 object creation 03 modularization 03 divide and conquer 03 class diagram 03 object diagram 03 instance diagram 03 object reference 03 overloading 03 internal method call 03 external method call 03 dot notation 03 debugger 03 breakpoint 03 classes define types 03 primitive type chapter 04 + 07 04 collection 04 array 04 iterator 04 for-each-loop 04 while loop 04 for loop 04 index 04 import statement 04 library 04 package 04 anonymous object 04 null 05 chapter 05 05 lambda 05 functional style 05 streams 05 filter 05 map 05 reduce 05 pipeline chapter 06 06 interface 06 implementation 06 map 06 set 06 javadoc 06 access modifier 06 information hiding 06 coupling 06 class variable 06 static 06 constant 06 final 06 java library 06 library documentation 06 documentation 06 immutable 06 static variables chapter 09 09 testing 09 debugging 09 positive testing 09 negative testing 09 assertion 09 fixture 09 walkthrough chapter 08 08 coupling 08 cohesion 08 code duplication 08 encapsulation 08 responsibility-driven design 08 localizing change 08 method cohesion 08 class cohesion 08 refactoring 08 switch statement chapter 10 10 inheritance 10 superclass (parent), 10 subclass (child) 10 is-a 10 inheritance hierarchy 10 superclass constructors 10 reuse 10 abstract class 10 subtype 10 substituion 10 variables and subtypes 10 polymorphic variable 10 cast 10 object 10 autoboxing 10 wrapper classes chapter 11 11 static type 11 dynamic type 11 overriding 11 method polymorphism 11 toString 11 protected 11 redefinition 11 method lookup 11 method dispatch 11 method polymorphism chapter 11 12 abstract method 12 abstract class 12 concrete class 12 abstract subclass 12 multiple inheritance 12 interface (java construct) 12 implements (keyword) chapter 13 (not covered) 13 swing 13 component 13 layout 13 event 13 event handling 13 event listener 13 frame 13 menu bar 13 menu menu item 13 content pane 13 modal dialog 13 anonymous inner class 13 final variable 13 image formats chapter 14 14 exception 14 unchecked exception 14 checked exception 14 exception handler 14 assertion 14 serialization</description></item><item><title>Aktuelle Themen II - Agile Entwicklung mit Ruby on Rails</title><link>https://bkleinen.github.io/classes/ws2012/wtat2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/wtat2/</guid><description/></item><item><title>Microcontroller Programmierung mit Arduino</title><link>https://bkleinen.github.io/classes/ss2013/if1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/if1/</guid><description>Microcontroller Programmierung mit Arduino auf der Informatica Feminale, Bremen, 1/2 Woche, 1 ECTS</description></item><item><title>Java für Einsteigerinnen II</title><link>https://bkleinen.github.io/classes/ss2013/if2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/if2/</guid><description>Java für Einsteigerinnen II auf der Informatica Feminale Bremen, 1 Woche, 3 ECTS</description></item><item><title>Lab 01: Application Design</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-01/</guid><description>CRC Cards
Learning Goals After this lab you should be able to agree with each of the following statements.
I can use CRC Cards to design an application:
Using the underline methods, I can identify candidates for classes, methods and fields. By working through scenarios I can identify cases where a class needs to be split up. By working through scenarios I can identify cases where classes need to be merged.</description></item><item><title>1 - Lab Startup</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
This Startup Lab is about installing the tools you need for Python Programming and getting some (more) hands-on experience with git, so start with that. If bored, move on to try python.
Which Computer to use? In my experience, all Students prefer to use their own computers, which is possible as all Software we&amp;rsquo;ll use and need is free to use (at least for Students).</description></item><item><title>Design of the Original</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/original_clock_display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/original_clock_display/</guid><description>up next&amp;gt; The #colon;ClockDisplay project is the first example for solving a problem using communicating objects. (in the Book &amp;ldquo;Objects First with Java: A Practical Introduction Using Bluej.&amp;rdquo; by David J Barnes and Michael Kölling)
Here&amp;rsquo;s a class diagram with the private fields and public methods (Constructors are omitted for clarity):
%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f0cd91', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#006100', 'tertiaryColor': '#fff' } } }%% classDiagram class ClockDisplay class NumberDisplay ClockDisplay .</description></item><item><title>e-Learning Video Summary</title><link>https://bkleinen.github.io/classes/ss2023/info3/material/e-learning-videos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/material/e-learning-videos/</guid><description>This e-learning is about watching one of the many talks about Agile Software Development / Software Craftship / S.O.L.I.D. or TDD principles available on YouTube and summarizing it.
I&amp;rsquo;ll post a more detailed overview of my recommendations later this week.
For the summary, consider doing it as a sketchnote; see my Sketchnotes page for a pointer how to start. Upload your summary/sketchnote together with the video reference &amp;amp; link (see the Info on Scribbr on how to reference a YouTube Video)</description></item><item><title>Links to frequently used pages</title><link>https://bkleinen.github.io/misc/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/misc/links/</guid><description>Tägliche Arbeit Moodle: https://moodle.htw-berlin.de/
Wiki für Studium und Lehre: https://wiki.htw-berlin.de/
Sprechstunde: Office Hours can be found in the WIKI. Please register there for appointments. Wiki - Intranet: https://wiki.rz.htw-berlin.de/
HTW ServiceportalDienstreise, SHK, Wunschzeiten und Lehrplanung: https://fb-service.htw-berlin.de/
Lehrabrechnung: https://my.htw-berlin.de/
Zoom: https://htw-berlin.zoom.us/
Account-Service: https://account.htw-berlin.de:
Lehrabrechnung (&amp;ldquo;Proof of teaching commitment&amp;rdquo;) Account Email bearbeiten Abwesenheitsnotiz LSF Modulhandbuch Bachelor ansehen
Bachelor editieren
Master ansehen
Master bearbeiten
Gelegentlich Logos und Folien im HTW-Design: https://corporatedesign.htw-berlin.de/logos/ Speiseplan der Mensa Gastzugänge Wifi - funktioniert nicht mehr https://account.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ss2023/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/schedule/</guid><description>This schedule is, more than always, tentative.
Week KW Date Lecture Topic Lab (Tue &amp;amp; Wed) 1 14 Tue 04/04/2023 Wed 05/04/2023 Introduction to Info3, Source Code Management No Lab. 2 15 Tue 11/04/2023 Source Code Management (GIT) 1 - Lab Startup Wed 12/04/2023 Introduction to Software Engineering and Software Development Processes 3 16 Tue 18/04/2023 System Modeling, Architectural Design, Requirement Engineering 2 - Learning Python Wed 19/04/2023 UML &amp;amp; System Modeling, Use Cases and User Stories 4 17 Tue 25/04/2023 UML &amp;amp; System Modeling: Requirements, Product Owner Game 3 - Python Project Wed 26/04/2023 &amp;ndash; no lecture &amp;ndash; 5 18 Tue 02/05/2023 Software Processes II / Requirements Analysis 4 - Use Cases and Class Diagrams Part I Wed 03/05/2023 Software Design Patterns (GOF) 6 19 Tue 09/05/2023 Clean Code Intro &amp;amp; Poster preparation 5 - Use Cases and Class Diagrams Part II Wed 10/05/2023 Clean Code Poster Session 7 20 Tue 16/05/2023 e-learning / Software Design Patterns (GOF) or Clean Code Himmelfahrt Wed 17/05/2023 e-learning / Video Summary 8 21 Tue 23/05/2023 Agile Development, Scrum 6 - Sequence Diagrams Wed 24/05/2023 Legacy Code &amp;amp; Refactoring 9 22 Tue 30/05/2023 Wed 31/05/2023 10 23 Tue 06/06/2023 Wed 07/06/2023 11 24 Tue 13/06/2023 Software Testing, TDD, Code Quality 7 - Testing Wed 14/06/2023 SOLID Principles, Refactoring to Patterns 12 25 Tue 20/06/2023 OO In Depth: Composition and Inheritance , Dynamic Typing, Duck Typing 8 - Gilded Rose Wed 21/06/2023 More on Design 13 26 Tue 27/06/2023 Application Architectures &amp;amp; System Models 9 - State Machine Diagrams Wed 28/06/2023 Web Applications Intro, Patterns of Enterprise Application Architecture (POEAA) 14 27 Tue 04/07/2023 More on Inheritance, Composition and Inheritance (Poodr Chapter 8) 10 - Web Applications 1 Wed 05/07/2023 Dependencies &amp;amp; how to test and handle them, Internationalization and Localization 15 28 Tue 11/07/2023 Continuous Integration &amp;amp; Deployment 11 - Web Applications 2 Wed 12/07/2023 Probeklausur (vorr.</description></item><item><title>Lab 02: Programming &amp; Tools, Review of CRC Model</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-02/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements
I am familiar with programming in IntelliJ:
I can create a new Java project in IntelliJ I remember most of the concepts from A1 Ex1 I can run my new Java project in IntelliJ I am ready to use Git:
I can clone an online repository I can create an empty repository on GitLab or GitHub I can update my local repository&amp;rsquo;s remotes I can add changes to be committed I can commit changes I can push changes I have reviewed the Domain Model</description></item><item><title>2 - Learning Python</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-02-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-02-python/</guid><description>As always, you need to prepare a report together and each hand in this same report in moodle.
Part 1: Python Learning with Unit Tests Continue the collaborative work on the Python Learning Repository: https://github.com/htw-imi-info3/python-learning.
** note that you need write permissions for the repository! I&amp;rsquo;ll add everyone to the team on github in the labs. **
This part can be done together, but each person must have their own topic/file and each one must commit a new file to the repo and review two other files.</description></item><item><title>e-learning reviews - Software Design Patterns (GOF) or Clean Code</title><link>https://bkleinen.github.io/classes/ss2023/info3/material/e-learning-reviews/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/material/e-learning-reviews/</guid><description>This e-learning is about watching reviewing your own and another python project and apply clean code principles and/or find patterns that are worth applying for the project.
I will add instructions on how to upload your project later this week and will do a raffle on saturday for the &amp;ldquo;other&amp;rdquo; project.</description></item><item><title>Info2 SS2015 Schedule</title><link>https://bkleinen.github.io/classes/ss2015/info2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/schedule/</guid><description>Tentative Schedule - Lab Topics are subject to change! Week Lecture Lecture Topic Lab Lab Topic 1/15 Fri, 10 Apr 2015 Welcome Back, Overview, Designing Applications 2/16 Tue, 14 Apr 2015 Toolbox: Java, Eclipse 1 Designing an Application, CRC Cards (Pre-Lab!) Fri, 17 Apr 2015 Error Handling and Exceptions reviewed, 3/17 Tue, 21 Apr 2015 Networking in Java. File I/O. 2 Implementing CRC cards (Pre-Lab!) Fri, 24 Apr 2015 Double Lecture: Concurrency; Binary Search, Complexity 4/18 Tue, 28 Apr 2015 Properties of Algorithms, Maximum Contiguous Subsequence Sum 3 Networking Exercise (Pre-Lab!</description></item><item><title>Projektvergabe und Belegung</title><link>https://bkleinen.github.io/classes/ss2024/projects/organisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/projects/organisation/</guid><description>Die Projekte werden NUR beim Projektvergabetermin verteilt! D.h. um an einem Projekt teilnehmen zu können, müssen Sie an diesem Termin teilnehmen.
Bachelor: Mittwoch, 10.04.2024 12:15 -13:45 WH-C 349 (Zeit im LSF mit 12:45 ist falsch)
Master: Mittwoch, 10.04.2024 14:00 -15:30 WH-C 349
Agenda Projektvergabe Intro und Organisatorisches (ca. 15 min) Projekt-Pitches: Die Projektbetreuer:innen stellen die Projekte in jeweils 5-8 min vor und beantworten Fragen zum Projekt Projektverteilung: Studierende können in ausgeloster Reihenfolge das Projekt wählen.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ss2023/m17-masterseminar/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/m17-masterseminar/schedule/</guid><description> Week KW Date Lecture Topic 1 14 Thu 06/04/2023 &amp;ndash; no class &amp;ndash; 2 15 Thu 13/04/2023 Introductions, Doing Research 3 16 Thu 20/04/2023 Writing a Bibliography 4 17 Thu 27/04/2023 Libraries in Berlin 5 18 Thu 04/05/2023 Referencing and Plagiarism avoidance 6 19 Thu 11/05/2023 (ausgefallen) 20 Thu 18/05/2023 &amp;ndash; no class (Himmelfahrt) &amp;ndash; 7 21 Thu 25/05/2023 Journal Club I 8 22 Thu 01/06/2023 Writing Strategies, How to give a talk 9 23 Thu 08/06/2023 Presentations with media 10 24 Thu 15/06/2023 IC Talks Round 1 11 25 Thu 22/06/2023 IC Talks Round 2 12 26 Thu 29/06/2023 Journal Club II (the real one) 13 27 Thu 06/07/2023 Editing exercise 14 28 Thu 13/07/2023 Ethics Exercise 15 29 Thu 20/07/2023 Licensing Models 16 30 Thu 27/07/2023 Career Management 17 31 Thu 03/08/2023 &amp;ndash; no class &amp;ndash;</description></item><item><title>Tentative Schedule</title><link>https://bkleinen.github.io/classes/ss2024/m17-masterseminar/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/m17-masterseminar/schedule/</guid><description>This Term, the Master Seminar will be held with three Day-Long Meetings in Person @ HTW Wilhelminenhof and Zoom-Sessions.
Week KW Date Time 1 14 Thu 04/04/2024 17:00-18:30 Zoom 2 15 Thu 11/04/2024 3 16 Mon 15/04/2024 09:00-18:00 1. Blocktermin Thu 18/04/2024 4 17 Thu 25/04/2024 17:00-18:30 Zoom 5 18 Thu 02/05/2024 19 Thu 09/05/2024 Himmelfahrt 6 20 Thu 16/05/2024 Fri 17/05/2024 09:00-18:00 2. Blocktermin 7 21 Thu 23/05/2024 17:00-18:30 Zoom 8 22 Thu 30/05/2024 9 23 Thu 06/06/2024 17:00-18:30 Zoom 10 24 Thu 13/06/2024 11 25 Thu 20/06/2024 12 26 Thu 27/06/2024 17:00-18:30 Zoom 13 27 Thu 04/07/2024 14 28 Mon 08/07/2024 09:00-18:00 3.</description></item><item><title>Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2023/m17-masterseminar/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/m17-masterseminar/schedule/</guid><description>Week KW Date Lecture Topic 40 Tue 03/10/2023 &amp;ndash; Feiertag: no class &amp;ndash; 1 41 Tue 10/10/2023 Introduction 2 42 Tue 17/10/2023 Planung 3 43 Tue 24/10/2023 Zeitplanung, Literaturliste, Zitieren 4 44 Tue 31/10/2023 Wissenschaftliches Schreiben &amp;ldquo;How to&amp;hellip;&amp;rdquo; Blockaden etc. / bis dahin Journal Club Paper raussuchen 5 45 Tue 07/11/2023 -ausgefallen- 6 46 Tue 14/11/2023 ** Lightning Talks &amp;ldquo;Fokus&amp;rdquo; + Journal Club 7 47 Tue 21/11/2023 Kolloquium - Präsentationsstruktur Planen Vorbereitung Schwerpunkt Theorie 8 48 Tue 28/11/2023 Q+A 30 min 1/2 Termin &amp;amp; Wie macht man wiss.</description></item><item><title>Trans@HTW</title><link>https://bkleinen.github.io/misc/trans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/misc/trans/</guid><description>"Artikel 2 des Grundgesetzes garantiert das Recht auf freie Entfaltung der Persönlichkeit, auf Leben, auf körperliche Unversehrtheit und schützt die Freiheit der Person. Da steht nicht: garantiert »die halb-freie Entfaltung der Persönlichkeit«, da steht auch nicht: »die freie Entfaltung nur jener Persönlichkeiten, die sich an ihre bei der Geburt festgestellte Geschlechtszugehörigkeit halten«, da steht nicht: »die Freiheit nur jener Personen, die den traditionellen Vorstellungen von ›natürlicher‹ Männlichkeit und Weiblichkeit entsprechen«.</description></item><item><title>Lab 03: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-03/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements. This looks like a lot, but it is all repetition from what you learned in Info1. Ideally you agree with each statement even before starting the lab.
I remember programming concepts concerning classes and objects:
I know the difference between classes and objects. I can instantiate an object. I remember programming concepts concerning fields and variable types:</description></item><item><title>Lab 03 Handout: A Note on the Notation of CRC Cards</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/note-on-crc-cards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/note-on-crc-cards/</guid><description>We&amp;rsquo;ve discussed the relationship between the Classes &amp;ldquo;Student&amp;rdquo; and &amp;ldquo;Course&amp;rdquo; (aka Module, Class) in last week&amp;rsquo;s lab and lecture.
I&amp;rsquo;ve pointed out that if you change the syntax of the representation, e.g. because you use some kind of diagramming tool, you have to be careful not to loose any information.
if you consider these two CRC cards below, a CRC card contains information about these three things1:
Class Name Responsibilities Collaborators Dependencies (see below) CRC-Cards Consider these two CRC-Cards: Student Stores Information about Student (e.</description></item><item><title>3 - Python Project</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-03-pythonproject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-03-pythonproject/</guid><description>As always, you need to prepare a report together and each hand in this same report in moodle.
The Report should contain:
names of all team members a log of what you did notes of commands used &amp;amp; learned references to sources used encountered issues and the solutions found or why you gave up on something - see below a brief overall reflection on the lab. This can be done together or individually.</description></item><item><title>Benotung und Modulprüfung</title><link>https://bkleinen.github.io/classes/ss2024/projects/pruefung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/projects/pruefung/</guid><description>Das Modul Praxisprojekt besteht sowohl im Bachelor als auch im Master zwei benoteten Teilmodulprüfungen - der Durchführung und der Showtime. Im Bachelor kommt Projektmanagement als undifferenziert bewertetes Teilmodul dazu:
Bachelor B24 (siehe Anlage 4B der StuPo) 15 LP B24.1 Projekt: Analyse, Planung, Durchführung. Die Prüfungsleistung wird in Form einer Projektdokumentation erbracht. (70%, Benotet durch Projektbetreuer) B24.2 Projektmanagement: undifferenzierte Bewertung B24.3 Präsentation und Verteidigung der Projektergebnisse - die Prüfungsleistung wird durch die Showtime Vorbereitung und Durchführung erbracht (30%, Benotet durch hauptamtliche Lehrkräfte des Studiengangs) Prüfungszeitraum: (v.</description></item><item><title>ClockDisplay Critique</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/clock_display_critique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/clock_display_critique/</guid><description>&amp;lt;prev up next&amp;gt; The ClockDisplay aims at showing object interaction, which it does.
The problems I see are: it mixes Model and Representation. Furthermore, the Model or more simply put the stored state, which is the time the clocks shows at the moment, is distributed between three objects - a NumberDisplay for hours and minutes respectively, and the ClockDisplay holding the knowledge how to combine the two.
also, the construction of the displayString is distributed between all objects - see the updateDisplay() part of the timeTick sequence diagram.</description></item><item><title>Email Collector for LSF</title><link>https://bkleinen.github.io/misc/lsf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/misc/lsf/</guid><description>Email Collector for LSF Use Default Replacement Use Replacement for "Teilnahme- und manuelle Zuteilungsliste" Use Replacement for Email-Versandliste Show Email Adresses Ignored Lines RegExp used: Paste list from LSF here here be dragons Links Liste aus "Spezielle Information (Namenliste mit Anmeldungen und Ablehnungen)"pasten. mehr info unten. Anleitung In die Box links den Inhalt der Tabelle "Spezielle Information (Namenliste mit Anmeldungen und Ablehnungen)" pasten. Weg dorthin: Unten auf "Anmeldezahlen" und dann "</description></item><item><title>Info1 - Workbooks</title><link>https://bkleinen.github.io/classes/ss2022/info1/workbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/workbook/</guid><description>Workbook: Chapter Summaries and Exercises We encourage you to maintain hand-written notes and sketches. For this, we&amp;rsquo;ve prepared a workbook template (available in moodle) containing additional exercises and room for your notes. You can hand in your weekly notes for additional points .
We will provide Paper Worksheets for each Chapter in Moodle and encourage you to print them out and work on them with real pens.
Bind them to an A5 Workbook They will be provided in a format that allows you to bind them as a book later if you wish to.</description></item><item><title>Kara Class Diagram</title><link>https://bkleinen.github.io/classes/ws2023/info1/resources/mermaid/kara-class-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/resources/mermaid/kara-class-diagram/</guid><description>Kara Class Diagram %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% classDiagram Kara &lt;|-- MyKara Actor &lt;|-- Kara class Actor{ -int x -int y -int rotation +int getX() +int getY() +int getRotation() } class Kara{ void move() void turnLeft() void turnRight() void putLeaf() void removeLeaf() boolean onLeaf() boolean treeFront() boolean treeLeft() boolean treeRight() boolean mushroomFront() } class MyKara{ void act() void aroundTree() } With Object (top of inheritance hierarchy) %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% classDiagram Kara &lt;|-- MyKara Actor &lt;|-- Kara Object &lt;|-- Actor class Object{ String toString() .</description></item><item><title>4 - Use Cases and Class Diagrams Part I</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-04-usecases-classdiagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-04-usecases-classdiagrams/</guid><description>Foto by Marvin Meyer
Pre-Lab 1. Know what the lab is about In this exercise you will do the first part of working on a
Use Case Diagram Scenarios A Class Diagram for an application called &amp;ldquo;StudyPartner&amp;rdquo;. 2. Study Partner App The Product Manager has asked you to design and develop the app for IMI:
Study Partner is planned to be an application where IMI-Students can find and meet fellow IMI-Students for various kinds of joint study activities.</description></item><item><title>A very simple ClockDisplay</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/simple_clock_display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/simple_clock_display/</guid><description>&amp;lt;prev up next&amp;gt; All the ClockDisplay example really does is returning a String like &amp;ldquo;13:45&amp;rdquo; from getTime() after either the time has been set to 13:45 by calling setTime() or after calling the timeTick() method the appropriate amount of times.
This can, of course, be implemented in a much simpler way. While this may be true for most of the small examples we use for programming and software engineering classes, I feel that the way the display is split into two NumberDisplays in combination with the timeTick / increment makes little sense and seems to be quite confusing for students.</description></item><item><title>Book Diagrams</title><link>https://bkleinen.github.io/classes/ws2023/info1/resources/mermaid/all-mermaid-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/resources/mermaid/all-mermaid-diagrams/</guid><description>classDiagram class TicketMachine{ TicketMachine(int ticketPrice) int getPrice() int getBalance() void insertMoney(int amount) void printTicket() }</description></item><item><title>Code Examples</title><link>https://bkleinen.github.io/classes/ws2023/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/code/</guid><description>Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything to github!
If I make changes during class, I will push them to the branch with the semester name. To switch to the branch, select the according semester in the branches menu in the upper left corner on each repository&amp;rsquo;s main page.(it shows &amp;ldquo;main&amp;rdquo; usually - the default branch) Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you the exact changes I made during class.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ss2022/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything to github! The &amp;ldquo;Changes in ss2022&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you the exact changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you you&amp;rsquo;ll see the changes.</description></item><item><title>Kara ClockDisplays</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/kara-clock-display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/kara-clock-display/</guid><description>&amp;lt;prev up next&amp;gt; &amp;hellip; not yet here, see KaraClock Exercises for now</description></item><item><title>Lab 04: Histogram</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-04/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can handle File-based IO with Java:
I can read from a text file using a Reader, eg. BufferedReader. I can write to a text file using a Writer, eg. BufferedWriter. I close my streams after I finished reading or writing. I can use try-with-resources to make sure that in the end, a resource is always closed I can handle Exceptions:</description></item><item><title>Projects Shortlist Summer 2024</title><link>https://bkleinen.github.io/classes/ss2024/projects/project-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/projects/project-list/</guid><description>Projektbeschreibungen sind im Wiki (nur mit HTW-Login und für IMIs).
Bachelor-Projekte B1: Infinite Zoom in 3D (Tobias Lenz)
B2: Digital Signage für den Makerspace (Barne Kleinen)
B3: Entwicklung einer Anwendung zur zyklusadaptierten Leistungsoptimierung im Sport (David Koschnick)
B4: AI-driven product research agent: Enable informed decisions on idealo (Jakob Panten, Tilo Nitze)
B5: PAM - Process Modelling and Management (Weiterentwicklung des Tools) (Martin Singer)
B6: AR und Videomapping (Alexander Kramer)
Master-Projekte M1: Gaming for Future II: Turning the simulation into a game (David Müller)</description></item><item><title>5 - Use Cases and Class Diagrams Part II</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-05-usecases-classdiagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-05-usecases-classdiagrams/</guid><description>This is part 2 - refer to Part 1 for the assignment.
Don&amp;rsquo;t worry too much about the differentiation of Part 1 and 2, just add missing parts and refine your design based on what you&amp;rsquo;ve learned.
Depending on the reviews of Part1, additional guidance might be added here.
Results Submission Hand in a lab report (including your diagrams) More info on the Labs page.</description></item><item><title>Lab 05: Chatterbox</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-05/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can use the Socket API for TCP connections:
I can create a server that listens for and accepts connections I can create a client that makes a connection request to the server I can send text from a client to a server via streams I can send text from a server to a client via streams I can use multithreading to simultaneously process tcp requests and input from the user (if you do the &amp;ldquo;for the bored&amp;rdquo; part: I can use multithreading for the server to handle multiple connection requests) Pre-Lab Write down the code for the following questions and be able to explain what is happening.</description></item><item><title>6 - Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-06-sequence-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-06-sequence-diagrams/</guid><description>Pelican launch sequence. Foto by Don McCullough Pre-Lab Read Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online. Assignment Part 1: Sequence Diagrams of Known Classes As an introductionary exercise for Sequence Diagrams, pick one of the following example projects from Info1 and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Tech Support / Use case: user command is entered (start() methodin SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Lab 06: Execution times</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-06/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can evaluate the efficiency of algorithms:
I understand the correlation between input and running time for different program structures I can use big-o-notation to describe the running time of algorithms I can calculate the running time of algorithms by adding up running times of different structures I can compare running times based on their running time in big-o-notation Pre-Lab P1.</description></item><item><title>7 - Testing</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-07-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-07-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Pre-Lab 1. Read about Closed- and Open-Box Tests. I chose &amp;ldquo;Closed- and Open-Box Tests&amp;rdquo; as a more inclusive replacement for the terms &amp;ldquo;Black- and White-Box&amp;rdquo; Tests (why?). I could not find a general agreement on the best replacements, so I chose this terms as I think they are also even a better metaphor for the strategies to find test cases they describe:</description></item><item><title>Lab 07: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-07/</guid><description>Pre-Lab Source code scaffold for this exercise: https://github.com/htw-imi-info2/Lab07_ReversePolishNotation P1. Make sure that you understand postfix evaluation. If you do the complete Pre-Lab you will be able to understand the algorithms given in the hand out.
P2. What is the order of precedence for the operators &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;rdquo;, &amp;ldquo;*&amp;rdquo;, &amp;ldquo;/&amp;rdquo;, &amp;ldquo;^&amp;rdquo;? If we wanted to include &amp;ldquo;(&amp;rdquo; and &amp;ldquo;)&amp;rdquo; in this order, where would each of them be?
P3. Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation.</description></item><item><title>Lab 07 Handout: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-07-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-07-handout/</guid><description>Definitions Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
Calculator algorithm Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) Convert infix to postfix algorithm Given a sequence of tokens s and a result r While s is not empty: Let t = next token.</description></item><item><title>8 - Gilded Rose</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-08-gilded-rose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-08-gilded-rose/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
The Gilded Rose Kata &amp;ndash; Working with Legacy Code and Refactoring to Patterns &amp;ndash;
Introduction About Coding Katas The Term &amp;lsquo;Kata&amp;rsquo; is a Metaphor taken from Martial Arts for a Pattern of Movements to Practice and Perfect those same Movements (Wikipedia:Kata). According to (Wikipedia:Kata), it was introduced as a practice to Software Craftsmanship by Dave Thomas in his blog, to practice developing software using techniques like TDD, Refactoring or the SOLID principles.</description></item><item><title>Lab 08: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-08/</guid><description>Source code scaffold for this exercise: https://github.com/htw-imi-info2/Lab08_SierpinskiTriangle Pre-Lab P1. What exactly is an equilateral triangle? Draft a class that draws a triangle. What data do you need to know in order to put a triangle at a particular position on the screen?
P2. What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
P3. What is the resolution of your computer screen? How can you find out?</description></item><item><title>LED ClockDisplay</title><link>https://bkleinen.github.io/material/info1/clock_display_refactoring/led_display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/clock_display_refactoring/led_display/</guid><description>&amp;lt;prev up Documentation LEDDisplay extends ClockDisplay %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f0cd91', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#006100', 'tertiaryColor': '#fff' } } }%% classDiagram class ClockDisplay class LEDDisplay class NumberDisplay ClockDisplay &lt;|-- LEDDisplay LEDDisplay ..> NumberDisplay class ClockDisplay{ -String displayString -int minutesInDay void timeTick() void setTime(int hour, int minute) String getTime() void updateDisplay() String getDisplayValue(int value) initRealDisplay(int hour, int minute) updateRealDisplay() } class LEDDisplay{ -NumberDisplay hours -NumberDisplay minutes initRealDisplay(int hour, int minute) updateRealDisplay() } NumberDisplay: void setValue(int) ClockDisplay: additional methods for clock and automatic Ticker %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f0cd91', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#006100', 'tertiaryColor': '#fff' } } }%% classDiagram class ClockDisplay{ void start() void stop() void toggleTicker() void setTickerSpeed(int) } LEDDisplay: setTime() - complete %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram actor YOU activate #colon;LEDDisplay YOU->>+#colon;LEDDisplay: setTime(13,45) #colon;LEDDisplay->>+#colon;LEDDisplay: updateDisplay() activate #colon;LEDDisplay #colon;LEDDisplay->>+#colon;LEDDisplay: updateRealDisplay() activate hours#colon;NumberDisplay #colon;LEDDisplay->>+hours#colon;NumberDisplay: updateDisplay(13) activate lower#colon;LEDDigit hours#colon;NumberDisplay->>+lower#colon;LEDDigit:display(3) deactivate lower#colon;LEDDigit activate upper#colon;LEDDigit hours#colon;NumberDisplay->>+upper#colon;LEDDigit:display(1) deactivate upper#colon;LEDDigit deactivate hours#colon;NumberDisplay activate minutes#colon;NumberDisplay #colon;LEDDisplay->>+minutes#colon;NumberDisplay: updateDisplay(45) activate lower_m#colon;LEDDigit minutes#colon;NumberDisplay->>+lower_m#colon;LEDDigit:display(5) deactivate lower_m#colon;LEDDigit activate upper_m#colon;LEDDigit minutes#colon;NumberDisplay->>+upper_m#colon;LEDDigit:display(4) deactivate upper_m#colon;LEDDigit deactivate minutes#colon;NumberDisplay deactivate #colon;LEDDisplay deactivate #colon;LEDDisplay deactivate #colon;LEDDisplay #colon;LEDDisplay-->>-YOU:void LEDDisplay: setTime() - ClockDisplay &amp;amp; NumberDisplay %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram actor YOU activate #colon;LEDDisplay YOU->>+#colon;LEDDisplay: setTime(13,45) #colon;LEDDisplay->>+#colon;LEDDisplay: updateDisplay() activate #colon;LEDDisplay #colon;LEDDisplay->>+#colon;LEDDisplay: updateRealDisplay() activate hours#colon;NumberDisplay #colon;LEDDisplay->>+hours#colon;NumberDisplay: updateDisplay(13) deactivate hours#colon;NumberDisplay activate minutes#colon;NumberDisplay #colon;LEDDisplay->>+minutes#colon;NumberDisplay: updateDisplay(45) deactivate minutes#colon;NumberDisplay deactivate #colon;LEDDisplay deactivate #colon;LEDDisplay deactivate #colon;LEDDisplay #colon;LEDDisplay-->>-YOU:void LEDDisplay: setTime() - both NumberDisplays &amp;amp; LEDDigit %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram #colon;LEDDisplay->>+#colon;NumberDisplay: updateDisplay(13) activate lower#colon;LEDDigit #colon;NumberDisplay->>+lower#colon;LEDDigit:display(3) deactivate lower#colon;LEDDigit activate upper#colon;LEDDigit #colon;NumberDisplay->>+upper#colon;LEDDigit:display(1) deactivate upper#colon;LEDDigit deactivate #colon;NumberDisplay ClockDisplay original: setTime() copy %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram actor YOU YOU->>+#colon;ClockDisplay: setTime(13,45) #colon;ClockDisplay->>+hours#colon;NumberDisplay:setValue(13) hours#colon;NumberDisplay-->>-#colon;ClockDisplay:void #colon;ClockDisplay->>+minutes#colon;NumberDisplay:setValue(45) minutes#colon;NumberDisplay-->>-#colon;ClockDisplay:void #colon;ClockDisplay->>+#colon;ClockDisplay:updateDisplay() #colon;ClockDisplay->>+hours#colon;NumberDisplay:getDisplayValue() hours#colon;NumberDisplay-->>-#colon;ClockDisplay:displayString #colon;ClockDisplay->>+minutes#colon;NumberDisplay:getDisplayValue() minutes#colon;NumberDisplay-->>-#colon;ClockDisplay:displayString deactivate #colon;ClockDisplay #colon;ClockDisplay-->>-YOU:void LEDDisplay: setTime() NumberDisplay-&amp;gt;LEDDigit %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram activate #colon;LEDDigit #colon;NumberDisplay->>+#colon;LEDDigit: display(9) loop each Segment alt segment needs to be shown for value activate #colon;Segment #colon;LEDDigit->>+#colon;Segment: makeVisible() deactivate #colon;Segment else #colon;LEDDigit->>+#colon;Segment: makeInvisible() deactivate #colon;Segment end end deactivate #colon;LEDDigit Initialization (maybe old) %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f69e9d', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#f4f4f4', 'activationBorderColor': '#000', 'tertiaryColor': '#fff' } } }%% sequenceDiagram actor YOU create participant ClockDisplay YOU->>+ClockDisplay: new() create participant LEDClockDisplay ClockDisplay->>+LEDClockDisplay: new() create participant Canvas LEDClockDisplay->>+Canvas: new() Canvas-->>-LEDClockDisplay: canvas LEDClockDisplay-->>-ClockDisplay: leds loop [ for each number display part] create participant NumberDisplay ClockDisplay->>+NumberDisplay:new() NumberDisplay-->>-ClockDisplay:aNumberDisplay ClockDisplay->>+LEDClockDisplay: add(aNumberDisplay) LEDClockDisplay->>+NumberDisplay:initDisplay(pos, canvas) loop [ for each led digit] create participant LEDDigit NumberDisplay->>+LEDDigit:new(pos, canvas) loop [ for each led segment] create participant Segment LEDDigit->>+Segment:new(pos, canvas) Segment-->>-LEDDigit: segment end LEDDigit-->>-NumberDisplay: digit end NumberDisplay-->>-LEDClockDisplay:void LEDClockDisplay-->>-ClockDisplay:void end ClockDisplay-->>-YOU:void loop [ for each display part]</description></item><item><title>9 - State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-09-state-machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-09-state-machines/</guid><description>Tape of a fancy Turing Machine from Wikipedia
Pre-Lab For an introduction to state machine diagrams, see https://www.agilemodeling.com/artifacts/stateMachineDiagram.htm.
for the parser exercise, have a look at Finite Automata - in their context of formal languages their typical event is reading a character from an input stream, and can be (and usually are) represented by state machine diagrams.
Part 1: State Machine Diagrams Model the modified goat/cabbage/wolf problem: The farmer is in Schöneweide and wants to get his goat, his cabbage and his wolf over to Oberschöneweide.</description></item><item><title>Lab 09: Eight Queens</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-09/</guid><description>Pre-Lab P1. Make a chess board and mark how a Queen moves and threatens.
P2. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.
P3. Given two cells in a matrix, (r1, c1) and (r2, c2). How can you determine if a) the cells are in the same row? b) the cells are in the same column? c) the cells are in the same ascending diagonal (lower left to upper right)?</description></item><item><title>Conditional Statement</title><link>https://bkleinen.github.io/material/info1-script/01_basics/conditional/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1-script/01_basics/conditional/</guid><description>Conditional Statement (if-then-else statement) A conditional statement allows you to conditionally execute code parts based on a condition, either true or false or something that results in true or false (see boolean expression).
Structure // before conditional if(condition){ // if-part } else { // else-part } // after conditional flowchart TD A[Start] B(before conditional) D(if-part) E(else-part) F(after conditional) A --> B B --> C{condition true?} C --true--> D C -->|false| E D &amp; E --> F F -->G[End] The else part can be omitted&amp;hellip; &amp;hellip; if you don&amp;rsquo;t need it.</description></item><item><title>10 - Web Applications 1</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-10-webapps-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-10-webapps-1/</guid><description>Prelab P1. Make sure the scaffold app is installed and running on your machine. Refer to the README.md for instructions. https://github.com/htw-imi-info3/django_lab_scaffold/
P2. Startup the app, and create some testdata, using both the studybuddy_app app and the admin app.
P3. Have a look at the sourcecode, especially the studybuddy_app part and the Meetup model. Can you make sense of the source code? Take notes of things that are unclear and questions.</description></item><item><title>Lab 10: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-10/</guid><description>As we haven't discussed Heapsort in enough detail yet, you can postpone the Heapsort walkthroughs to a later lab/time after we discussed Trees, Heaps and Heapsort in more detail. Pre-Lab P1. What is the difference between an NFA and an DFA?
P2. Which sorting algorithms have you learned about so far? Review their algorithms.
Geeks for Geeks has some helpful explanations, including nice videos. Useful for a quick reminder of the algorithms.</description></item><item><title>11 - Web Applications 2</title><link>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-11-webapps-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/info3/labs/lab-11-webapps-2/</guid><description>Prelab P1. Bring your Application from last Week.
Assignment Part 1: Amend the Page Structure Change the index and home pages (Home and StudyBuddy in the navigation) if appropriate.
Part 2: Make your Model Editable Last Week, you&amp;rsquo;ve created a Detail View for your Model. make your model editable by adding the appropriate paths, views and last not least a template with a form for editing your model.
This exercise is about the basic mechanics of forms and handling form data/requests in the app.</description></item><item><title>Lab 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab P1. Review the rules of Scrabble, if you have never played it before.
P2. What is a permutation?
P3. What would a normalization function for different permutations of words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like?
P4. How do you determine if two Strings are permutations of each other?
P5. For the bored: How can you generate all permutations of the characters in a String?</description></item><item><title>While Loop</title><link>https://bkleinen.github.io/material/info1-script/01_basics/while-loop/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1-script/01_basics/while-loop/</guid><description>While Loop Structure // before loop while(condition){ // loop body } // after loop shorter flowchart TD S[Start] C{cond?} L(LOOP BODY) E(End) S --> C C --true?--> L L --> C C -->|false?| E longer version flowchart TD A[Start] B(before loop) L(loop body) F(after loop) A --> B B --> C{condition true?} L --> C C --true--> L C -->|false| F F -->G[End] ## Examples ## Further Reading https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ws2019/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m1-web/schedule/</guid><description> Week KW Date JF Topic Area Lecturer 1 40 Wed, 2019-10-02 * no class 2 41 Wed, 2019-10-09 no class 3 42 Wed, 2019-10-16 * Game Technology and Interactive Systems David Strippgen 4 43 Wed, 2019-10-23 Game Technology and Interactive Systems David Strippgen 5 44 Wed, 2019-10-30 * Game Technology and Interactive Systems David Strippgen 6 45 Wed, 2019-11-06 Game Technology and Interactive Systems David Strippgen 7 46 Wed, 2019-11-13 * Game Technology and Interactive Systems David Strippgen 8 47 Wed, 2019-11-20 Visual Computing Klaus Jung 9 48 Wed, 2019-11-27 * Visual Computing Nico Hezel 10 49 Wed, 2019-12-04 Visual Computing Kai Barthel 11 50 Wed, 2019-12-11 * Visual Computing Nico Hezel 12 51 Wed, 2019-12-18 Visual Computing Nico Hezel 13 2 Wed, 2020-01-08 * Web Technology Barne Kleinen 14 3 Wed, 2020-01-15 2 x Web Technology (starting at 8:00) Barne Kleinen 15 4 Wed, 2020-01-22 * Web Technology Barne Kleinen 16 5 Wed, 2020-01-29 Web Technology Barne Kleinen</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ss2020/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m1-web/schedule/</guid><description>This schedule is, as always, tentative.
Week KW Date JF Topic Area Lecturer 1 14 Wed 01/04/2020 no class 2 15 Wed 08/04/2020 * Web Technology Barne Kleinen 3 16 Wed 15/04/2020 Web Technology Barne Kleinen 4 17 Wed 22/04/2020 * Web Technology Barne Kleinen 5 18 Wed 29/04/2020 Web Technology Barne Kleinen 6 19 Wed 06/05/2020 * Web Technology Barne Kleinen 7 20 Wed 13/05/2020 Visual Computing Nico Hezel 8 21 Wed 20/05/2020 * Visual Computing Nico Hezel 9 22 Wed 27/05/2020 Visual Computing Kai Barthel 10 23 Wed 03/06/2020 * Visual Computing Nico Hezel 11 24 Wed 10/06/2020 Visual Computing Nico Hezel 12 25 Wed 17/06/2020 * Game Technology and Interactive Systems David Strippgen 13 26 Wed 24/06/2020 Game Technology and Interactive Systems David Strippgen 14 27 Wed 01/07/2020 * Game Technology and Interactive Systems David Strippgen 15 28 Wed 08/07/2020 Game Technology and Interactive Systems David Strippgen 16 29 Wed 15/07/2020 * Game Technology and Interactive Systems David Strippgen</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ws2020/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/m1-web/schedule/</guid><description> Week KW Date Topic Area Lecturer 1 41 Wed 07/10/2020 Visual Computing Klaus Jung 2 42 Wed 14/10/2020 Visual Computing Nico Hezel 3 43 Wed 21/10/2020 Visual Computing Klaus Jung 4 44 Wed 28/10/2020 Visual Computing Nico Hezel 5 45 Wed 04/11/2020 Visual Computing Nico Hezel 6 46 Wed 11/11/2020 Game Technology and Interactive Systems David Strippgen 7 47 Wed 18/11/2020 Game Technology and Interactive Systems David Strippgen 8 48 Wed 25/11/2020 Game Technology and Interactive Systems David Strippgen 9 49 Wed 02/12/2020 Game Technology and Interactive Systems David Strippgen 10 50 Wed 09/12/2020 Game Technology and Interactive Systems David Strippgen 11 51 Wed 16/12/2020 - TBD - 52 Wed 23/12/2020 Vorlesungsfrei 53 Wed 30/12/2020 Vorlesungsfrei 12 1 Wed 06/01/2021 Web Technology Gefei Zhang 13 2 Wed 13/01/2021 Web Technology Gefei Zhang 14 3 Wed 20/01/2021 Web Technology Gefei Zhang 15 4 Wed 27/01/2021 Web Technology Gefei Zhang 16 5 Wed 03/02/2021 Web Technology Gefei Zhang 17 6 Wed 10/02/2021 - TBD -</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ss2021/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m1-web/schedule/</guid><description> Week KW Date Topic Area Lecturer 1 14 Wed 07/04/2021 Visual Computing Klaus Jung 2 15 Wed 14/04/2021 Visual Computing Nico Hezel 3 16 Wed 21/04/2021 Visual Computing Kai Barthel 4 17 Wed 28/04/2021 Visual Computing Nico Hezel 5 18 Wed 05/05/2021 Visual Computing Nico Hezel 6 19 Wed 12/05/2021 Web Technology Gefei Zhang 7 20 Wed 19/05/2021 Web Technology Gefei Zhang 8 21 Wed 26/05/2021 Web Technology Gefei Zhang 9 22 Wed 02/06/2021 Web Technology Gefei Zhang 10 23 Wed 09/06/2021 Web Technology Gefei Zhang 11 24 Wed 16/06/2021 Game Technology and Interactive Systems David Strippgen 12 25 Wed 23/06/2021 Game Technology and Interactive Systems David Strippgen 13 26 Wed 30/06/2021 Game Technology and Interactive Systems David Strippgen 14 27 Wed 07/07/2021 Game Technology and Interactive Systems David Strippgen 15 28 Wed 14/07/2021 Game Technology and Interactive Systems David Strippgen</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ws2021/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/m1-web/schedule/</guid><description> Week KW Date Topic Area Lecturer 1 40 Wed 06/10/2021 Visual Computing Klaus Jung 2 41 Wed 13/10/2021 Visual Computing Nico Hezel 3 42 Wed 20/10/2021 Visual Computing Kai Barthel 4 43 Wed 27/10/2021 Visual Computing Nico Hezel 5 44 Wed 03/11/2021 Visual Computing Nico Hezel 6 45 Wed 10/11/2021 Web Technology Gefei Zhang 7 46 Wed 17/11/2021 Web Technology Gefei Zhang 8 47 Wed 24/11/2021 Web Technology Gefei Zhang 9 48 Wed 01/12/2021 Web Technology Gefei Zhang 10 49 Wed 08/12/2021 Web Technology Gefei Zhang 11 50 Wed 15/12/2021 Game Technology and Interactive Systems David Strippgen 12 51 Wed 22/12/2021 Game Technology and Interactive Systems David Strippgen 52 Wed 29/12/2021 Vorlesungsfrei 13 1 Wed 05/01/2022 Game Technology and Interactive Systems David Strippgen 14 2 Wed 12/01/2022 Game Technology and Interactive Systems David Strippgen 15 3 Wed 19/01/2022 Game Technology and Interactive Systems David Strippgen 16 4 Wed 26/01/2022 17 5 Wed 02/02/2022 18 6 Wed 09/02/2022</description></item><item><title>M1 Labs Overall Schedule</title><link>https://bkleinen.github.io/classes/ss2022/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/m1-web/schedule/</guid><description>tentative schedule
Week KW Date Topic Area Lecturer 1 14 Wed 06/04/2022 Visual Computing Klaus Jung 2 15 Wed 13/04/2022 Visual Computing Nico Hezel 3 16 Wed 20/04/2022 Visual Computing Kai Barthel 4 17 Wed 27/04/2022 Visual Computing Nico Hezel 5 18 Wed 04/05/2022 Visual Computing Nico Hezel 5 18 Sat 7/05/2022 9-14 Game Technology and Interactive Systems Michele Krüger 7 24 Sat 21/05/2022 9-14 Game Technology and Interactive Systems Michele Krüger 6 19 Wed 11/05/2022 7 20 Wed 18/05/2022 8 21 Wed 25/05/2022 9 22 Wed 01/06/2022 10 23 Wed 08/06/2022 Web Technology Gefei Zhang 11 24 Wed 15/06/2022 Web Technology Gefei Zhang 12 25 Wed 22/06/2022 Web Technology Gefei Zhang 13 26 Wed 29/06/2022 Web Technology Gefei Zhang 14 27 Wed 06/07/2022 Web Technology Gefei Zhang 15 28 Wed 13/07/2022 16 29 Wed 20/07/2022 17 30 Wed 27/07/2022 09:00 bis 14:00	14tägl	07.</description></item><item><title>M1 WS 2022 Labs Schedule</title><link>https://bkleinen.github.io/classes/ws2022/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2022/m1-web/schedule/</guid><description>Kopie vom SoSe 2023!!! needs to be updated Week KW Date Topic Area Lecturer 1 x xxxx Visual Computing Klaus Jung 2 x xxxx Visual Computing Nico Hezel 3 x xxxx Visual Computing Kai Barthel 4 x xxxx Visual Computing Nico Hezel 5 x xxxx Visual Computing Nico Hezel 6 x xxxx (Mittwoch vor Himmelfahrt) 7 x xxxx Game Technology and Interactive Systems Philipp Bönsch 8 x xxxx Game Technology and Interactive Systems Philipp Bönsch 9 x xxxx Game Technology and Interactive Systems Philipp Bönsch 10 x xxxx Game Technology and Interactive Systems Philipp Bönsch 11 x xxxx Game Technology and Interactive Systems Philipp Bönsch 12 x xxxx Web Technology Gefei Zhang 13 x xxxx Web Technology Gefei Zhang 14 x xxxx Web Technology Gefei Zhang 15 x xxxx Web Technology Gefei Zhang 16 x xxxx Web Technology Gefei Zhang 17 x xxxx</description></item><item><title>M1 SS 2023 Labs Schedule</title><link>https://bkleinen.github.io/classes/ss2023/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/m1-web/schedule/</guid><description>First Draft and Subject to change!
Mi.	12:15 bis 13:45	woch	12.04.2023 bis 02.08.2023 WH Gebäude C 579
Week KW Date Topic Area Lecturer 1 15 Wed 12/04/2023 Visual Computing Klaus Jung 2 16 Wed 19/04/2023 Visual Computing Nico Hezel 3 17 Wed 26/04/2023 Visual Computing Kai Barthel 4 18 Wed 03/05/2023 Visual Computing Nico Hezel 5 19 Wed 10/05/2023 Visual Computing Nico Hezel 6 20 Wed 17/05/2023 (Mittwoch vor Himmelfahrt) 7 21 Wed 24/05/2023 Game Technology and Interactive Systems Philipp Bönsch 8 22 Wed 31/05/2023 Game Technology and Interactive Systems Philipp Bönsch 9 23 Wed 07/06/2023 Game Technology and Interactive Systems Philipp Bönsch 10 24 Wed 14/06/2023 Game Technology and Interactive Systems Philipp Bönsch 11 25 Wed 21/06/2023 Game Technology and Interactive Systems Philipp Bönsch 12 26 Wed 28/06/2023 Web Technology Gefei Zhang 13 27 Wed 05/07/2023 Web Technology Gefei Zhang 14 28 Wed 12/07/2023 Web Technology Gefei Zhang 15 29 Wed 19/07/2023 Web Technology Gefei Zhang 16 30 Wed 26/07/2023 Web Technology Gefei Zhang 17 31 Wed 02/08/2023</description></item><item><title>M1 WS 2023/24 Labs Schedule</title><link>https://bkleinen.github.io/classes/ws2023/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/m1-web/schedule/</guid><description>Stand: 14.2.2024 / M1 Schedule Overview / Edit this page via github
Mi.	12:15 bis 13:45	WH C 579
Week KW Date Topic Area Lecturer 40 Wed 04/10/2023 Hochschultag, Vorlesungsfrei 1 41 Wed 11/10/2023 Web Technology Barne Kleinen 2 42 Wed 18/10/2023 Web Technology Barne Kleinen 3 43 Wed 25/10/2023 Web Technology Barne Kleinen 4 44 Wed 01/11/2023 Web Technology Barne Kleinen 5 45 Wed 08/11/2023 Web Technology Barne Kleinen 6 46 Wed 15/11/2023 Game Technology and Interactive Systems Philipp Bönsch 7 47 Wed 22/11/2023 Game Technology and Interactive Systems Philipp Bönsch 8 48 Wed 29/11/2023 Game Technology and Interactive Systems Philipp Bönsch 9 49 Wed 06/12/2023 Game Technology and Interactive Systems Philipp Bönsch 10 50 Wed 13/12/2023 Game Technology and Interactive Systems Philipp Bönsch 11 51 Wed 20/12/2023 Visual Computing Klaus Jung 52 Wed 27/12/2023 Winterpause 12 1 Wed 03/01/2024 Visual Computing Nico Hezel 13 2 Wed 10/01/2024 Visual Computing Kai Barthel 14 3 Wed 17/01/2024 Visual Computing Nico Hezel 15 4 Wed 24/01/2024 Visual Computing Nico Hezel 16 5 Wed 31/01/2024</description></item><item><title>M1 Schedules - History</title><link>https://bkleinen.github.io/classes/m1/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/m1/</guid><description> WS 2024:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 WS 2024/2025 Labs Schedule SS 2024:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 SoSe 2024 Labs Schedule WS 2023:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 WS 2023/24 Labs Schedule SS 2023:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 SS 2023 Labs Schedule WS 2022:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 WS 2022 Labs Schedule SS 2022:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule WS 2021:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule SS 2021:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule WS 2020:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule SS 2020:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule WS 2019:&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 Labs Overall Schedule</description></item><item><title>M1 SoSe 2024 Labs Schedule</title><link>https://bkleinen.github.io/classes/ss2024/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/m1-web/schedule/</guid><description>Stand: 24.4.2024 / M1 Schedule Overview / Edit this page via github (ask BK for repo permissions first)
Time and Room: See LSF
Week KW Date Topic Area Lecturer 1 14 Wed 03/04/2024 (erster Vorlesungstag) 2 15 Wed 10/04/2024 Projektvergabe Bachelor parallel (Master gleich im Anschluss!) siehe LSF 3 16 Wed 17/04/2024 Web Technology Barne Kleinen 4 17 Wed 24/04/2024 Web Technology Barne Kleinen 18 Wed 01/05/2024 Feiertag 5 19 Wed 08/05/2024 Web Technology Barne Kleinen 6 20 Wed 15/05/2024 Web Technology Barne Kleinen 7 21 Wed 22/05/2024 Game Technology and Interactive Systems David Strippgen 8 22 Wed 29/05/2024 Game Technology and Interactive Systems Guido Pagliettini 9 23 Wed 05/06/2024 Game Technology and Interactive Systems Guido Pagliettini 10 24 Wed 12/06/2024 Game Technology and Interactive Systems Guido Pagliettini 11 25 Wed 19/06/2024 Game Technology and Interactive Systems Guido Pagliettini 12 26 Wed 26/06/2024 Visual Computing Nico Hezel 13 27 Wed 03/07/2024 Visual Computing Nico Hezel 14 28 Wed 10/07/2024 Visual Computing Kai Barthel 15 29 Wed 17/07/2024 (PZ1) Visual Computing Nico Hezel 16 30 Wed 24/07/2024 (PZ1) Visual Computing Nico Hezel 17 31 Wed 31/07/2024 (PZ1) Web Technology /TBD Barne Kleinen</description></item><item><title>M1 WS 2024/2025 Labs Schedule</title><link>https://bkleinen.github.io/classes/ws2024/m1-web/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2024/m1-web/schedule/</guid><description>Stand: 09.06.2024 - first draft!! M1 Schedule Overview / Edit this page via github (ask BK for repo permissions first)
Time and Room: See LSF
Week KW Date Topic Area Lecturer 1 40 Wed 02/10/2024 (erster Vorlesungstag) 2 41 Wed 09/10/2024 Visual Computing Klaus Jung 3 42 Wed 16/10/2024 Visual Computing Nico Hezel 4 43 Wed 23/10/2024 Visual Computing Kai Barthel 5 44 Wed 30/10/2024 Visual Computing Nico Hezel 6 45 Wed 06/11/2024 Visual Computing Nico Hezel 7 46 Wed 13/11/2024 Web Technology Barne Kleinen 8 47 Wed 20/11/2024 Web Technology Barne Kleinen 9 48 Wed 27/11/2024 Web Technology Barne Kleinen 10 49 Wed 04/12/2024 Web Technology Barne Kleinen 11 50 Wed 11/12/2024 Web Technology Barne Kleinen 12 51 Wed 18/12/2024 Game Technology and Interactive Systems David Strippgen 52 Wed 25/12/2024 &amp;mdash; &amp;mdash; 1 Wed 01/01/2025 &amp;mdash; &amp;mdash; 13 2 Wed 08/01/2025 Game Technology and Interactive Systems Guido Pagliettini 14 3 Wed 15/01/2025 Game Technology and Interactive Systems Guido Pagliettini 15 4 Wed 22/01/2025 (1.</description></item><item><title>Videos Software Engineering</title><link>https://bkleinen.github.io/bibliographies/se_videos/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/bibliographies/se_videos/</guid><description/></item><item><title>Working with HTW Machines</title><link>https://bkleinen.github.io/material/ops/hrz/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/hrz/</guid><description>Copy files from your HRZ Home Directory (aka HTW-Space) There are rather verbose manuals about various ways to copy files from your HTW-RZ home directory to somewhere else. (see Freigabe von Dateien und Ordner über den Webdrive )
The gist is: you may connect via SSH File Transfer Protocol to the server webdrive.htw-berlin.de (on default port 22)- see example below. The sftp program used in the example is included in the OpenSSH Package; most probably you&amp;rsquo;ll already have it installed on your computer, e.</description></item><item><title>Code Highlighting</title><link>https://bkleinen.github.io/material/hugo/code_highlighting/</link><pubDate>Sat, 23 Oct 2021 08:44:57 +0200</pubDate><guid>https://bkleinen.github.io/material/hugo/code_highlighting/</guid><description>Syntax Highlighting Tryout Notes:
switch off javascript that adds bootstrap styles to tables in frontmatter: NoStripedTables: true
many styles available, they can either be set in config (see markup.toml) or with the setting noClasses=false via stylesheets. see syntax-xxx.scss
Hugo Doc
Chroma Styles:
Chroma Style Gallery Longer Example from page: 199 // ... code Without anything $ ls -lart Bash 199 200 201 $ ls -lart some output 199 200 # ls -lart asdffs style = &amp;lsquo;monokai&amp;rsquo;</description></item><item><title>Debian Server</title><link>https://bkleinen.github.io/material/ops/debian-server/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/debian-server/</guid><description>This is a short Manual on how to configure a Debian virtual Server hosted at HTW FB4.
General Things Snowflakes Configuring a server manually results in a Snowflake Server.
I&amp;rsquo;ve logged the config changes as best I could in this repo, check the commits: https://github.com/htw-imi-networks/example-config
Shell &amp;amp; Path &amp;hellip; TBD
Path # echo $PATH Editor You should be able to survive in one of the available editors, e.g. VI
Set the default editor to ensure it is used eg.</description></item><item><title>Notes on Sketchnotes</title><link>https://bkleinen.github.io/material/visual/sketchnotes/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/visual/sketchnotes/</guid><description>To get started with sketchnotes, I recommend one of the sketchnote workshops held at Re:publica (about 1h):
the one at Republica 2015 is great, but the sketches on the flipcarts are sometimes hard to see. in 2016 they projected the sketchnotes, but mirror-inverted :) If you want to dig deeper:
Martin Rhode coined the term with &amp;ldquo;The Sketchnote Handbook&amp;rdquo; Kathy Schrock on Sketchnoting in Education - with lots of resources Über Sketchnotes, lehren und lernen On Visual Notetaking in General Wie Zeichnen beim Merken hilft, Graham Shaw, TEDxVienna and, last not least: Ottis kleine Malstunde</description></item><item><title>Python Resources</title><link>https://bkleinen.github.io/material/languages/python-resources/</link><pubDate>Sat, 09 Oct 2021 18:56:38 +0200</pubDate><guid>https://bkleinen.github.io/material/languages/python-resources/</guid><description>This is a collection of Python Resources. See Python Notes
The Official Python Documentation 3 Documentation The Python Standard Library — Python 3 documentation The Python Language Reference — Python 3 documentation Python Setup and Usage — Python 3 documentation The Python Tutorial — Python 3 documentation Books Robert Sedgewick, Kevin Wayne, Robert Dondero: Introduction to Programming in Python: An Interdisciplinary Approach. Pearson, 2015 The linked companion website contains excerpts and lots of examples:</description></item><item><title>Nginx</title><link>https://bkleinen.github.io/material/ops/nginx/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/nginx/</guid><description>nginX Website: https://nginx.org/ Documentation: https://nginx.org/en/docs/ Download: nginx: download Installation: https://nginx.org/en/docs/install.html Windows: http://nginx.org/en/docs/windows.html Beginner&amp;rsquo;s guide: http://nginx.org/en/docs/beginners_guide.html ءBy default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx.
Notes / MacOs installation with homebrew:
brew install nginx start nginx
nginx -s Where signal may be one of the following:
stop — fast shutdown quit — graceful shutdown reload — reloading the configuration file reopen — reopening the log files put configuration under version control:</description></item><item><title>VI</title><link>https://bkleinen.github.io/material/ops/vi/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/ops/vi/</guid><description>VI You should learn a couple of vi commands to survive, as vi is available on most *nix computers.
The absolute minimum There are two modes in vi: normal and insert. You need to know which mode you are in, as different commands are available. (Why this may be problematic has been discussed thoroughly in the UX field)
Normal Mode: vi starts there get there with ESC start command with: :w write (save) file :q quit (without save, won’t quit if there are changes) :wq quit and save :q!</description></item><item><title/><link>https://bkleinen.github.io/classes/ss2014/info3/labs/tech-stuff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/tech-stuff/</guid><description>Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded their old, dirty little subnotebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises. If doing so, you need to make sure to have a set of software available.</description></item><item><title/><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-08-chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-08-chat/</guid><description>chat&amp;mdash; title: &amp;lsquo;Info2: Exercise 08: Multi-Threaded Chat Application&amp;rsquo; author: kleinen layout: lab Pre-Lab Experiment with the Source Code Examples for Concurrency.
Do a Class Design for your Chat Application: Don&amp;rsquo;t put all of the Server in one and all of the Client in another class; design small classes with one responsibility and small methods. Especially the user interface should not be intermingled with the rest of the application.
Assignment: Multi-Threaded Chat This builds on Assignment 3, Chatterbox, where you built a little Chat Application that was only able to handle one connection from one client.</description></item><item><title/><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-1-takeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-1-takeouts/</guid><description>https://github.com/htw-imi-m1-ss2017/ruby-learning
Working on your project Write down your project vision. Write down your product backlog. Roughly prioritize it for business value. Don&amp;rsquo;t hesitate to write down as many stories as you want, you don&amp;rsquo;t have to implement them all. Pick a user story that you can implement with simple CRUD operations. Draw a scribble for the screens involved. Draw a first sketch of the data model that is suffient for this story.</description></item><item><title/><link>https://bkleinen.github.io/classes/ss2022/info1/material/videos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/material/videos/</guid><description>(1) Chapter 1, video 2: exploring fundamental concepts via BlueJ. - YouTube</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2015/wt1wa/rails-topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/rails-topics/</guid><description>Themen für Rails-Projekte Shop Terminmanagement für Gruppen, z.B. für Sportverein Forensystem CMS Todo-App Rezepte Live-Chat Twitter-Clone Bug-Reporting Wiki (Fußball-)Tipp-Spiel Trainingstagebuch WG-Verwaltung: Einkaufsliste, Finanzen, WG: Putzplan Github-Clone</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/media-programming-rails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/media-programming-rails/</guid><description>[M1 Media Programming / Web Technology]({{ site.BaseURL }}/classes/ws2016/media-programming-rails): [Schedule]({{ site.BaseURL }}/classes/ws2016/media-programming-rails/schedule/) | Moodle | Github | LSF</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2017/info3/labs/labs-notes-fuer-naechstes-mal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/labs-notes-fuer-naechstes-mal/</guid><description>in lab01 klar schreiben ob source code mit abgegeben werden soll oder nicht</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2020/info3/flipped/lecacy-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/flipped/lecacy-code/</guid><description>https://kata-log.rocks/parallel-change-kata
https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2020/info3/labs/labs-notes-fuer-naechstes-mal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/labs-notes-fuer-naechstes-mal/</guid><description>in lab01 klar schreiben ob source code mit abgegeben werden soll oder nicht</description></item><item><title/><link>https://bkleinen.github.io/classes/ws2021/networks/flipped/weekplan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/flipped/weekplan/</guid><description>Week 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 starting 07.10.21 14.10.21 21.10.21 28.10.21 04.11.21 11.11.21 18.11.21 25.11.21 02.12.21 09.12.21 16.12.21 23.12.21 30.12.21 06.01.22 13.01.22 20.01.22 27.01.22 03.02.22 10.02.22 Intro Lab Intro G1 Lab Intro G2 Chapter 1 Computer Networks and the Internet R 1 R 2 Lab G1 Lab G2 Chapter 2 Application Layer &amp;nbsp; &amp;nbsp; R1 R2 L1 L2 Chapter 3 Transport Layer &amp;nbsp; &amp;nbsp; R1 R2 L1 L2 Chapter 4 The Network Layer: Data Plane R1 R2 L1 L2 Chapter 5 The Network Layer: Control Plane &amp;nbsp; &amp;nbsp; R1 R2 L1 L2 Chapter 6 The Link Layer and LANs &amp;nbsp; R1 R2 L1 L2 R 1 read/watch Part 1 of this Chapter during this week R 2 read/watch Part 2 of this Chapter during this week Lab G1 L1 Group 1 prepares lab for this Chapter during the week Lab G2 L2 Group 2 prepares lab for this Chapter during the week &lt;!</description></item><item><title>A1 - Rails, ActiveRecord and Associations</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord-example/</guid><description>Assignment 1 Example: IMI-Calendar This is an example for Assignment 1
Create a project description and backlog Currently, there is no channel to promote events offered for a range of IMI-Students across several classes. The Web-Application should provide a simple interface for creating and promoting events. Events should be shown on a web site. In addition to that, it should be possible to subscribe to events via calendar applications or as an atom feed.</description></item><item><title>A1 - Rails, ActiveRecord and Associations</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord/</guid><description>Assignment 1 Example
Write down your project description/vision. Create a backlog.
Find 2-3 central model classes / resources for your project and create them - model, views and controller within a new rails application. Implement at least one model association and make it visible in the view.
Create a project description and backlog Provide a short summary of what your web-app should do.
Then, write down all the user stories you can think of.</description></item><item><title>About Mermaid</title><link>https://bkleinen.github.io/material/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/mermaid/</guid><description>Mermaid renders diagrams from simple markdown code. It can be used
via integrating the available js library (yarn add mermaid), online via Mermaid-Live, is available in Github markdown files (and others) and can be easily integrated into hugo1 Here are some examples taken from Mermaid Live:
stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] flowchart TD A[Christmas] --&amp;gt;|Get money| B(Go shopping) B --&amp;gt; C{Let me think} C --&amp;gt;|One| D[Laptop] C --&amp;gt;|Two| E[iPhone] C --&amp;gt;|Three| F[fa:fa-car Car] flowchart TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car] stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] Flowchart Cheatsheet flowchart TD A[Start] --> B{Is it?</description></item><item><title>About this Site</title><link>https://bkleinen.github.io/misc/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/misc/about/</guid><description>About this site Broken Links Old links to to pages that have disappeared end up here - this site contains an archive of more than 10 years.</description></item><item><title>All Example Pages 21.12.21</title><link>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/assignments/all_links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/assignments/all_links/</guid><description>Hallo WT1 Web Applications WS 2021/22 - Prof. Dr. Barne Kleinen Kurs: WT1 Web Applications - Gruppe A- WiSe2021/22 matcornic/hugo-theme-learn: Porting Grav Learn theme to Hugo htw-imi-wt1-ws2021 matcornic/hugo-theme-learn: Porting Grav Learn theme to Hugo Web Applications WS2021/2022 - Graded Assignments - Prof. Dr. Barne Kleinen networks - Prof. Dr. Barne Kleinen SEUH 2022 seuh2022 seuh2022/deploy-staging.yml at master · seuh2022/seuh2022 STAGING &amp;mdash; SEUH 2022 Actions · seuh2022/seuh2022 Prof. Dr. Barne Kleinen - Prof.</description></item><item><title>Assignment 01</title><link>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_01/</guid><description>Heuristical Analysis of Example Application, Topic Definition E-Learning: Usability Heuristics This is not part of the Assignment 01 per se, but needs to be done as a preparation.
We got a rough overview of Nielsen&amp;rsquo;s 10 Usability Heuristics in class. Your e-learning assignment is to study all of them and write a short summary (2-3 pages). This should be done individually, as preparation for the group work.
Read these articles, summarize them and upload your summary to moodle:</description></item><item><title>Assignment 01</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_01/</guid><description>Heuristical Analysis of Example Application, Topic Definition E-Learning: Usability Heuristics This is not part of the Assignment 01 per se, but needs to be done as a preparation.
We got a rough overview of Nielsen&amp;rsquo;s 10 Usability Heuristics in class. Your e-learning assignment is to study all of them and write a short summary (2-3 pages). This should be done individually, as preparation for the group work.
Read these articles, summarize them and upload your summary to moodle:</description></item><item><title>Assignment 02</title><link>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_02/</guid><description>User Research: Contextual Interviews and Personas Interviews Conduct Contextual Interviews. Each person in the team should conduct one Interview of about an hour.
Interpretation Sessions You conduct one interpretation session for each interview. The whole team participates in the interpretation session! You&amp;rsquo;ll probably need more time than just the time in the lab for the interpretation sessions.
Personas Define Personas as described in Chapter 3 in Cooper: About Face.
What to hand in Your reports, uploaded as pdf to moodle, should include</description></item><item><title>Assignment 02</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_02/</guid><description>User Research: Contextual Interviews and Personas Interviews Conduct Contextual Interviews. Each person in the team should conduct one Interview of about an hour.
Interpretation Sessions You conduct one interpretation session for each interview. The whole team participates in the interpretation session! You&amp;rsquo;ll probably need more time than just the time in the lab for the interpretation sessions.
Affinity Create an Affinity Diagram.
Personas Define Personas as described in Chapter 3 in Cooper: About Face.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-02/</guid><description>In this exercise you will create a description, develop a detailed Scenario for a Use Case, and draw a Class Diagram for your Web Application. First, write a detailed description what your application should do (in English or German, as you like) as the[one for the HorseTravelWorld in the old exercise][1]. Then, pick the most important (or interesting) use case. For HTW, that might be the Use Case of a User booking a trip, or of a user browsing for trips, or of a user contributing a review.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-02/</guid><description>In this exercise you will create a description, develop a detailed Scenario for a Use Case, and draw a Class Diagram for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.
First, have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats. The product manager has asked you to design and develop the platform for their business.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-02/</guid><description>In this exercise you will create a description, develop a detailed Scenario for a Use Case, and draw a Class Diagram for your Web Application. First, write a detailed description what your application should do (in English or German, as you like) as the[one for the HorseTravelWorld in the old exercise][1]. Then, pick the most important (or interesting) use case. For HTW, that might be the Use Case of a User booking a trip, or of a user browsing for trips, or of a user contributing a review.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-02-usecases-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-02-usecases-class/</guid><description>The Art and Science of Diagramming. Foto by Gary Barber
In this exercise you will develop a detailed Scenario for a Use Case, and draw a Class Diagram for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.
First, have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-02-usecases-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-02-usecases-class/</guid><description>The Art and Science of Diagramming. Foto by Gary Barber
In this exercise you will develop a detailed Scenario for a Use Case, and draw a Class Diagram for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.
First, have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-02-usecases-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-02-usecases-class/</guid><description>The Art and Science of Diagramming. Foto by Gary Barber
In this exercise you will develop a detailed Scenario for a Use Case, and draw a Class Diagram for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.
First, have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats.</description></item><item><title>Assignment 02 - Use Cases and Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-02-usecases-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-02-usecases-class/</guid><description>The Art and Science of Diagramming. Foto by Gary Barber
Pre-Lab 1. Know what the lab is about In this exercise you will develop a detailed Scenario for a Use Case, and draw a Class Diagram for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide. Have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats.</description></item><item><title>Assignment 03</title><link>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_03/</guid><description>Design and Evaluation I: Visioning, Product Concepts and Storyboards Visioning Start with creating (or completing) the three input lists:
hot ideas issues technology Create 4-7 Visions Start the visions from hot ideas. Assign the roles
Pen Poker Team And alternate them between the visions such that each of you gets to practice each role. If you don&amp;rsquo;t have a Flipchart available, use a A3-Paper in the middle of the table.</description></item><item><title>Assignment 03</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_03/</guid><description>Design and Evaluation I: Visioning, Product Concepts and Storyboards Visioning Start with creating (or completing) the three input lists:
hot ideas issues technology Create 4-7 Visions Start the visions from hot ideas. Assign the roles
Pen Poker Team And alternate them between the visions such that each of you gets to practice each role. If you don&amp;rsquo;t have a Flipchart available, use a A3-Paper in the middle of the table.</description></item><item><title>Assignment 03 - Gilded Rose Patterns and Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-03/</guid><description>Reading Assignment for Friday, May 3rd 2013: For this week&amp;rsquo;s lecture and especially the exercise, you will need some knowledge about sequence diagrams, and the Patterns Strategy, Factory, Factory method, Abstract Factory and Template Method.
Here are some good sources:
Sequence Diagrams: Sample Chapter from Fowler&amp;rsquo;s UML distilled: https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2 - Please read the full chapter. Strategy Pattern: - make sure you understand the pattern. Template Method: we talked about that in class (Sandy Metz Ruby example!</description></item><item><title>Assignment 03 - Gilded Rose Patterns and Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-03a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-03a/</guid><description>Reading Assignment for Friday, May 3rd 2013: For this week&amp;rsquo;s lecture and especially the exercise, you will need some knowledge about sequence diagrams, and the Patterns Strategy, Factory, Factory method, Abstract Factory and Template Method.
Here are some good sources:
Sequence Diagrams: Sample Chapter from Fowler&amp;rsquo;s UML distilled: https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2 - Please read the full chapter. Strategy Pattern: - make sure you understand the pattern. Template Method: we talked about that in class (Sandy Metz Ruby example!</description></item><item><title>Assignment 03 - Gilded Rose Patterns and Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-03/</guid><description>Reading Assignment for Friday, May 3rd 2013: For this week&amp;rsquo;s lecture and especially the exercise, you will need some knowledge about sequence diagrams, and the Patterns Strategy, Factory, Factory method, Abstract Factory and Template Method.
Here are some good sources:
Sequence Diagrams: Sample Chapter from Fowler&amp;rsquo;s UML distilled: https://www.informit.com/articles/article.aspx?p=169507&amp;amp;seqNum=2 - Please read the full chapter. Strategy Pattern: - make sure you understand the pattern. Template Method: we talked about that in class (Sandy Metz Ruby example!</description></item><item><title>Assignment 03 - GIT and State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-03/</guid><description>Foto by Jeff Kubina
Pre-Lab Git &amp;amp; GitHub Git is the state-of-the-art Source Code Management Tool. Install the command line client for your platform, and maybe also a GUI Client, which can all be found here. Sign up on GitHub if you haven&amp;rsquo;t already done so. See also Setting up Git from GitHub for a comprehensive documentation. For other projects, you might want to use the HTW Projekteserver which offers you private repositorys, or any other service offering central repositories.</description></item><item><title>Assignment 03 - Sequence Diagrams and State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-03-sequence-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-03-sequence-state/</guid><description>Part 1: Sequence Diagrams Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Assignment 03 - Sequence Diagrams and State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-03-sequence-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-03-sequence-state/</guid><description>Part 1: Sequence Diagrams Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Assignment 03 - Sequence Diagrams and State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-03-sequence-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-03-sequence-state/</guid><description>Part 1: Sequence Diagrams Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Assignment 03 - Sequence Diagrams and State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-03-sequence-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-03-sequence-state/</guid><description>Pelican launch sequence. Foto by Don McCullough Pre-Lab Read Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online. For an introduction to state machine diagrams, see https://www.agilemodeling.com/artifacts/stateMachineDiagram.htm. Assignment Part 1: Sequence Diagrams As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case: The Clock Display / Use case: timeTick() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Assignment 04</title><link>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/assignments/assignment_04/</guid><description>Design and Evaluation II: Paper Prototypes Paper Prototypes Create two Paper Prototypes per Team based on two of your Storyboards.
Choose the Stories / Storyboards carefully, and document the reasons for your decision in your report.
You can both work together on both storyboards or have two teams of two working on one Paper Prototype each.
Paper Prototype Evaluation Now, you have to get together with your expert team again, preferably during the lab sessions:</description></item><item><title>Assignment 04</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/assignments/assignment_04/</guid><description>Design and Evaluation II: Paper Prototypes Paper Prototypes Create two Paper Prototypes per Team based on two of your Storyboards.
Choose the Stories / Storyboards carefully, and document the reasons for your decision in your report.
You can both work together on both storyboards or have two teams of two working on one Paper Prototype each.
Paper Prototype Evaluation Now, you have to get together with your expert team again, preferably during the lab sessions:</description></item><item><title>Assignment 04: Testing</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-04-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-04-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Download the source code snippets for this assignment. Source Code for this Assignment: https://github.com/htw-imi-info3-archive/lab-04-testing
##A. Black and White Box Tests
In addition to what we&amp;rsquo;ve covered in class, please have a look at black-box and white-box testing.
Getting started: Give the equivalence classes for testing a method that determines the absolute value of an integer using the black-box methodology. Don&amp;rsquo;t peek at the code yet!</description></item><item><title>Assignment 04: Testing</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-04-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-04-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Download the source code snippets for this assignment. Source Code for this Assignment: https://github.com/htw-imi-info3-archive/lab-04-testing
##A. Black and White Box Tests
In addition to what we&amp;rsquo;ve covered in class, please have a look at black-box and white-box testing.
Getting started: Give the equivalence classes for testing a method that determines the absolute value of an integer using the black-box methodology. Don&amp;rsquo;t peek at the code yet!</description></item><item><title>Assignment 04: Testing</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-04-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-04-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Download the source code snippets for this assignment. Source Code for this Assignment: https://github.com/htw-imi-info3-archive/lab-04-testing
A. Black and White Box Tests In addition to what we&amp;rsquo;ve covered in class, please have a look at black-box and white-box testing.
Getting started: Give the equivalence classes for testing a method that determines the absolute value of an integer using the black-box methodology. Don&amp;rsquo;t peek at the code yet!</description></item><item><title>Assignment 04: Testing</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-04-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-04-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Assignment Preparation Download the source code snippets for this assignment: lab04-testing Prepare your project like we did it in the first lab (Part 1: Set up the git repository and project). Note that this is now lab04, so make sure you adapt your process to that! Eg. put the project into the correct place on the gitlab server. In addition to what you&amp;rsquo;ve covered in class, please have a look at black-box and white-box testing.</description></item><item><title>Assignment 05 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-05-legacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-05-legacy/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Source Code: There are three versions. Choose one. Have brief look at the readme and the GuildedRose class.
Ruby Version: https://github.com/htw-imi-info3-archive/lab-05-ruby-gilded-rose-kata Java/Eclipse Version with Test Stub: https://github.com/htw-imi-info3-archive/lab-05-JavaEclipseGildedRose Original Version using Maven: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose Write Characterization Tests To be able to add the new functionality as requested you should write Characterization tests first. You will not yet refactor or add the required new functionality!</description></item><item><title>Assignment 05 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-05-legacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-05-legacy/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Source Code: There are three versions. Choose one. Have brief look at the readme and the GuildedRose class.
Ruby Version: https://github.com/htw-imi-info3-archive/lab-05-ruby-gilded-rose-kata Java/Eclipse Version with Test Stub: https://github.com/htw-imi-info3-archive/lab-05-JavaEclipseGildedRose Original Version using Maven: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose Write Characterization Tests To be able to add the new functionality as requested you should write Characterization tests first. You will not yet refactor or add the required new functionality!</description></item><item><title>Assignment 05 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-05-legacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-05-legacy/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Source Code: There are three versions. Choose one. Have brief look at the readme and the GuildedRose class.
Ruby Version: https://github.com/htw-imi-info3-archive/lab-05-ruby-gilded-rose-kata Java/Eclipse Version with Test Stub: https://github.com/htw-imi-info3-archive/lab-05-JavaEclipseGildedRose Original Version using Maven: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose Write Characterization Tests To be able to add the new functionality as requested you should write Characterization tests first. You will not yet refactor or add the required new functionality!</description></item><item><title>Assignment 05 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-05-legacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-05-legacy/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Preparation Clone the Gilded Rose Repository. Set up the project like we did it in the first lab (Part 1: Set up the git repository and project). Of course this is now lab05, put your project into the correct place on the gitlab server! Hint: If you like you can use WebStorm and it&amp;rsquo;s automatic refactoring features. You can get an educational license.</description></item><item><title>Assignment 05: Functionality and Libraries</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-05/</guid><description>In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.</description></item><item><title>Assignment 05: Functionality and Libraries</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-05/</guid><description>asdf In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.</description></item><item><title>Assignment 06 - Rails - First Steps</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-06-rails-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-06-rails-1/</guid><description>Foto by Pedro J. Ferreira
Prelab Read through two Rails Guides: https://guides.rubyonrails.org/active_record_basics.html https://guides.rubyonrails.org/association_basics.html Assignment Part 0: Show the Customer with it&amp;rsquo;s Name On the orders#show page, show the associated customer with its name rather than the ID - Test driven! You can use the :order1 factory for this, see Part 1 for more info on FactoryGirl test data.
Part 1: Creating Testdata You should never be attached to manually created test data living in your development or test database.</description></item><item><title>Assignment 06 - Rails - First Steps</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-06-rails-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-06-rails-1/</guid><description>Foto by Pedro J. Ferreira
Prelab Read through two Rails Guides: https://guides.rubyonrails.org/active_record_basics.html https://guides.rubyonrails.org/association_basics.html Assignment Part 0: Show the Customer with it&amp;rsquo;s Name On the orders#show page, show the associated customer with its name rather than the ID - Test driven! You can use the :order1 factory for this, see Part 1 for more info on FactoryGirl test data.
Part 1: Creating Testdata You should never be attached to manually created test data living in your development or test database.</description></item><item><title>Assignment 06 - Rails - First Steps</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-06-rails-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-06-rails-1/</guid><description>Foto by Pedro J. Ferreira
Revised - without significant changes to the assignment itself except taking out Factory Girl/Bot - on 1/1/18. If you&amp;rsquo;ve started working on this assignment before, you can view the changes in the commit &amp;ldquo;info3 - revised lab 06&amp;rdquo; on bkleinen.github.io
Prelab The Base Repo (referred to as main repository below) for this Lab is the HTW Application we&amp;rsquo;ve developed in class, see https://github.com/htw-imi-info3-archive/rails-dash-ws2017 - first fork it on github (only one person in your team needs to do this) and then clone it to your local workspace (computer).</description></item><item><title>Assignment 06 - Rails - First Steps</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-06-rails-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-06-rails-1/</guid><description>Foto by Pedro J. Ferreira
Revised - without significant changes to the assignment itself except taking out Factory Girl/Bot - on 1/1/18. If you&amp;rsquo;ve started working on this assignment before, you can view the changes in the commit &amp;ldquo;info3 - revised lab 06&amp;rdquo; on bkleinen.github.io
Prelab The Base Repo (referred to as main repository below) for this Lab is the HTW Application we&amp;rsquo;ve developed in class, see https://github.com/htw-imi-info3-archive/rails-dash-ws2017 - first fork it on github (only one person in your team needs to do this) and then clone it to your local workspace (computer).</description></item><item><title>Assignment 06 - Web Apps with Node and Express I</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-06-express-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-06-express-1/</guid><description>Overview In the course of this and the following Lab Assignment, you will implement a rudimentary web application based on node and express.js.
The goal of the exercises is gain first experiences with fundamental steps of web application development, rather than completing the app!
In the end, your app is expected to have the following features:
Lab 06 - Express 1 contain at least 1 view template displaying data that is hard-coded in the controller process parameters sent from an HTML form in the controller MVC: View and Controller should be clearly separated, e.</description></item><item><title>Assignment 07 - Internationalization, n:m Associations and a Bit of Functionality</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-07-rails-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-07-rails-2/</guid><description>Assignment Sort or Search Pumpkins On the Pumpkin index site, add either a sort function for at least one pumpkin attribute or a search functionality. You will need to add a link or form to the index site, and perform the ordering/searching from the controller altering the @pumpkins variable. [https://guides.rubyonrails.org/active_record_querying.html] (https://guides.rubyonrails.org/active_record_querying.html) contains all necessary information on how to query Pumpkins.
*** remember to make use of all the great pumpkins all of you added with their pull request you can use to populate your database!</description></item><item><title>Assignment 07 - Internationalization, n:m Associations and a Bit of Functionality</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-07-rails-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-07-rails-2/</guid><description>Assignment Sort or Search Pumpkins On the Pumpkin index site, add either a sort function for at least one pumpkin attribute or a search functionality. You will need to add a link or form to the index site, and perform the ordering/searching from the controller altering the @pumpkins variable. [https://guides.rubyonrails.org/active_record_querying.html] (https://guides.rubyonrails.org/active_record_querying.html) contains all necessary information on how to query Pumpkins.
*** remember to make use of all the great pumpkins all of you added with their pull request you can use to populate your database!</description></item><item><title>Assignment 07 - Search &amp; Sort, Internationalization</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-07-rails-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-07-rails-2/</guid><description>Assignment Part 1: Add a Sort or Search Functionality Each Group should add a sort or search functionality to one of the resources pages of the HTW app. We will coordinate the tasks using issues on the repository, see https://github.com/htw-imi-info3-archive/rails-dash-ws2017/issues, and also coordinate within the lab.
See the Guide on the Active Record Query Interface - it contains all necessary information on how to query and sort Pumpkins and other stuff.</description></item><item><title>Assignment 07 - Search &amp; Sort, Internationalization</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-07-rails-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-07-rails-2/</guid><description>Assignment Part 1: Add a Sort or Search Functionality Each Group should add a sort or search functionality to one of the resources pages of the HTW app. We will coordinate the tasks using issues on the repository, see https://github.com/htw-imi-info3-archive/rails-dash-ws2017/issues, and also coordinate within the lab.
See the Guide on the Active Record Query Interface - it contains all necessary information on how to query and sort Pumpkins and other stuff.</description></item><item><title>Assignment 07 - Web Apps with Node and Express II</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-07-express-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-07-express-2/</guid><description>Example apps: App 03 - Persistence and App 04 - with testing
(This builds on app02)
From Lab06 to Lab07 You will continue working on your project from Lab06. However, it should be in a separate code base. So you should create a new empty repository on GitLab in the folder for Lab07 and add this new repo as the new origin of your local repository. For Lab07, only push to the project in the Lab07 folder!</description></item><item><title>Assignment 07 - Web Apps with Node and Express II</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-08-express-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-08-express-3/</guid><description>From Lab07 to Lab08 You will continue working on your project from Lab07. However, it should be in a separate code base. So you should create a new empty repository on GitLab in the folder for Lab08 and add this new repo as the new origin of your local repository. For Lab08, only push to the project in the Lab08 folder!
Assignment 1: Clean Up a) Check the requirements Check the following questions and if the answer is no, fix it.</description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-01/</guid><description>A. Test Driven Development Create a new Java Project in Eclipse (or your preferred IDE).
Source Code for this Assignment: (removed)
Create a Class Node as in Node.java _as Head of a linked list (added 5.4.13) _and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.</description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/assignment-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/assignment-01/</guid><description>A. Test Driven Development Create a new Java Project in Eclipse (or your preferred IDE).
Source Code for this Assignment: (removed)
Create a Class Node as in Node.java _as Head of a linked list (added 5.4.13) _and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.</description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-01/</guid><description>A. Test Driven Development Create a new Java Project in Eclipse (or your preferred IDE).
Source Code for this Assignment: (removed)
Create a Class Node as in Node.java as Head of a linked list and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.</description></item><item><title>Assignment 1: Testing</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-01/</guid><description>A. Test Driven Development Create a new Java Project in Eclipse (or your preferred IDE).
Source Code for this Assignment: (removed)
Create a Class Node as in Node.java _as Head of a linked list (added 5.4.13) _and develop a method for deleting Nodes in a List test driven, that is, develop the Unit Tests first, as we did in class. Choose one of the two methods we discussed in class to help the assertions - creating a test helper method as in assert.</description></item><item><title>Assignment 2 - Authentication and Code Style</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a2-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a2-authentication/</guid><description>The second assignment is to implement an authentication for your application. Furthermore, you learn how to enforce code styling for your project.
Integrate Bootstrap Integrate Bootstrap into your Application. Use Bootstrap 4 (currently in beta), and comes with sass integration and it&amp;rsquo;s own ruby gem:
You don&amp;rsquo;t need to change any styling yet.
Documentation in the Example Project See the IMI-Calendar-App Commit for Bootstrap integration. Testing with RSpec Integrate the Rspec Testing Framework and develop at least one happy path feature test for each finished user story you&amp;rsquo;ve completed so far.</description></item><item><title>Assignment 3 - Search Functionality, Postgres and Docker (and some more Bootstrap)</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a3-search-database-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a3-search-database-docker/</guid><description>Implement Search Functionality The main Assignment for this sprint is to implement a search functionality for your app. Thus, find (or create) userstorys that you will need a search functionality for.
For the search functionality itself, you&amp;rsquo;ll find a tutorial in Chapter 4 of the Book, which focusses on leveraging Postgres indices. Alternatively, you can decide to learn more about the ActiveRecord Query Language. Choose one, read the linked material. Even if you decide to use ActiveRecord Query Language you should read the first part of Chapter 4 where you find info about building the search itself into rails and generating test data.</description></item><item><title>Assignment 4 - Java Script and Deployment</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a4-ci-cd-javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a4-ci-cd-javascript/</guid><description>Continuous Integration and Deployment Setup Travis CI to build your project automatically after each push. See https://docs.travis-ci.com/user/docker/.
Setup an Automatated Deployment after a successful build. See https://docs.travis-ci.com/user/deployment
I&amp;rsquo;ve created two examples:
direct deployment of rails on heroku in https://github.com/htw-imi-rails-examples/notes-deploy deployment on heroku with docker in https://github.com/htw-imi-rails-examples/notes-deploy-docker AJAX Find a place - find or create a story - where a little bit of JavaScript is useful in your Application. You find a couple of examples in the Working with JavaScript in Rails Guide which is also the required reading for next week.</description></item><item><title>Assignment 4: First Rails Steps</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/assignment-04/</guid><description>In this exercise, you will create a rails application for the first one or two features / user stories of your application. Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one or two model classes. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.</description></item><item><title>Assignment 4: First Rails Steps</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-004/</guid><description>In this exercise, you will create a rails application for the first one or two features / user stories of your application. Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one or two model classes. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.</description></item><item><title>Assignment 4: First Rails Steps</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/assignment-04/</guid><description>In this exercise, you will create a rails application for the first one or two features / user stories of your application. Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one or two model classes. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.</description></item><item><title>Assignment 5 - External APIs and Rails Security</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a5-api-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a5-api-security/</guid><description>External APIs Research possible external APIs that might be useful for your project (e.g. a weather api for a hiking site enabling you to show the current weather).
Find or define Stories in your Backlog to use the API. It doesn&amp;rsquo;t have to be much, the focus is more on using the API than building a lot of new features into your app.
Write an Adapter and Tests for the API as discussed in class.</description></item><item><title>Assignment 6 - Choose your own topic</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a6-choose-your-own/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a6-choose-your-own/</guid><description>Choose your own topic Choose your one, two (or more) stories from your backlog that you like to do to finish your project for this term.
Add code coverage Add the Gem simplecov to your Gemfile and include it in your tests according to the gem documentation. Aim for an about 80% test coverage.
Don&amp;rsquo;t forget the tests Don&amp;rsquo;t forget to write tests for your new features and to groom your test suite along the way.</description></item><item><title>Assignments for Web Technology</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/assignments/</guid><description>Week 1 Getting started Working on your project Write down your project vision. Write down your product backlog. Roughly prioritize it for business value. Don&amp;rsquo;t hesitate to write down as many stories as you want, you don&amp;rsquo;t have to implement them all. Pick a user story that you can implement with simple CRUD operations. Draw a scribble for the screens involved. Draw a first sketch of the data model that is suffient for this story.</description></item><item><title>B. Kleinen | Bachelor-/Masterarbeiten FAQ</title><link>https://bkleinen.github.io/studies/thesis/kolloquium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/thesis/kolloquium/</guid><description>Kolloquium Besonderheiten in der Pandemie Die Kolloquien finden über Zoom statt. Einladungen erfolgen nur über email. Die Termine koordiniere ich momentan im Wiki; manche der Kolloquien sind offen für Gäste.
Wie wird der Termin für das Kolloquium festgelegt? I.d.R. koordiniert das ihr/e Erstbetreuer/in und schickt den gefundenen Termin, an dem der oder die Kandidatin und alle Betreuer:innen Zeit haben, an die FB-Verwaltung. Dort wird der Notenzettel in der Prüfungsverwaltung angefordert (d.</description></item><item><title>B9 Networks SoSe 2022 - Resources</title><link>https://bkleinen.github.io/classes/ss2022/networks/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/networks/resources/</guid><description>Hinweis: die LV wird im Sommersemester 2022 von einem Lehrbeauftragten, Parham Haririan, übernommen. Die Informationen hier sind derzeit nicht aktuell. Textbook Kurose, James F; Ross, Keith W.: Computer Networking. A Top-Down Approach, 8th ed., Pearson Global Editions, Harlow UK, 2021. ISBN: 978-1-292-40546-9
The class is based on Jim Kurose&amp;rsquo;s Textbook &amp;ldquo;Computer Networking. A Top-Down Approach&amp;rdquo;. The textbook has an accompanying website with a lot of resources, especially lecture videos.</description></item><item><title>B9 Networks SoSe 2022 - Schedule</title><link>https://bkleinen.github.io/classes/ss2022/networks/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/networks/schedule/</guid><description>Hinweis: die LV wird im Sommersemester 2022 von einem Lehrbeauftragten, Parham Haririan, übernommen. Die Informationen hier sind derzeit nicht aktuell. This schedule is, as always, tentative and will be updated during the term.
W CW Date Read before class: Lab 1 14 Fri 08/04/2022 Class Intro / Server Setup and the Shell Lab 00 - Intro 15 Fri 15/04/2022 Ostern 2 16 Fri 22/04/2022 Computer Networks and the Internet: 1.</description></item><item><title>B9 Networks WS 2021/22 - Resources</title><link>https://bkleinen.github.io/classes/ws2021/networks/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/resources/</guid><description>Material on this Site Title Tag Tools Working with HTW Machines ops, htw bash, hrz Debian Server web, ops Nginx web nginx VI vi vi Textbook If you can afford it, consider aquiring your own copy of the text book:
Kurose, James F; Ross, Keith W.: Computer Networking. A Top-Down Approach, 8th ed., Pearson Global Editions, Harlow UK, 2021. ISBN: 978-1-292-40546-9
AvailablePearson, Lehmanns, Amazon.
Access to the ebook is be available through the Library from within the HTW network (use the VPN from outside).</description></item><item><title>B9 Networks WS 2021/22 - Schedule</title><link>https://bkleinen.github.io/classes/ws2021/networks/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/schedule/</guid><description>This schedule is, as always, tentative and will be updated during the term.
W KW Datum Lecture Lab 1 40 Wed 06/10/2021 none Thu 07/10/2021 Class Intro 2 41 Wed 13/10/2021 Lab 00 - Intro Thu 14/10/2021 Computer Networks and the Internet: 1.1-1.4 3 42 Wed 20/10/2021 Lab 00 - Intro Thu 21/10/2021 Computer Networks and the Internet: 1.5-1.7 4 43 Wed 27/10/2021 1 Thu 28/10/2021 Server Setup and the Shell 5 44 Wed 03/11/2021 1 Thu 04/11/2021 Application Layer: 2.</description></item><item><title>Bachelorseminar Schedule</title><link>https://bkleinen.github.io/classes/ss2020/bachelorseminar/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/bachelorseminar/schedule/</guid><description> Week KW Date vorher lesen Übungen (vorher machen, ggfs. in Moodle hochladen) 7 20 Wed 13/05/2020 bis Kapitel 3/1.Teil Cluster, Analogierad, Strukturbaum 8 21 Wed 20/05/2020 Kapitel 3/2.Teil Themenfächer, 7 W-Fragen 9 22 Wed 27/05/2020 Kapitel 4 Fragen an die Literatur, Literaturliste 10 23 Wed 03/06/2020 Kapitel 5 11 24 Wed 10/06/2020 &amp;mdash;&amp;ndash; 12 25 Wed 17/06/2020 13 26 Wed 24/06/2020 Kapitel 5 Brennpunkt (Kap. 5), Rohfassung der Gliederung 14 27 Wed 01/07/2020 Tools und Arbeitsmethoden - Markt - alle stellen Ihre &amp;ldquo;Picks&amp;rdquo; vor 15 28 Wed 08/07/2020 Kapitel 2 und 6 gemeinsames Korrekturlesen und Planen von Korrektur-lese-Pool</description></item><item><title>Bachelorseminar Schedule</title><link>https://bkleinen.github.io/classes/ws2020/bachelorseminar/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/bachelorseminar/schedule/</guid><description>Week KW Date Zeit 1 43 Tue 20/10/2020 15:45-17:15 Intro 2 44 Tue 27/10/2020 15:45-17:15 Vorstellung von Arbeiten 3 46 Tue 03/11/2020 (eine Woche vorgezogen!) 15:45-17:15 Vorstellung von Arbeiten 4 48 Tue 24/11/2020 15:45-17:15 Vorstellung von Arbeiten 5 50 Tue 08/12/2020 15:45-17:15 Vorstellung von Arbeiten 6 1 Tue 05/01/2021 15:45-17:15 Vorstellung von Arbeiten 7 3 Tue 19/01/2021 15:45-17:15 Vorstellung von Arbeiten 8 5 Tue 02/02/2021 15:45-17:15 Vorstellung von Arbeiten Termine werden über Moodle vergeben.</description></item><item><title>Bafög-Infos</title><link>https://bkleinen.github.io/studies/bafoeg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/bafoeg/</guid><description>tl;dr: Die Rolle des BAFöG-Beauftragten ist es, den Mitwirkungs und Auskunftsflichten (BAFöG § 47 Auskunftspflichten und §48 Mitwirkung von Ausbildungsstätten) nachzukommen, d.h. i.d.R. diverse Nachweise zu bestätigen, insbesondere:
als Leistungsnachweis nach dem 4. Semester können Sie einfach Ihren LSF-Nachweis an das Studierendenwerk schicken. (Bei Verzögerungen aber Vorsicht, s.u.)
für die für das Auslandspraktikum notwendige Bescheinigung kommen Sie bitte nach der Genehmigung des Praktikums mit dem vorbereiteten Formblatt 6 in meine Sprechstunde.</description></item><item><title>Barne Kleinen | Betreuung von Abschlußarbeiten</title><link>https://bkleinen.github.io/studies/thesis/betreuung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/thesis/betreuung/</guid><description>Hinweise zur Betreuung von Abschlußarbeiten Die Betreuung findet in Form individueller Gespräche im Rahmen meiner Sprechstunde oder ggfs. individuell vereinbarten Terminen statt. Meine Sprechstunde organisiere ich über diese Wiki-Seite.
Die meisten Fragen, die sich im Rahmen Ihrer Arbeit ergeben können Sie
entweder selbst beantworten durch das Studium von Anleitungen zum Abschlussarbeit schreiben oder sie sind zu komplex, um sinnvoll per email beantwortet werden zu können - die Antwort ist meistens &amp;ldquo;das kommt drauf an&amp;rdquo; - das gilt insbesondere für durchaus mal gerne per mail gestellte Fragen wie: muß ich auch selbst was programmieren?</description></item><item><title>Barne Kleinen | How to Abschlussarbeit</title><link>https://bkleinen.github.io/studies/thesis/anleitung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/thesis/anleitung/</guid><description>Literatur über das Verfassen von Abschlußarbeiten Da sie im Studium wenig Erfahrungen mit dem Verfassen von wissenschaftlichen Arbeiten sammeln konnten, empfehle ich Ihnen das hinzuziehen einer Anleitung. Derer gibt es viele, z.B. im UTB-Verlag.
Juliane Homann, Stephan Seeck, Katharina Simbeck, Debora Weber-Wulff haben einen Moodle-Kurs &amp;ldquo;Infoportal wissenschaftliches Schreiben&amp;rdquo; angelegt: https://moodle.htw-berlin.de/course/view.php?id=17639 Über die dort enthaltenen Informationen hinaus gibt es unter &amp;ldquo;10. Onlinekurse und Ebooks&amp;rdquo; einige Hinweise auf Bücher aus dem UTB-Verlag. Bei mir haben die Links nicht funktioniert: erst im HTW-VPN anmelden (Full, nicht split&amp;hellip;), dann über die UTB-Seite suchen: https://elibrary.</description></item><item><title>BlueJ Trick - Save your Object Bench using Test Fixtures</title><link>https://bkleinen.github.io/material/info1/save_object_bench/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/save_object_bench/</guid><description>You can save and re-create your Object Bench with a trick that uses the Unit Test Support in BlueJ, especially “Object Bench to Test Fixture” “Test Fixture to Object Bench”:
1. Save the state of your object bench Let’s say you have created a lot of objects manually and want to reuse them. To save the state of your Object Bench, first create a Test Class for an arbitrary class: Now, call “Object Bench to Test Fixture” from the Test Class’ context menu.</description></item><item><title>Datenschutzerklärung</title><link>https://bkleinen.github.io/contact/datenschutzerklaerung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/contact/datenschutzerklaerung/</guid><description>Angepasst auf Basis der Datenschutzerklärung der HTW-Berlin
Datenschutzerklärung Vielen Dank für Ihr Interesse an unserer Hochschule. Der Schutz Ihrer Daten ist uns ein wichtiges Anliegen. Deshalb verarbeiten wir die Daten, die Sie beim Besuch auf unseren Webseiten hinterlassen, nur nach den Vorgaben der relevanten datenschutzrechtlichen Bestimmungen, insbesondere der Datenschutzgrundverordnung und des Bundesdatenschutzgesetzes. An dieser Stelle möchten wir Sie über Art, Umfang und Zweck der Verarbeitung Ihrer personenbezogenen Daten informieren. Verantwortlicher und Datenschutzbeauftragter</description></item><item><title>e-learning for 2/1/2024</title><link>https://bkleinen.github.io/classes/ws2023/info1/schedule/e-learning-newyear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/schedule/e-learning-newyear/</guid><description>Read up on Inheritance in the book - Chapter 10 mainly, we also already covered parts of Chapter 11&amp;amp;12. You may also or instead watch the videos for the respective chapters linked from the resources page. Practice and test your understanding of inheritance using the InheritancePlayground project. Work on Lab10. It is sufficient if you use the version in your-zuul-command-hierarchy Read the source code of Command.java and it&amp;rsquo;s subclasses (Go, Help, Quit&amp;hellip;) to see how the command hierarchy cleans up the code by moving all commands to their respective small subclass of Command.</description></item><item><title>e-learning Preparaion</title><link>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/sprint/preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/sprint/preparation/</guid><description>WT1 E-learning für 19. Oct 2021
Sie können diese Aufgaben alleine oder mit anderen gemeinsam bearbeiten. Wenn Sie die Aufgaben gemeinsam bearbeiten, beginnen Sie immer erst mit einer Phase, wo jede:r die Fragen für sich individuell beantwortet, dann tauschen Sie sich in der zweiten.Phase untereinander darüber aus, und notieren die Antworten anschliessend in der dritten Phase wieder für sich persönlich. Ich würde für jede der Phasen dann mit einer Timebox von 10 min beginnen, und dann ggfs.</description></item><item><title>Example Project for Web Technology - Week 1</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-1/</guid><description>Week 1 - First Steps in Rails Example Project on GitHub 1. Write down your project vision. Example Project: Habits - An application that supports their user building habits. They can enter habits they want to build, together with a frequency how often they want to do this new habit. The App then supports user in keeping track of their performance as well as reminding them whan it&amp;rsquo;s time for the habit.</description></item><item><title>Example Project for Web Technology - Week 2</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-2/</guid><description>Week 2 - Active Record Associations, Migrations and Views Example Project on GitHub 1. Pick a story that requires you to introduce at least one new Resource to your Project. I pick:
When the user clicks on a habit, it can be edited. A log of dates when the habit was performed is shown. This requires the Log to be stored in a separte entity, one LogEntry for each time the Habit has been completed, connected with a belongs_to has_many (1:n) association.</description></item><item><title>Example Project for Web Technology - Week 2</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-2/</guid><description>Week 2 - Active Record Associations, Migrations and Views Example Project on GitHub 1. Pick a story that requires you to introduce at least one new Resource to your Project. I pick:
When the user clicks on a habit, it can be edited. A log of dates when the habit was performed is shown. This requires the Log to be stored in a separte entity, one LogEntry for each time the Habit has been completed, connected with a belongs_to has_many (1:n) association.</description></item><item><title>Example Project for Web Technology - Week 3</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-3/</guid><description>Week 3 Example Project on GitHub Testing, Setting up a Deployment Workflow, and some Ruby 1. Create at least one happy-path feature test for each person on your team. Use Capybara. I demonstrate this on the story
A user kann log an habit as completed on that day by simply clicking on a button in the habit list. Before I start working on that, I should clean up the generated tests and create some test data for the Habits.</description></item><item><title>Example Project for Web Technology - Week 3</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-3/</guid><description>Week 3 Example Project on GitHub Testing, Setting up a Deployment Workflow, and some Ruby 1. Create at least one happy-path feature test for each person on your team. Use Capybara. I demonstrate this on the story
A user kann log an habit as completed on that day by simply clicking on a button in the habit list. Before I start working on that, I should clean up the generated tests and create some test data for the Habits.</description></item><item><title>Example Project for Web Technology - Week 4</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-4/</guid><description> nothing here yet</description></item><item><title>Example Project for Web Technology - Week 4</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-4/</guid><description>Week 4 For this week, we&amp;rsquo;ll use another example project. I&amp;rsquo;ll introduce it in class, but have a look at the readme to get an Idea what it is about: Example Project for Week 4 on GitHub
Authentication 1. Add a user model and set it up with encrypted password If you don&amp;rsquo;t already have a user model, create one:
rails g scaffold User name:string password:digest if you already have a user model (it may have another name), make sure it has a field for password.</description></item><item><title>Example Project for Web Technology - Week 4</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-4/</guid><description>Week 4 For this week, we&amp;rsquo;ll use another example project. I&amp;rsquo;ll introduce it in class, but have a look at the readme to get an Idea what it is about: Example Project for Week 4 on GitHub
Authentication 1. Add a user model and set it up with encrypted password If you don&amp;rsquo;t already have a user model, create one:
rails g scaffold User name:string password:digest if you already have a user model (it may have another name), make sure it has a field for password.</description></item><item><title>Example Project for Web Technology - Week 5</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-5/</guid><description> nothing here yet</description></item><item><title>Example Project for Web Technology - Week 5</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/example-project/week-5/</guid><description>Week 5 Example Project for this week: Example Project for Week 5 on GitHub: Notebook
It&amp;rsquo;s just an app with one resource, Note, which has one attribute, content.
I used JavaScript to add Notes on the notes#index page without reloading the page, following the example &amp;ldquo;A Simple Example&amp;rdquo; in the Rails Guides on AJAX.
This is the commit where I added the changes described in the tutorial.</description></item><item><title>Example Project for Web Technology - Week 5</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/example-project/week-5/</guid><description>Week 5 Example Project for this week: Example Project for Week 5 on GitHub: Notebook
It&amp;rsquo;s just an app with one resource, Note, which has one attribute, content.
I used JavaScript to add Notes on the notes#index page without reloading the page, following the example &amp;ldquo;A Simple Example&amp;rdquo; in the Rails Guides on AJAX.
This is the commit where I added the changes described in the tutorial.</description></item><item><title>Exercise 00: Lab Startup</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-00/</guid><description>Source code for this exercise: https://github.com/htw-imi-info1/kara Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. We have lots of rules for the labs, as they are used by many different people during the week. You find a link to the rules (&amp;ldquo;Laborordnung&amp;rdquo;) here.
Two really important rules are:
No food. We don&amp;rsquo;t like crumbs in the keyboards. Drinks are okay if they are in a container with a screw-on lid and the lid is screwed on.</description></item><item><title>Exercise 00: Lab Startup</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-00/</guid><description>This page contains instructions on how you can prepare for the Info1 labs, that is, opening source code in greenfoot (or bluej) and uploading reports to moodle.
Intro Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. We have lots of rules for the labs, as they are used by many different people during the week. You find a link to the rules (&amp;ldquo;Laborordnung&amp;rdquo;) here.</description></item><item><title>Exercise 01 - Case Studies of Ethical Questions</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-casestudies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-casestudies/</guid><description>The German &amp;lsquo;&amp;lsquo;Gesellschaft für Informatik&amp;rsquo;&amp;rsquo; published Ethical Guidelines in 1994 that were updated in 2004. They are available online at https://fg-ie.gi.de/ethische-leitlinien.html.
We will first have a closer look at the Ethical Guidelines, and then in groups of 3-4 persons you will choose one of the scenarios to read, discuss, and present to the class. Every member of the group will submit their own PDF version with a reflection on the scenario and how the Ethical Guidelines apply to this case.</description></item><item><title>Exercise 01 - Case Studies of Ethical Questions</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-casestudies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-casestudies/</guid><description>The German &amp;lsquo;&amp;lsquo;Gesellschaft für Informatik&amp;rsquo;&amp;rsquo; published Ethical Guidelines in 1994 that were updated in 2004. They are available online at https://fg-ie.gi.de/ethische-leitlinien.html.
We will first have a closer look at the Ethical Guidelines, and then in groups of 3-4 persons you will choose one of the scenarios to read, discuss, and present to the class. Every member of the group will submit their own PDF version with a reflection on the scenario and how the Ethical Guidelines apply to this case.</description></item><item><title>Exercise 01 - Case Studies of Ethical Questions</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-casestudies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-casestudies/</guid><description>The German &amp;lsquo;&amp;lsquo;Gesellschaft für Informatik&amp;rsquo;&amp;rsquo; published Ethical Guidelines in 1994 that were updated in 2004. They are available online at https://fg-ie.gi.de/ethische-leitlinien.html.
We will first have a closer look at the Ethical Guidelines, and then in groups of 3-4 persons you will choose one of the scenarios to read, discuss, and present to the class. Every member of the group will submit their own PDF version with a reflection on the scenario and how the Ethical Guidelines apply to this case.</description></item><item><title>Exercise 01 - Installation Instructions</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-01-startup-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-01-startup-installation/</guid><description>(These are detailled instructions for the installation part of the Info 3 Startup Lab ).
Note on Eclipse, 06/Oct/2014 startup bug on Mavericks
Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded tiny notebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which unfortunatley even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises.</description></item><item><title>Exercise 01 - Installation Instructions</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-startup-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-startup-installation/</guid><description>(These are detailled instructions for the installation part of the Info 3 Startup Lab).
Note on Eclipse, 06/Oct/2014 startup bug on Mavericks
Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded tiny notebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which unfortunatley even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises.</description></item><item><title>Exercise 01 - Installation Instructions</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-startup-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-startup-installation/</guid><description>(These are detailled instructions for the installation part of the Info 3 Startup Lab).
Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded tiny notebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which unfortunatley even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises.</description></item><item><title>Exercise 01 - Installation Instructions</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-startup-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-startup-installation/</guid><description>(These are detailled instructions for the installation part of the Info 3 Startup Lab).
Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded tiny notebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which unfortunatley even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises.</description></item><item><title>Exercise 01 - Lab Startup and JavaScript Finger Exercises</title><link>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
Pre-Lab (Do this BEFORE the lab) 1. Prepare your work environment The labs will be taught remote. You can either
work on the lab computers from remote (make sure to chose the lab that is given on your schedule) or just work on your own computer. If you decide to work on your own computer:
[optional] I recomment you work on a Linux or MacOS System.</description></item><item><title>Exercise 01 - Lab Startup and Ruby Finger Exercises</title><link>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
PreLab if you plan on using your own computer in the lab, make sure that you do the installation of at least ruby and a decent editor before coming to lab. Part 1: Setting up your environment Make sure that you have
ruby, rails, git, a decent text editor installed on the computer you intend to use (or know how to run all these on the lab machines).</description></item><item><title>Exercise 01 - Lab Startup and Ruby Finger Exercises</title><link>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
PreLab if you plan on using your own computer in the lab, make sure that you do the installation of at least ruby and a decent editor before coming to lab. Part 1: Setting up your environment Make sure that you have
ruby, rails, git, a decent text editor installed on the computer you intend to use (or know how to run all these on the lab machines).</description></item><item><title>Exercise 01 - Lab Startup and Ruby Finger Exercises</title><link>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
PreLab if you plan on using your own computer in the lab, you should do the software installation of at least ruby and a decent editor before coming to lab. Part 1: Setting up your environment Make sure that you have
ruby, rails, git, a decent text editor installed on the computer you intend to use (or know how to run all these on the lab machines).</description></item><item><title>Exercise 01: Getting Started and Shapes</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-01/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. Each computer is a so-called dual-boot computer that can boot to Windows or Ubuntu Linux. As computer science students we expect you to be able to deal with Windows, Unix, and Mac OS operating systems.
We have lots of rules for the labs, as they are used by many different people during the week. Usually we&amp;rsquo;re in one of three available labs, you find an overview of them including a link to the rules (&amp;ldquo;Laborordnung&amp;rdquo;) here.</description></item><item><title>Exercise 01: Getting Started and Shapes</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-01/</guid><description>Pre-Lab Preparation Download and install BlueJ 5 as described on the BlueJ page: https://bluej.org.
P1. Which primitive data types are there in Java? Record where you found this information.
P2. What are the types of the following values (constants)?
0 &amp;ldquo;hello&amp;rdquo; 101 -1 true &amp;ldquo;true&amp;rdquo; &amp;ldquo;33&amp;rdquo; &amp;lsquo;3&amp;rsquo; 3.1415 P3. Pick up a book - you should have at least one at home. Is this book an object or a class? If it is a class, name some objects.</description></item><item><title>Exercise 01: Git and Markdown with a Practical Application</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-01/</guid><description>Pre-Lab Sign up on GitHub if you haven&amp;rsquo;t already done so. Github translates markdown files automatically to HTML - That&amp;rsquo;s how the README.md files you see in most repositories work. Read through the GitHub Flavored Markdown documentation. This exercise is for getting aquaintained with git and github (and markdown) with the practical application of creating online notes collaboratively. This gives you the opportunity to practice using git and github collaboration features with a bunch of plain text files before moving on to managing heaps of source code.</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-01/</guid><description>Source code for this exercise: https://github.com/htw-imi-info1/exercise01-kara Pre-Lab Download the Scenarios and read through the Kara programming exercises in the assignment.
Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this:
1. walk one edge (call move n times), 2.</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-01/</guid><description>Pre-Lab Download the Scenario and read through the Kara programming exercises in the assignment.
Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this:
walk one edge (call move n times),
drop a leaf</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-01/</guid><description>Pre-Lab Download the Scenario and read through the Kara programming exercises in the assignment. Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this: 1. walk one edge (call move n times), 2. drop a leaf 3.</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-01/</guid><description>Pre-Lab Download the Scenarios and read through the Kara programming exercises in the assignment. Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this: 1. walk one edge (call move n times), 2. drop a leaf 3.</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-01/</guid><description>Pre-Lab Download the Scenarios and read through the Kara programming exercises in the assignment.
Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this:
1. walk one edge (call move n times), 2. drop a leaf 3.</description></item><item><title>Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-01/</guid><description>Pre-Lab Download the Scenarios and read through the Kara programming exercises in the assignment.
Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this:
1. walk one edge (call move n times), 2. drop a leaf 3.</description></item><item><title>Exercise 01: Programming Kara - Advanced</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-01-b/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-01-b/</guid><description>Pre-Lab Download the Scenarios and read through the Kara programming exercises in the assignment. Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this: 1. walk one edge (call move n times), 2. drop a leaf 3.</description></item><item><title>Exercise 01: Programming Kara - First Steps</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-01-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-01-a/</guid><description>Pre-Lab Download the Kara Scenarios from github: use the &amp;ldquo;Download ZIP&amp;rdquo; button in the lower right corner if you&amp;rsquo;re not familiar with git and github or use this direct link. You will use the scenarios 01-01 through 01-08 for this lab. Read through Worksheet 1 Assignment We&amp;rsquo;ve already started working on Worksheet 1 in class. Remember to have a logbook as in the previous exercise: Note down the steps you&amp;rsquo;ve taken, including those that failed.</description></item><item><title>Exercise 01: Sending Messages to Objects</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-01/</guid><description>sequenceDiagram actor You create Participant Picture You->>+Picture:new() You->>+Picture:draw() create Participant Circle Picture->>+Circle: new() Circle-->>-Picture:circle Picture->>+Circle: makeVisible() Circle-->>-Picture:void Picture-->>-You:void This week&amp;rsquo;s lab is all about exploring given Objects by sending them messages (aka in Java: calling methods) - and writing your first programs by putting them together in your own methods.
What to bring to lab P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types.</description></item><item><title>Exercise 02 - Use Cases and Scenarios</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-02/</guid><description>In this exercise you will develop detailed Scenarios for Use Cases for an application called &amp;ldquo;HTW&amp;rdquo; - Halloween Treats Worldwide.
First, have a look at the description of the system:
Halloween Treats Worldwide Foto by Pedro J. Ferreira
Halloween Treats Worldwide (HTW) is planned to be an online-shop where people can buy original Halloween Treats. The product manager has asked you to design and develop the platform for their business.</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-02/</guid><description>Exercise 02: Shapes and TicketMachine Pre-lab What to Bring to Lab Assignment **Shapes **
Download the exercise source code from GitHub (you can download the whole exercise02 repository as a zip here) and open up the Figures project.
What do circles, triangles, and squares have in common? Do they have any differences? Create a circle, a triangle, and two squares. Oops, where is the second square? How can you make both visible on the screen?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-02/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-02-full/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-02-full/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-02/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-02-full/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-02-full/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-02/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: Shapes and TicketMachine</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-02/</guid><description>This week&amp;rsquo;s lab work is intended to acquaint you with the BlueJ environment.
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types. What are they? Record where you found this information.
P2. What are the types of the following values (constants)?</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Pre-lab What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } P2. How can you tell the difference between a method and a constructor just by looking at its header?</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Pre-lab 0. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } 1. How can you tell the difference between a method and a constructor just by looking at its header?
2. What do you think would be printed if you altered the fourth statement of printTicket so that price also has quotes around it, as follows: System.</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Source code for this exercise: https://github.com/htw-imi-info1/exercise02 Pre-lab 0. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } 1. How can you tell the difference between a method and a constructor just by looking at its header?
2. What do you think would be printed if you altered the fourth statement of printTicket so that price also has quotes around it, as follows: System.</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Pre-lab 0. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } 1. How can you tell the difference between a method and a constructor just by looking at its header?
2. What do you think would be printed if you altered the fourth statement of printTicket so that price also has quotes around it, as follows: System.</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Source code for this exercise: https://github.com/htw-imi-info1/chapter02 Pre-lab 1. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } 2. How can you tell the difference between a method and a constructor just by looking at its header?
3. What do you think would be printed if you altered the fourth statement of printTicket so that price also has quotes around it, as follows: System.</description></item><item><title>Exercise 03 - Class Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-03/</guid><description>In this exercise you will create a Class Diagram for the HTW Application. You should work on this exercise in a team of 2-4 people.
Based on the system description in the last exercise and the use cases you&amp;rsquo;ve developed, draw a Class Diagram for your Application. It should contain associations (aggregations and compositions, association classes as needed), generalizations (inheritance), as well as the most important fields and method names of the classes.</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-03/</guid><description>Book Exercise: Instance Variables, Getters and Setters and some Strings. Pre-lab This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } **P2.</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-03/</guid><description>This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-03/</guid><description>Not yet reviewed and published for WS 2019/20 Term! Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 04 - UML Part III: State Machine Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-04/</guid><description>Foto by Jeff Kubina
Prelab Please do read this Introduction to State Machine Diagrams before coming to lab!
UML 2 State Machine Diagramming Guidelines I will only give a brief intro/Q&amp;amp;A to State Machine Diagrams in the lab.
Assignment Your job in this exercise is to model all of the following systems (2 points per system for 1-3, 4 points for system 4):
Model the modified goat/cabbage/wolf problem: The farmer is in Schöneweide and wants to get his goat, his cabbage and his wolf over to Oberschöneweide.</description></item><item><title>Exercise 04: Rock around the Clock</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-04/</guid><description>Pre-lab This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
To make the best of Lab time, please prepare this exercises before coming to lab! **P1. **Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock around the Clock</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab For the Tuesday group: we will be talking about boolean expressions in class on Tuesday. Therefore, I will set some time apart to let you work on the prelab in class as an exercise; you may however if you haven&amp;rsquo;t already done so for programming Kara do some reading about boolean expressions and prepare it before or at least give it a first try: https://en.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P1. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P0. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P1. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P1. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P1. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P0. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P0. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 04: Rock Around the Clock - Part 1</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P0. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 05 - Sequence Diagrams and Ruby Finger Exercises</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-05/</guid><description>Part 1: Sequence Diagrams Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Exercise 05 - UML Part IV: Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-05a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-05a/</guid><description>Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Exercise 05 - UML Part IV: Sequence Diagrams</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-05/</guid><description>Pelican launch sequence. Foto by Don McCullough Prelab Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online.
Read it as a preparation for the lab.
Assignment As a finger exercise for Sequence Diagrams, pick one of the following example projects from the first semester and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Auction / Use case: makeABid() is called Tech Support / Use case: user command is entered (start() method in SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P1. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P2. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P3. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P0. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P1. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P2. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-05/</guid><description>This week&amp;rsquo;s lab work is intended help you practice using loops.
What to Bring to Lab Please prepare these Exercises *before* coming to lab!
P1. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P2. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Note: (19.11.2013) The Kara Special exercise is obligatory!
In Exercise 4, you are asked to write the remove with an Iterator. As we haven&amp;rsquo;t yet reached Iterators in class, you can either:
implement a removeFirstNote method with the for-each loop as seen in class or look up iterators and use the Iterator remove method The while/index-variant however, should delete all Notes meeting the criteria!</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
##Prelab
What to Bring to Lab Please prepare these Exercises *before* coming to lab!I will ask you to show your pre-lab to me at the beginning of the lab. P1. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P2. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
##Prelab
What to Bring to Lab Please prepare these Exercises *before* coming to lab!I will ask you to show your pre-lab to me at the beginning of the lab. P1. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P2. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P1. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P2. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P3. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P0. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P1. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P2. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P0. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P1. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P2. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 05: Rock Around the Clock - Part 2</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-05/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
What To Hand In You need to upload 2 Files to Moodle:
Your Lab Report as PDF with the extension .pdf (max. 5 pages) The source code folder containing all BlueJ projects compressed with ZIP and the extension .</description></item><item><title>Exercise 06 - Rails - First Steps</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-06/</guid><description>Foto by Pedro J. Ferreira
Prelab Read through two Rails Guides: https://guides.rubyonrails.org/active_record_basics.html https://guides.rubyonrails.org/association_basics.html Assignment Part 0: On the order#show page, show the associated customer with its name rather than the ID - Test driven! You can use the :order1 factory for this, see Part 1 for more info on FactoryGirl test data.
Part 1: Creating Testdata You should never be attached to manually created test data living in your development or test database.</description></item><item><title>Exercise 06 - Ruby Exercise</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-06/</guid><description>You&amp;rsquo;ll find Stubs, Tests and examples for this exercise on github.
1. Hobby Matcher Program a class &amp;ldquo;Person&amp;rdquo; that implements matching Persons for their hobbies, implementing those two user stories:
Vision/Goal: As a User of the Service, I want to be able to find other People with the same hobbies as I do.
Story 1: As a User of the Service I want to be able to enter my Hobbies as a comma-separated list.</description></item><item><title>Exercise 06: A Better Notebook</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-06/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P0. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P1. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P2. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 06: Club Membership</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-06/</guid><description>Pre-lab This week&amp;rsquo;s lab work is intended give you more practice using collections.
What to Bring to Lab Please prepare these exercise before coming to the lab.
P1. How do you write the import statement for using an ArrayList?
P2. How do you define a field that will take a collection of objects of type Student? How does it get initialized?
P3. Write a method that returns true if the parameter month is valid, i.</description></item><item><title>Exercise 06: Club Membership</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-06/</guid><description>Reform Club, Wikimedia Commons
This week&amp;rsquo;s lab work is intended give you more practice using collections.
##Prelab
What to Bring to Lab Please prepare these exercise before coming to the lab.
P1. How do you write the import statement for using an ArrayList?
P2. How do you define a field that will take a collection of objects of type Student? How does it get initialized?
P3. Write a method that returns true if the parameter month is valid, i.</description></item><item><title>Exercise 06: Club Membership</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-06/</guid><description>Reform Club, Wikimedia Commons
This week&amp;rsquo;s lab work is intended give you more practice using collections.
##Prelab
What to Bring to Lab Please prepare these exercise before coming to the lab.
P1. How do you write the import statement for using an ArrayList?
P2. How do you define a field that will take a collection of objects of type Student? How does it get initialized?
P3. Write a method that returns true if the parameter month is valid, i.</description></item><item><title>Exercise 06: Club Membership</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-06/</guid><description>Reform Club, Wikimedia Commons
This week&amp;rsquo;s lab work is intended give you more practice using collections.
##Prelab
What to Bring to Lab Please prepare these exercise before coming to the lab.
P1. How do you write the import statement for using an ArrayList?
P2. How do you define a field that will take a collection of objects of type Student? How does it get initialized?
P3. Write a method that returns true if the parameter month is valid, i.</description></item><item><title>Exercise 06: Club Membership</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-06/</guid><description>Reform Club, Wikimedia Commons
This week&amp;rsquo;s lab work is intended give you more practice using collections.
Prelab What to Bring to Lab Please prepare these exercise before coming to the lab.
P1. How do you write the import statement for using an ArrayList?
P2. How do you define a field that will take a collection of objects of type Student? How does it get initialized?
P3. Write a method that returns true if the parameter month is valid, i.</description></item><item><title>Exercise 06: Lambda Functions</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-06/</guid><description>Pre-lab This week&amp;rsquo;s lab work is intended help you better understand lambda functions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?
P2. Given the following code:</description></item><item><title>Exercise 06: Lambda Functions</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-06/</guid><description>This week&amp;rsquo;s lab work is intended help you better understand lambda functions.
Pre-lab Please prepare these Exercises *before* coming to lab! Doing the pre-lab will save you time during the lab.
P0. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?
P1. Given the following code:
public void printStudent (Student s) { System.</description></item><item><title>Exercise 06: Lambda Functions</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-06/</guid><description>This week&amp;rsquo;s lab work is intended help you better understand lambda functions.
Pre-lab Please bring these exercises printed out or written out and completed with you to lab. Doing the pre-lab will save you time during the lab.
P0. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?
P1. Given the following code:</description></item><item><title>Exercise 06: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-06/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using more classes from the Java API: the Random class, Sets and Maps.
Pre-Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07 - Internationalization, n:m Associations and a Bit of Functionality</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-07/</guid><description>Assignment Sort or Search Pumpkins On the Pumpkin index site, add either a sort function for at least one pumpkin attribute or a search functionality. You will need to add a link or form to the index site, and perform the ordering/searching from the controller altering the @pumpkins variable. [https://guides.rubyonrails.org/active_record_querying.html] (https://guides.rubyonrails.org/active_record_querying.html) contains all necessary information on how to query Pumpkins.
*** remember to make use of all the great pumpkins all of you added with their pull request you can use to populate your database!</description></item><item><title>Exercise 07: Lambda Functions</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-07/</guid><description>This week&amp;rsquo;s lab work is intended help you better understand lambda functions.
Pre-lab Please bring these exercises printed out or written out and completed with you to lab. Doing the pre-lab will save you time during the lab.
P0. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?
P1. Given the following code:</description></item><item><title>Exercise 07: Lambda Functions</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-07/</guid><description>Sources: https://commons.wikimedia.org/wiki/File:Aye-aye_(Daubentonia_madagascariensis).jpg https://en.m.wikipedia.org/wiki/File:Kakapo_Sirocco_1.jpg
This week&amp;rsquo;s lab work is intended help you better understand lambda functions, and Kara has a comeback to practice iterating through Lists.
Source code for this exercise: https://github.com/htw-imi-info1/exercise07-lambda-expressions Pre-lab Please prepare these Exercises *before* coming to lab! Doing the pre-lab will save you time during the lab.
P0. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-07/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
Pre-Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-07/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using the Random class.
Pre-Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-07/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-07/</guid><description>German Lotto Slip, Foto by ReneS
This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-07/</guid><description>German Lotto Slip, Foto by ReneS
This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-07/</guid><description>German Lotto Slip, Foto by ReneS
This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-07/</guid><description>German Lotto Slip, Foto by ReneS
This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
Pre-Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lotto and Technical Support</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-07/</guid><description>Not yet reviewed and published for WS 2019/20 Term!
This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
Pre-Lab Please bring these exercises and their solutions printed out or written out with you to the lab.
P0 How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P1 How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Test Driven Development</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-07/</guid><description>Assignment This exercise is about developing a linked list test driven.
You can either do it in Java - completing the project we&amp;rsquo;ve started in class
TestDrivenList in Java (Eclipse Project) or in Ruby
TestDrivenList in Ruby or, if interested or bored, or undecided, both. But one is sufficient.
The initial class Node is given in both versions, together with a test class and a to_s/toString method to ease testing.</description></item><item><title>Exercise 08: Black and White Box Tests</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-08/</guid><description>Assignment After exploring Unit Testing in the last exercise, we will be looking at black-box and white-box testing in this second testing exercise.
Source code for this exercise: https://github.com/htw-imi-info3-archive/lab-08-blackwhite
Getting started: Give the equivalence classes for testing a method that determines the absolute value of an integer using the black-box methodology. Don&amp;rsquo;t peek at the code yet! Now check out absolute.java in the repository and give the equivalence classes for a white-box test.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
Pre Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Download and open the Balls project (concerns Chapter 06 in the book). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.</description></item><item><title>Exercise 08: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
Pre Lab Please bring these exercises printed out or written out with you to lab.
P0. Download and open the Balls project (Chapter 05). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.
P1. Read the documentation of the Canvas class.</description></item><item><title>Exercise 08: Lotto and ...</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using the Random class.
Pre-Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 08: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice developing test cases and testing and writing Unit Tests.
Source code for this lab: https://github.com/htw-imi-info1/chapter09_testing - diary-prototype
Pre Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. Write down six test cases for Day and Appointment that. Give each test case (and, if applicable the ones from the lecture) a name.</description></item><item><title>Exercise 09 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-09/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Source Code: There are three versions. Choose one. Have brief look at the readme and the GuildedRose class.
Ruby Version: https://github.com/htw-imi-info3-archive/gilded-rose-kata Java/Eclipse Version with Test Stub: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRoseJavaEclipse Original Version using Maven: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose Write Characterization Tests To be able to add the new functionality as requested you should write Characterization tests first. You will not yet refactor or add the required new functionality!</description></item><item><title>Exercise 09: JUnit</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: JUnit</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Technical Support</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using the Random class and HashMaps.
Pre-Lab P0 Try out http://med-ai.com/models/eliza.html. Experiment a little. Can you trick the bot? How might this program work?
What To Hand In Please hand in:
zip-folder with your (documented) TechSupport code lab report as pdf Lab assignments are due on thursday at 10pm.
Assignment - Technical Support Open the book chapter 6.2 for a refresher - this exercise is based on it.</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
Pre Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. Write down six test cases for Day and Appointment that were not given in the book. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Write down six test cases for Day and Appointment that were not given in the lecture. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 09: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-09/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
Change to Assignment for Winter Term 19/20 we will be doing most of the lab during the 2nd Lecture There will be groups per Test Fixture everyone needs to submit one positive and one negative test case lab is graded with 4* for participation, 0* for no participation What to Bring to Lab Please bring these exercises printed out or written out with you to lab.</description></item><item><title>Exercise 09: The World of You</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-09/</guid><description>This week’s lab work will begin a larger project that will occupy us until the end of the semester.
Source code for this exercise: https://github.com/htw-imi-info1/exercise09-zuul Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Invent your own game scenario away from the computer. Don&amp;rsquo;t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10 - Legacy Code - Refactoring to Patterns - Part 2</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10-gilded-rose-part-2-draft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10-gilded-rose-part-2-draft/</guid><description>A Gilded Rose, Foto by Kelton
Assignment: Gilded Rose Refactoring and Enhancement Refactor the Gilded Rose and add the requested new functionality.
Last week, you&amp;rsquo;ve developed characterization tests for the guilded rose. Secured by that, you&amp;rsquo;re now safe to refactor the given implementation to a good object-oriented design - but don&amp;rsquo;t forget the goblin in the corner!
That is, you can&amp;rsquo;t simply create an Item-Hierarchy where each item knows how to update it&amp;rsquo;s quality.</description></item><item><title>Exercise 10 - Rails first steps</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-10/</guid><description>In this exercise, you will create a rails application and add one or two features to it in which you work with the Model, View and Controller.
Pick one simple thing that you can solve mainly with the provided CRUD (Create Read Update Delete) features of a rails scaffold using just one model class. If the first things seems to simple for that, add a second – but the goal is really to implement just a little bit of functionality in this first step and mainly set up the whole rails app together with Continuous Integration – we will add Continuous Deployment in the next exercise.</description></item><item><title>Exercise 10 a: The World of You</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10-a/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10 b: Adding Commands</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10-b/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10-b/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What are enums in Java? which special methods does an enum have?
P2. What is switch statement? Write down an example.
Post-Lab, AKA What To Turn In Your completed lab report, submitted in Moodle as a pdf, should include:</description></item><item><title>Exercise 10: Bouncing Balls</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-10/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with the basic concepts of programming.
Pre Lab P0. Download and open the Balls project (concerns Chapter 06 in the book). Create a BallDemo object and execute the drawDemo and bounce methods. Then read the BallDemo source code. Describe, in detail, how these methods work for your report.
P1. Read the documentation of the Canvas class. Then answer the following questions in writing, including fragments of Java code:</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-10/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-10/</guid><description>This week’s lab work will begin a larger project that will occupy us until the end of the semester. The groups you form today will stay groups for the remaining part of the semester!
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Invent your own game scenario away from the computer. Don’t worry about implementation or classes or programming.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-10/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-10/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-10/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-10/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-10/</guid><description>This exercise has been split up in parts A &amp;amp; B and is not valid in WS2016/17! See the [Schedule]({{ site.BaseURL }}/classes/ws2016/info1/schedule/) or [Lab Index]({{ site.BaseURL }}/classes/ws2016/info1/labs/) for the correct exercises.
Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer.</description></item><item><title>Exercise 10: The World of You</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-10/</guid><description>This week’s lab work will begin a larger project that will occupy us until the end of the semester. The groups you form today will stay groups for the remaining part of the semester!
Pre-lab Please bring these exercises printed out or written out with you to the lab.
P0. Invent your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting.</description></item><item><title>Exercise 10: Use Inheritance for Commands</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-10/</guid><description>This week’s lab work will continue the zuul project.
classDiagram Command &amp;lt;|-- Go Command &amp;lt;|-- Quit Command &amp;lt;|-- Help Command &amp;lt;|-- Look Command &amp;lt;|-- Eat &amp;lt;&amp;lt;abstract&amp;gt;&amp;gt; Command class Command{ processCommand(Player)* } class Go{ processCommand(Player) } class Quit{ processCommand(Player) } class Help{ processCommand(Player) } class Look{ processCommand(Player) } class Eat{ processCommand(Player) } The Class Hierarchy for Commands.
Update 28/12/2023 As the refactoring described below - even with the provided parts - is still quite difficult as you might get a lot of compilation errors along the way, here&amp;rsquo;s a third alternative: Re-do the last lab - the refactoring described in Chapter 08, Designing Classes, again (or for the first time, as a lot of you have missed that part!</description></item><item><title>Exercise 11 - Associations and Internationalization</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-11/</guid><description>In this assignment, you will add some functionality to your rails app and try out a couple of the principles and practices we covered in the lectures. For this, you need to add some functionality that you can choose yourself. Read through the whole assignment and decide on the functionality you want to add before starting to implement it. It does not have to be the most important functionality of your app – the goal here is to try out the different aspects of rails.</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-11/</guid><description>This week’s lab work will continue a larger project that will occupy us until the end of the semester.
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-11-with-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-11-with-switch/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-11-with-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-11-with-switch/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-11-with-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-11-with-switch/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-11/</guid><description>Pre-lab This week’s lab work will continue a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-11/</guid><description>This week’s lab work will continue a larger project that will occupy us until the end of the semester.
Pre-lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-11/</guid><description>Image by upklyak on Freepik
update: re-check this page for JSONWorld additions. They will be optional.
This week’s lab work will continue a larger project that will occupy us until the end of the semester.
Pre-lab Prepare your pre-lab before coming to class! Doing the pre-lab will save you time during the lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items.</description></item><item><title>Exercise 11: Testing with JUnit</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-11/</guid><description>This week&amp;rsquo;s lab work is intended give you practice testing and writing assertions.
Pre Lab Please bring these exercises printed out or written out or in digital form with you to lab.
P1. Write down six test cases for Day and Appointment that were not given in the book. Give each test case (and the ones from the lecture) a name.
P2. What assertions do you need in order to be able to automate the tests?</description></item><item><title>Exercise 12 a: The World of You</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-12-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-12-a/</guid><description>Pre-lab This week’s lab work will begin a larger project that will occupy us until the end of the semester.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab.
P1. Design your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/labs/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/info1/labs/exercise-12/</guid><description>This week&amp;rsquo;s lab work will finish up your project.
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page. You do the prelab for the game you received from your neighbor last week.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-12-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-12-switch/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page. You do the prelab for the game you received from your neighbor last week.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-12-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-12-switch/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page. You do the prelab for the game you received from your neighbor last week.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-12-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-12-switch/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page. You do the prelab for the game you received from your neighbor last week.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-12/</guid><description>Pre-lab This week&amp;rsquo;s lab work will finish up your project.
What to Bring to Lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P1. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-12/</guid><description>This week&amp;rsquo;s lab work will finish up your project.
Pre-lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P0. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/exercise-12/</guid><description>This week&amp;rsquo;s lab work will finish up your project.
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up. The player can drop one or all items in the current location.</description></item><item><title>Exercise 12: The World of You</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-12/</guid><description>This week’s lab work will begin a larger project that will occupy us until the end of the semester. The groups you form today will stay groups for the remaining part of the semester!
Pre-lab Please bring these exercises printed out or written out with you to the lab.
P0. Invent your own game scenario away from the computer. Don’t worry about implementation or classes or programming. Just try and come up with something interesting.</description></item><item><title>Exercise 13: CRC Cards</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-13/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Exercise 13: CRC Cards</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-13/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Exercise 13: Keeping Track of Stuff</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-13/</guid><description>This week’s lab work will continue a larger project that will occupy us until the end of the semester.
Pre-lab Please bring these exercises printed out or written out with you to lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 14: Pick up and Carry</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-14/</guid><description>This week&amp;rsquo;s lab work will finish up your project.
Pre-lab Please bring these exercises printed out or written out with you to lab. Please have your name on your page.
P0. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up.</description></item><item><title>Exercise Drölf: Inheritance</title><link>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/labs/exercise-inheritance/</guid><description>This week&amp;rsquo;s lab work is intended give you practice working with inheritance. It combines content from various chapters in the book, including this week&amp;rsquo;s chapter, chapter 12.
Post-Lab, AKA What To Turn In A report of your completed assignment, submitted in Moodle as a pdf Your BlueJ project as a zip file Lab assignments are due on Thursday at 22:00.
Assignment Pokemon You are part of the team that develops the logic behind a Pokemon game.</description></item><item><title>Exercise Startup</title><link>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2012/info1/assignments/exercise-00/</guid><description>You need to get used to keeping a logbook in the lab. It can be analog (i.e. on paper) or digital. Make sure that you label and date your logbook. Keep track of everything you do in the logbook – even if you are really excited and want to keep playing. You will save time later if you can easily retrace your steps. Your lab leader will show you how to set up an online logbook.</description></item><item><title>Exercise Startup</title><link>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/labs/exercise-00/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. Each computer in WH C 579 is a so-called dual-boot computer that can boot to Windows or Ubuntu Linux, or Mac OS in WH C 537. As computer science students we expect you to be able to deal with Windows, Unix, and Mac OS operating systems. For this lab, you can work with Mac OS or Windows.</description></item><item><title>Exercise Startup</title><link>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/labs/exercise-00/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. Each computer in WH C 579 is a so-called dual-boot computer that can boot to Windows or Ubuntu Linux, or Mac OS in WH C 537. As computer science students we expect you to be able to deal with Windows, Unix, and Mac OS operating systems. For this lab, you can work with Mac OS or Windows.</description></item><item><title>Exercise Startup</title><link>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/labs/exercise-00/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. Each computer in WH C 576 and WH C 579 is a so-called dual-boot computer that can boot to Windows or Ubuntu Linux, or Mac OS in WH C 537. As computer science students we expect you to be able to deal with Windows, Unix, and Mac OS operating systems. For this lab, you can work with Mac OS or Windows.</description></item><item><title>GIT Intro</title><link>https://bkleinen.github.io/material/git-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/git-intro/</guid><description>Source Code Management mit GIT Für Info2 hatte ich im letzten Semester eine GIT-Introduction aufgenomen:
(Zugänglich mit HTW-Login)
Part 1 - Basics and a simple git workflow: Repository anlegen, commit, push, pull, clone Part 2 - committing the right files: git status, git add, index Part 3 - Stolpersteine: andere machen Änderungen! - merge conflicts, vi als editor Part 4 - Adding SSH Keys and copying Repos from Github to Gitlab Seither habe ich gelernt, dass die Beispiele meiner commit messages nicht gut gewählt waren.</description></item><item><title>Grading Scale</title><link>https://bkleinen.github.io/studies/grading/grading-scale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/grading/grading-scale/</guid><description>This is the official grading scale according to the RPO. There are 110-120 percent possible on all courses I teach.
Percent Grade Percent Grade 95 ≤ p 1,0 65 ≤ p &amp;lt; 70 3,0 90 ≤ p &amp;lt; 95 1,3 60 ≤ p &amp;lt; 65 3,3 85 ≤ p &amp;lt; 90 1,7 55 ≤ p &amp;lt; 60 3,7 80 ≤ p &amp;lt; 85 2,0 50 ≤ p &amp;lt; 55 4,0 75 ≤ p &amp;lt; 80 2,3 0 ≤ p &amp;lt; 50 5,0 70 ≤ p &amp;lt; 75 2,7</description></item><item><title>Guideline to Lab Reports and Assignments</title><link>https://bkleinen.github.io/studies/grading/guideline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/grading/guideline/</guid><description>General Info about Lab Reports and Grading What to hand in The assignments will clearly state wether you need to hand in a LabReport as PDF, source code or both.
if both PDF and source code have to be submitted, upload two files: a PDF and a zip with the source code. Please do not include the PDF in the ZIP file.
If only a PDF has to be submitted, hand in the PDF.</description></item><item><title>Hugo Markdown</title><link>https://bkleinen.github.io/material/hugo/markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/hugo/markdown/</guid><description>This is something in between a playground and a cheatsheet for hugo markdown.
Markdown in Hugo https://gohugo.io/getting-started/configuration-markup/
strikethrough not strikethrough https://www.markdownguide.org/
https://www.markdownguide.org/tools/hugo/
Ordered Lists https://www.markdownguide.org/basic-syntax#ordered-lists
One Ident Sublists 4 Spaces or 1 Tab more Numbering does not have to be correct in the source But the first number matters second 42 is not a 42 Without a one it is not even recognized as a list 42. But the first number matters 42.</description></item><item><title>Impressum</title><link>https://bkleinen.github.io/contact/impressum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/contact/impressum/</guid><description>Diese Seite dient der Information meiner Studierenden über Kurse und generell Organisation ihres Studiums. Sie verwendet keine Cookies und speichert über die Informationen, die die jeweiligen Webserver unter https://home.htw-berlin.de und https://github.com für den Mirror unter https://bkleinen.github.io als übliche Serverlogs speichern, keine Informationen. Weitere Informationen finden Sie in der Datenschutzerklärung.
Herausgeber Prof. Dr. Barne Kleinen
HTW Berlin, Fachbereich 4
Wilhelminenhofstr. 75A
12495 Berlin
barne.kleinen@htw-berlin.de
Telefon: +49 30 5019 - 3499</description></item><item><title>Independent Coursework</title><link>https://bkleinen.github.io/studies/ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/studies/ic/</guid><description>Prof. Weber-Wulff compiled a hand-out about ICs, as Prüfungsausschussvorsitzende. (Mirror on my site) I find it highly informative. Please read it!
In addition to that, my specific rules about ICs are as follows:
You need to talk to me - preferably during the office hours (see below) - about your topic and register in LSF for the correct semester and course (IC1 or IC2). You will be rejected first and accepted later manually, please re-register as long as possible/necessary (Neuanmeldung).</description></item><item><title>Info 1 - Schedule</title><link>https://bkleinen.github.io/classes/ss2018/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/schedule/</guid><description>This schedule is tentative and subject to change.
Week KW Date Lecture Chapter Lab 1 13 Tue, 2018-04-03 no class Fri, 2018-04-06 Introduction to Class 2 14 Tue, 2018-04-10 Objects, Classes, Methods, BlueJ, Parameters, Compiler 1 Exercise 01 Fri, 2018-04-13 Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Getters and Setter 2 3 15 Tue, 2018-04-17 Printing to the command line, Conditional, Local Variables,Expressions 2 Exercise 02 Fri, 2018-04-20 Abstraction, Modularization, Object Interaction 3 4 16 Tue, 2018-04-24 Object Creation, Object and Class Diagrams, Primitive Types, Object Types, Multiple Constructors, Debugger 3 Exercise 03 Fri, 2018-04-27 Collections, Generics, for-each, While Loops 4 5 17 Tue, 2018-05-01 * &amp;mdash;- no class &amp;mdash;&amp;ndash; Exercise 04 Fri, 2018-05-04 More Loops, Iterators, Arrays, For Loops 4 6 18 Tue, 2018-05-08 Loops 5 &amp;ndash; week 17: no lab on Tue, week 18: no lab on Fri &amp;ndash; Fri, 2018-05-11 * &amp;mdash;- no class &amp;mdash;&amp;ndash; 7 19 Tue, 2018-05-15 Graphical User Interfaces, Lambda Functions 5 (13) Exercise 05 Fri, 2018-05-18 Lambda Functions, Filter, Map, Reduce 5 8 20 Tue, 2018-05-22 Library Classes, Reading Class Documentation, Random, Packages, (Hash)Maps 6 Exercise 06 Fri, 2018-05-25 Public vs.</description></item><item><title>Info 1 - Schedule</title><link>https://bkleinen.github.io/classes/ss2021/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/schedule/</guid><description>Week / KW KW Kick Off Date Topic Lab Assignment Material 1 14 Fri 09/04/2021 Introduction to Class &amp;amp; Labs, Chapter 01 - Objects and Classes Exercise 01 - Getting Started and Shapes Source Code, 15 Objects, Classes, Methods, BlueJ, Parameters, Compiler [Video Part 1][101], [2][102] 2 Fri 16/04/2021 Chapter 02 - Understanding Class Definitions Exercise 02 - Ticket Machine Source Code 16 Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Getters and Setter, Printing to the command line, Conditional, Local Variables, Expressions [Video Part 1][201], [2][202], [3][203], [4][204], [5][205], [6][206], [7][207], [8][208], [9][209] 3 Fri 23/04/2021 Chapter 03 - Object Interaction Exercise 03 - Book Exercise Source Code 17 Abstraction, Modularization, Object Interaction, Object Creation, Object and Class Diagrams, Primitive Types, Object Types, Multiple Constructors, Debugger [Video Part 1][301], [2][302] 4 Fri 30/04/2021 Chapter 04 - Grouping Objects Exercise 04 - Rock Around the Clock - Part 1 Source Code 18 Collections, Generics, for-each, While Loops, More Loops, Iterators, Arrays, For Loops [Video Part 1][401], [2][402], [3][403], [4][404], [5][405] 5 Fri 07/05/2021 Chapter 05 - Functional Processing of Collections (Advanced) Exercise 05 - Rock Around the Clock - Part 2 Source Code 19 Lambda Functions, Filter, Map, Reduce [Video Part 1][501], [2][502] 6 Fri 14/05/2021 * Vorlesungsfrei - Chapter 06 - More-Sophisticated Behavior Exercise 06 - A Better Notebook Source Code 20 Library Classes, Reading Class Documentation, Random, Packages, (Hash)Maps, Public vs.</description></item><item><title>Info 1 - Schedule</title><link>https://bkleinen.github.io/classes/ws2019/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/schedule/</guid><description>This schedule is tentative and subject to change.
Week KW Date Part Lecture Lab 1 41 Tue, 2019-10-08 I Introduction to Class Exercise Startup II Introduction to Java, Programming with Kara 2 42 Tue, 2019-10-15 I Introduction to Programming with Kara Exercise 01 II Introduction to Programming with Kara 3 43 Tue, 2019-10-22 I Objects, Classes, Methods, BlueJ, Parameters, Compiler (Chapter 01) Exercise 02 II Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Getters and Setter (Chapter 02) 4 44 Tue, 2019-10-29 I Printing to the command line, Conditional, Local Variables,Expressions (Chapter 02) Exercise 03 II Abstraction, Modularization, Object Interaction (Chapter 03) 5 45 Tue, 2019-11-05 I Object Creation, Object and Class Diagrams, Primitive Types, Object Types, Multiple Constructors, Debugger (Chapter 03) Exercise 04 II Collections, Generics, for-each, While Loops (Chapter 04) 6 46 Tue, 2019-11-12 I More Loops, Iterators, Arrays, For Loops (Chapter 04) Exercise 05 II Loop Practice 7 47 Tue, 2019-11-19 I Graphical User Interfaces, Lambda Functions (Chapter 13, Chapter 05) Exercise 06 II Lambda Functions, Filter, Map, Reduce (Chapter 05) 8 48 Tue, 2019-11-26 I Library Classes, Reading Class Documentation, Random, Packages, (Hash)Maps (Chapter 06) Exercise 07 II Public vs.</description></item><item><title>Info 1 SoSe 2021 - Konzept Lernteamcoaching</title><link>https://bkleinen.github.io/classes/ss2021/info1/week/lernteamcoaching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/week/lernteamcoaching/</guid><description>Lernteamcoaching in der Distanzlehre in Info1 Im Sommersemester 2021 wird Info1 nach dem didaktischen Konzept des Lernteamcoachings durchgeführt. Hierbei erarbeiten sich Studierende Inhalte zunächst individuell und dann gemeinsam in der Gruppe. Schliesslich wird jede Kleingruppe 1 x Woche gecoacht.
Thema der Woche ist jeweils ein Kapitel im Buch &amp;ldquo;Object First with Java&amp;rdquo; sowie ein Lab Assignment. Die Lab Assignments beziehen sich überwiegend auf die Kapitel der Wochen davor, so dass nicht unmittelbar der aktuelle Stoff schon verstanden sein muss, um das Lab bearbeiten zu können.</description></item><item><title>Info 2 Finger Exercises</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/topic02_1_finger_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/topic02_1_finger_exercises/</guid><description>This is a small collection of programming finger exercises to get you back to programming java, and to get to know your new programming environment.
I&amp;rsquo;ve numbered them for easier referencing in the Q&amp;amp;A.
Basic Exercises FE_1: Count 0s in an array Write a method that takes an integer array as parameter and returns the number of 0 contained in it.
FE_2: Count occurrences of an character in a String Write a method that takes a String s and a character c as parameters and returns the number of occurrences of c in s.</description></item><item><title>Info 2 Material - Algorithms and Data Structures</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/algorithms_and_datastructures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/algorithms_and_datastructures/</guid><description>Textbooks and Material Algorithms and Data Structures in General The broader topic of this course is Algorithms and Data Structures. You&amp;rsquo;ll find lots of textbooks and other material on this general and all of it singular topics. I picked out three textbooks:
Overview Detailed Info</description></item><item><title>Info 2 Material Topic 01 - CRC Cards</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/topic01_crc_cards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/topic01_crc_cards/</guid><description>CRC Cards Literature Software Suggestions</description></item><item><title>Info 2 Python</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/python/</guid><description>Intro Learn python with unit tests: https://github.com/htw-imi-info2/learn-python-with-tests/tree/ws2018
Algorithms and Datastructure Examples from &amp;ldquo;Introduction to Programming in Python&amp;rdquo; Home Page of the Book: Introduction to Programming in Python
Installation You need to install a couple of additional packages to be able to run most of the examples in the book. See the To get started section on the Home Page - you can stop above &amp;ldquo;Configuring IDLE&amp;rdquo; if you already have a way to edit and run python programs on your computer.</description></item><item><title>Info 2 Python</title><link>https://bkleinen.github.io/classes/ws2018/info2/material/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/material/python/</guid><description>Intro Learn python with unit tests: https://github.com/htw-imi-info2/learn-python-with-tests/tree/ws2018
Algorithms and Datastructure Examples from &amp;ldquo;Introduction to Programming in Python&amp;rdquo; Home Page of the Book: Introduction to Programming in Python
Installation You need to install a couple of additional packages to be able to run most of the examples in the book. See the To get started section on the Home Page - you can stop above &amp;ldquo;Configuring IDLE&amp;rdquo; if you already have a way to edit and run python programs on your computer.</description></item><item><title>Info 2 Textbooks - Algorithms and Data Structures</title><link>https://bkleinen.github.io/classes/ss2024/info2/material/algorithms_and_datastructures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/material/algorithms_and_datastructures/</guid><description>Textbooks and Material The broader topic of this course is Algorithms and Data Structures. You&amp;rsquo;ll find lots of textbooks and other material on this general and all of it singular topics. I picked out three textbooks:
1. Robert Sedgewick and Kevin Wayne: Algorithms, 4th ed. Excellent Textbook. A condensed version of the text is available on the companion website: https://algs4.cs.princeton.edu/home/
This is a Coursera Course based on this Textbook: Algorithms, Part I, Algorithms, Part II as well as Computer Science: Algorithms, Theory, and Machines by the same author which we will use for finite state automata.</description></item><item><title>Info 2 Worksheet 01 - Files</title><link>https://bkleinen.github.io/classes/ss2017/info2/worksheets/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/worksheets/files/</guid><description>A. How long can a String be? In the lecture, I showed you a method for reading small files directly into a String, which can only be used for small files. But what exactly is small? As it creates a String holding the whole file content, it can&amp;rsquo;t be bigger than the maximum length of a String in Java. But how long can a String in Java be?
Find answers for that on the internet.</description></item><item><title>Info 2 Worksheet 01 - Files</title><link>https://bkleinen.github.io/classes/ss2020/info2/worksheets/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/worksheets/files/</guid><description>A. How long can a String be? In the lecture, I showed you a method for reading small files directly into a String, which can only be used for small files. But what exactly is small? As it creates a String holding the whole file content, it can&amp;rsquo;t be bigger than the maximum length of a String in Java. But how long can a String in Java be?
Find answers for that on the internet.</description></item><item><title>Info 2 Worksheet 01 - Files</title><link>https://bkleinen.github.io/classes/ss2024/info2/worksheets/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/worksheets/files/</guid><description>A. How long can a String be? In the lecture, I showed you a method for reading small files directly into a String, which can only be used for small files. But what exactly is small? As it creates a String holding the whole file content, it can&amp;rsquo;t be bigger than the maximum length of a String in Java. But how long can a String in Java be?
Find answers for that on the internet.</description></item><item><title>Info 2 Worksheet 01 - Files</title><link>https://bkleinen.github.io/classes/ws2018/info2/worksheets/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/worksheets/files/</guid><description>A. How long can a String be? In the lecture, I showed you a method for reading small files directly into a String, which can only be used for small files. But what exactly is small? As it creates a String holding the whole file content, it can&amp;rsquo;t be bigger than the maximum length of a String in Java. But how long can a String in Java be?
Find answers for that on the internet.</description></item><item><title>Info 2 Worksheet 01 - Files</title><link>https://bkleinen.github.io/classes/ws2021/info2/worksheets/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/worksheets/files/</guid><description>A. How long can a String be? In the lecture, I showed you a method for reading small files directly into a String, which can only be used for small files. But what exactly is small? As it creates a String holding the whole file content, it can&amp;rsquo;t be bigger than the maximum length of a String in Java. But how long can a String in Java be?
Find answers for that on the internet.</description></item><item><title>Info 2 Worksheet 02 - Threads</title><link>https://bkleinen.github.io/classes/ss2017/info2/worksheets/threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/worksheets/threads/</guid><description>A. Visualize Concurrency Write a little program that starts some threads (2-6 maybe) that create an output visualizing the switch between the threads. e.g.
Thread A running Thread A running Thread A running Thread B running Thread B running Thread C running Thread C running Thread C running Thread A running B. Create a Deadlock Write a little Program that creates a deadlock.
C. Is Java HashMap Thread Safe? D. Atomic and non-Atomic Operations What will be the sum?</description></item><item><title>Info 2 Worksheet 02 - Threads</title><link>https://bkleinen.github.io/classes/ss2020/info2/worksheets/threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/worksheets/threads/</guid><description>A. Visualize Concurrency Write a little program that starts some threads (2-6 maybe) that create an output visualizing the switch between the threads. e.g.
Thread A running Thread A running Thread A running Thread B running Thread B running Thread C running Thread C running Thread C running Thread A running B. Create a Deadlock Write a little Program that creates a deadlock.
C. Is Java HashMap Thread Safe? D. Atomic and non-Atomic Operations What will be the sum?</description></item><item><title>Info 2 Worksheet 02 - Threads</title><link>https://bkleinen.github.io/classes/ss2024/info2/worksheets/threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/worksheets/threads/</guid><description>A. Visualize Concurrency Write a little program that starts some threads (2-6 maybe) that create an output visualizing the switch between the threads. e.g.
Thread A running Thread A running Thread A running Thread B running Thread B running Thread C running Thread C running Thread C running Thread A running B. Create a Deadlock Write a little Program that creates a deadlock.
C. Is Java HashMap Thread Safe? D. Atomic and non-Atomic Operations What will be the sum?</description></item><item><title>Info 2 Worksheet 02 - Threads</title><link>https://bkleinen.github.io/classes/ws2018/info2/worksheets/threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/worksheets/threads/</guid><description>A. Visualize Concurrency Write a little program that starts some threads (2-6 maybe) that create an output visualizing the switch between the threads. e.g.
Thread A running Thread A running Thread A running Thread B running Thread B running Thread C running Thread C running Thread C running Thread A running B. Create a Deadlock Write a little Program that creates a deadlock.
C. Is Java HashMap Thread Safe? D. Atomic and non-Atomic Operations What will be the sum?</description></item><item><title>Info 2 Worksheet 02 - Threads</title><link>https://bkleinen.github.io/classes/ws2021/info2/worksheets/threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/worksheets/threads/</guid><description>A. Visualize Concurrency Write a little program that starts some threads (2-6 maybe) that create an output visualizing the switch between the threads. e.g.
Thread A running Thread A running Thread A running Thread B running Thread B running Thread C running Thread C running Thread C running Thread A running B. Create a Deadlock Write a little Program that creates a deadlock.
C. Is Java HashMap Thread Safe? D. Atomic and non-Atomic Operations What will be the sum?</description></item><item><title>Info 3 Code Overview</title><link>https://bkleinen.github.io/classes/ws2014/info3/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/code/</guid><description>All code examples can be found on the github organization htw-imi-info3-archive - please note that there&amp;rsquo;s also stuff form former semesters, this is the list of repositories &amp;ldquo;released&amp;rdquo; for this term WS2014/15:
Lectures 01: Ruby Learning https://github.com/htw-imi-info3-archive/rubylearning 02: Git Demo https://github.com/htw-imi-info3-archive/su-03-gitdemo Labs Lab 01 Ruby Exercise Lab 04 Testing Lab 05 Legacy Code: Ruby Version Lab 05 Legacy Code: Java Eclipse Version Lab 05 Legacy Code: Java Maven Version Lab 06 Rails 1: HTW</description></item><item><title>Info 3 Code Overview</title><link>https://bkleinen.github.io/classes/ws2015/info3/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/code/</guid><description>All code examples can be found on the github organization htw-imi-info3-archive - please note that there&amp;rsquo;s also stuff form former semesters, this is the list of repositories &amp;ldquo;released&amp;rdquo; for this term WS2015/16:
None so far.</description></item><item><title>Info 3 Code Overview</title><link>https://bkleinen.github.io/classes/ws2017/info3/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/code/</guid><description>All code examples can be found on the github organization htw-imi-info3-archive - please note that there&amp;rsquo;s also stuff form former semesters, this is the list of repositories &amp;ldquo;released&amp;rdquo; for this term WS2015/16:
None so far.</description></item><item><title>Info 3 Code Overview</title><link>https://bkleinen.github.io/classes/ws2020/info3/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/code/</guid><description>All code examples can be found on the github organization htw-imi-info3-archive - please note that there&amp;rsquo;s also stuff form former semesters, this is the list of repositories &amp;ldquo;released&amp;rdquo; for this term WS2015/16:
None so far.</description></item><item><title>Info 3 WS 20/21 Continuous Assessment</title><link>https://bkleinen.github.io/classes/ws2020/info3/continuous_assessment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/continuous_assessment/</guid><description>Due to the ongoing pandemic, the exam will be replaced by continuous assessment. The continuous assessment consists of a series of assignments. They have to be handed in individually, except for CA4, Clean Code Poster.
These assignments replace the exam part in the class&amp;rsquo; overall grading, the overall grading scheme and the Lab part is not changed.
Assignments These are the the assignment slots with grading points. The assigments are marked in moodle as &amp;ldquo;CA#&amp;rdquo;</description></item><item><title>Info1 - Class Material Overview</title><link>https://bkleinen.github.io/classes/ss2021/info1/material/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/material/</guid><description>Video Overview Chapter Link Length Time Sum 1 2 Part 9 Variables [9][209] 20 3 [Part 1][301] Exercise Overview Chapter 01 Exercise 1.1 - 1.3 1.30 - 1.35 Prelab Lab 01</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ss2018/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything to github! The &amp;ldquo;Changes in ws2018&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you the exact changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you you&amp;rsquo;ll see the changes.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ss2021/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything to github! The &amp;ldquo;Changes in ss2021&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you the exact changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you you&amp;rsquo;ll see the changes.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ws2014/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/code/</guid><description>Lectures Kara Scenario 1
Kara Scenarios for Worksheet - WS2014
Chapter 01 - Changes in WS2014 - ZIP
Chapter 02 - Changes in WS2014 - ZIP
Chapter 03 - Changes in WS2014 - ZIP
Chapter 04 - Changes in WS2014 - ZIP - 18.11.2014: in music organizer v3
Chapter 05 - Changes in WS2014 - ZIP
Chapter 06/07 (Testing) - Changes in WS2014 - ZIP
You can download the whole archives by using the ZIP Button present on the repository sites.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ws2015/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything here! Thus, the &amp;ldquo;Changes in ws2015&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you exactly the changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you see something like this.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ws2016/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything here! Thus, the &amp;ldquo;Changes in ws2016&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you exactly the changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you see something like this.</description></item><item><title>Info1 - Code Examples Overview</title><link>https://bkleinen.github.io/classes/ws2019/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/code/</guid><description>Lecture Code Examples Don&amp;rsquo;t worry about noting down any code changes I make in class - I will upload everything to github! The &amp;ldquo;Changes in ws2019&amp;rdquo; links will only work after I&amp;rsquo;ve uploaded those changes.
Note that it might also be quite convenient to look at the code on the github page online, the commit history shows you the exact changes I made. Click on &amp;ldquo;commits&amp;rdquo; and then one individual commit, and you you&amp;rsquo;ll see the changes.</description></item><item><title>Info1 Notebooks</title><link>https://bkleinen.github.io/classes/ss2021/info1/notebook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/info1/notebook/</guid><description>Notebook: Chapter Summaries and Exercises We will provide Paper Worksheets for each Chapter and encourage you to print them out and work on them with real pens.
They will be provided in a format that allows you to bind them as a book later if you wish to.
See Frau Schimpf: DIY: Buchbinden – Offene Fadenheftung for an easy german instruction how this might be done, or How to Make a Sketchbook | DIY Coptic Stitch Bookbinding Tutorial | Sea Lemon for an english one which also shows a different way to attach the cover.</description></item><item><title>Info1 WS2012 - Overview Code Examples</title><link>https://bkleinen.github.io/classes/ws2013/info1/code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/code/</guid><description> Kara Scenario 1</description></item><item><title>Info1 Zusatzkurse</title><link>https://bkleinen.github.io/classes/ss2018/info1/extra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/info1/extra/</guid><description>Zusatzmodule Informatik1 SoSe 2018 Worum geht es? In Informatik 1 wird es dieses Semester zwei Zusatzkurse geben, die euch mit kleinen Projekten die Möglichkeit geben, Programmieren anders zu lernen bzw. zu vertiefen. Die Kurse sind optional, ihr könnt aber durch erfolgreichen Abschluss eines Kurses zusätzliche Credits erwerben die im Umfang ungefähr zwei Lab Reports entsprechen.
Es stehen zwei Kurse zur Auswahl, die auf dieser Seite kurz vorgestellt werden.
Introduction to Creative Computing Graphical User Interface Introduction to Creative Computing Zielgruppe: Studierende ohne/mit wenig Programmiererfahrung</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ss2014/info2/handouts/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/handouts/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ss2015/info2/handouts/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/handouts/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ss2017/info2/handouts/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/handouts/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ss2020/info2/misc/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/misc/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ss2024/info2/misc/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/misc/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ws2018/info2/misc/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/misc/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Comparators Handout</title><link>https://bkleinen.github.io/classes/ws2021/info2/misc/comparator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/misc/comparator/</guid><description>These are the links to the sources of the various handouts regarding
Interfaces Comparator Comparable Total Order How they are used?</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ss2014/info2/handouts/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/handouts/euclid/</guid><description>Euclid of Alexandria (Greek : Εὐκλείδης, Eukleides) (* circa 365; † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ss2015/info2/handouts/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/handouts/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ss2017/info2/handouts/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/handouts/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ss2020/info2/misc/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/misc/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ss2024/info2/misc/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/misc/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ws2018/info2/misc/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/misc/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 - Euclid Handout</title><link>https://bkleinen.github.io/classes/ws2021/info2/misc/euclid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/misc/euclid/</guid><description>Euclid of Alexandria( Greek:Εὐκλείδης, Euclides; * ca. 365 † 275 BC) was a Greek mathematician, now known as &amp;ldquo;the father of geometry&amp;rdquo;. His most famous work is Elements, widely considered to be history&amp;rsquo;s most successful textbook. Within it, the properties of geometrical objects and integers are deduced from a small set of axioms, thereby anticipating (and partly inspiring) the axiomatic method of modern mathematics.1
Elements: Book VII, Proposition 2: To find the greatest common measure of two given numbers not relatively prime.</description></item><item><title>Info2 Questions &amp; Answers Sommersemester 2015</title><link>https://bkleinen.github.io/classes/ss2015/info2/quame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/quame/</guid><description>Questions See [https://ba-thesis.herokuapp.com/questions]({{ site.BaseURL }}/miscellany/grasp/questions)
Ask new questions here: [https://ba-thesis.herokuapp.com/questions]({{ site.BaseURL }}/miscellany/grasp/questions)
Answers ##Question #11 This question was asked on May 29, 2015 22:29.
Ich habe ein Problem mit der Anpassung des Dreiecks an die Fenstergröße, dies soll entweder abhängig von der Höhe oder der Breite von Dreieck und Fenster geschehen. Das Problem ist nun, dass sich das Dreieck entweder nicht wirklich proportional der Fenstergröße anpasst, oder sich die Seitenverhältnisse ändern, sodass die Grundseite kürzer erscheint als die zum oberen Punkt führenden Seiten.</description></item><item><title>Info2 SoSe 2020 Schedule</title><link>https://bkleinen.github.io/classes/ss2020/info2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/schedule/</guid><description>Tentative Schedule. Material for flipped remote classrooms is provided the week before. The overall topic of Info2 is Algorithms &amp;amp; Data Structures. We&amp;rsquo;ll go through 8 broader Topics during the term:
Topic 01: Object Oriented Design Topic 02: Java Fundamentals and Repetition Topic 03: Properties of Algorithms Topic 04: Data Structures Topic 05: Sorting Topic 06: Searching Topic 07: Theoretical Foundations Topic 08: Python Week KW Lecture Quizz Topic Lecture Lab # Lab Topic 1 14 Thu 02/04/2020 &amp;mdash; No lectures in the first week &amp;mdash; &amp;mdash; No labs in the first week &amp;mdash; 2 15 Tue 07/04/2020 01 Welcome Back, Overview, Designing Applications 1 Designing an Application, CRC Cards (Pre-Lab!</description></item><item><title>Info2 SS2014 Schedule</title><link>https://bkleinen.github.io/classes/ss2014/info2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/schedule/</guid><description>Stand: 1.4.2014
Week KW Lab (Group1) Lecture Wed Lecture Fri - Lecture Topic Lab No Lab Topic 1 14 04/02/2014 &amp;ldquo;Welcome Back, Overview, Toolbox: Java, Eclipse, GIT&amp;rdquo; 04/04/2014 &amp;ldquo;Designing Applications&amp;rdquo; 2 15 04/08/2014 1 &amp;ldquo;Designing an Application, CRC Cards &amp;amp; Toolbox&amp;rdquo; 04/09/2014 &amp;ldquo;Error Handling and Exceptions&amp;rdquo; 04/11/2014 &amp;ldquo;Networking in Java. File I/O. Eclipse.&amp;rdquo; 3 16 04/15/2014 2 &amp;ldquo;Implementing CRC cards (Pre-Lab!)&amp;rdquo; 04/16/2014 &amp;ldquo;Java 8 - Lambdas&amp;rdquo; 04/18/2014 &amp;ldquo;Properties of Algorithms&amp;rdquo; 4 17 04/22/2014 3 &amp;ldquo;Chatterbox (Pre-Lab!</description></item><item><title>Info2 SS2017 Klausurfragen</title><link>https://bkleinen.github.io/classes/ss2017/info2/klausurfragen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/klausurfragen/</guid><description>Klausurfragen gesammelt am 18.7.2017
001-info2-application-development keine gesammelt
002-info2-Tooling keine gesammelt
003-info2-networking-fileio-exceptions &amp;hellip; die API für Datei öffnen müssen Sie nicht auswendig kennen.
Programmieraufgabe: Datei öffnen und etwas mit der Datei machen etwas in Datei reinschreiben 004-info2-concurrency &amp;hellip; das kommt erst in Info3 dran :) :
selbst Thread implementieren Deadlock in Programm mit Threads finden 005-info2-algorithms Wie ist der Aufwand eines gegebenen Algorithmus? 006-info2-lists was ist die Komplexität für folgende Operationen für ArrayList und LinkedList?</description></item><item><title>Info2 SS2017 Klausurfragen</title><link>https://bkleinen.github.io/classes/ss2020/info2/misc/klausurfragen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/misc/klausurfragen/</guid><description>Klausurfragen gesammelt am 18.7.2017
001-info2-application-development keine gesammelt
002-info2-Tooling keine gesammelt
003-info2-networking-fileio-exceptions &amp;hellip; die API für Datei öffnen müssen Sie nicht auswendig kennen.
Programmieraufgabe: Datei öffnen und etwas mit der Datei machen etwas in Datei reinschreiben 004-info2-concurrency &amp;hellip; das kommt erst in Info3 dran :) :
selbst Thread implementieren Deadlock in Programm mit Threads finden 005-info2-algorithms Wie ist der Aufwand eines gegebenen Algorithmus? 006-info2-lists was ist die Komplexität für folgende Operationen für ArrayList und LinkedList?</description></item><item><title>Info2 SS2017 Klausurfragen</title><link>https://bkleinen.github.io/classes/ss2024/info2/misc/klausurfragen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/misc/klausurfragen/</guid><description>Klausurfragen gesammelt am 18.7.2017
001-info2-application-development keine gesammelt
002-info2-Tooling keine gesammelt
003-info2-networking-fileio-exceptions &amp;hellip; die API für Datei öffnen müssen Sie nicht auswendig kennen.
Programmieraufgabe: Datei öffnen und etwas mit der Datei machen etwas in Datei reinschreiben 004-info2-concurrency &amp;hellip; das kommt erst in Info3 dran :) :
selbst Thread implementieren Deadlock in Programm mit Threads finden 005-info2-algorithms Wie ist der Aufwand eines gegebenen Algorithmus? 006-info2-lists was ist die Komplexität für folgende Operationen für ArrayList und LinkedList?</description></item><item><title>Info2 SS2017 Klausurfragen</title><link>https://bkleinen.github.io/classes/ws2018/info2/misc/klausurfragen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/misc/klausurfragen/</guid><description>Klausurfragen gesammelt am 18.7.2017
001-info2-application-development keine gesammelt
002-info2-Tooling keine gesammelt
003-info2-networking-fileio-exceptions &amp;hellip; die API für Datei öffnen müssen Sie nicht auswendig kennen.
Programmieraufgabe: Datei öffnen und etwas mit der Datei machen etwas in Datei reinschreiben 004-info2-concurrency &amp;hellip; das kommt erst in Info3 dran :) :
selbst Thread implementieren Deadlock in Programm mit Threads finden 005-info2-algorithms Wie ist der Aufwand eines gegebenen Algorithmus? 006-info2-lists was ist die Komplexität für folgende Operationen für ArrayList und LinkedList?</description></item><item><title>Info2 SS2017 Klausurfragen</title><link>https://bkleinen.github.io/classes/ws2021/info2/misc/klausurfragen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/misc/klausurfragen/</guid><description>Klausurfragen gesammelt am 18.7.2017
001-info2-application-development keine gesammelt
002-info2-Tooling keine gesammelt
003-info2-networking-fileio-exceptions &amp;hellip; die API für Datei öffnen müssen Sie nicht auswendig kennen.
Programmieraufgabe: Datei öffnen und etwas mit der Datei machen etwas in Datei reinschreiben 004-info2-concurrency &amp;hellip; das kommt erst in Info3 dran :) :
selbst Thread implementieren Deadlock in Programm mit Threads finden 005-info2-algorithms Wie ist der Aufwand eines gegebenen Algorithmus? 006-info2-lists was ist die Komplexität für folgende Operationen für ArrayList und LinkedList?</description></item><item><title>Info2 SS2017 Schedule</title><link>https://bkleinen.github.io/classes/ss2017/info2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/schedule/</guid><description>Tentative Schedule - Lab Topics are subject to change! Lab Assignments not linked here have not released for this term yet and might be changed.
Week KW Lecture Lecture Topic Group Lab Lab Topic 1 14 Tue, 2017-04-04 Welcome Back, Overview, Designing Applications Group 2 1 Designing an Application, CRC Cards (Pre-Lab!) Fri, 2017-04-07 Toolbox: Java, Eclipse Group 1 1 Designing an Application, CRC Cards (Pre-Lab!) 2 15 Tue, 2017-04-11 Error Handling and Exceptions reviewed Group 2 2 Implementing CRC cards (Pre-Lab!</description></item><item><title>Info2 WS2018 Schedule</title><link>https://bkleinen.github.io/classes/ws2018/info2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/schedule/</guid><description>Tentative Schedule - Lab Topics are subject to change! Lab Assignments not linked here have not been released for this term yet and might be changed.
Week KW Lecture Lecture Topic Lab Lab Topic 1 39 Fri, 2018-10-05 I Welcome Back, Overview, Designing Applications 1 Designing an Application, CRC Cards (Pre-Lab!) II Toolbox: Java, Eclipse File I/O. 2 40 Fri, 2018-10-12 I Error Handling and Exceptions reviewed 2 Implementing CRC cards (Pre-Lab!</description></item><item><title>Info2 WS2018 Topics and Grading</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading/</guid><description>With questions
Sum: 115% - There might be questions that count in two categories - eg. the Complexity of a searching algorithm.
115 Lecture Topic 10 Properties, especially Complexity of Algorithms 20 Abstract Data Types / Data Structures - Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees, AVL Trees - The Java Collection Framework 15 Graphs and Graph Algorithms Graph Data Structure Graph Algorithms: Breath-First and Depth-First Search paths Dijkstra: cheapest path between start and end 20 2-3 aus: File I/O andNetworking in Java (Sockets) Maximum Contiguous Subsequence Sum Concurrency Rekursion Divide &amp;amp; Conquer Random numbers, Probabilistic Algorithms Finite State Automata (Grammars) 25 Sorting: pseudocode / in worten beschreiben oder daran erkennen, manual - Radixsort l * n - Mergesort n log n - Quicksort n log n - Heapsort n log n - Insertion Sort - Bogo Sort - Selection Sort - Cocktail Shaker 15 Searching and String Searching - Binary Search - Linear Search - String Searching - KMP (Skip Searching) 10 Python Draft done in class 4.</description></item><item><title>Info2 WS2018 Topics and Grading</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading_questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading_questions/</guid><description>Sum: 115% - There might be questions that count in two categories - eg. the Complexity of a searching algorithm.
115 Lecture Topic A 10 Properties, especially Complexity of Algorithms B 20 Abstract Data Types / Data Structures - Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees, AVL Trees - The Java Collection Framework C 15 Graphs and Graph Algorithms Graph Data Structure Graph Algorithms: Breath-First and Depth-First Search paths Dijkstra: cheapest path between start and end D 20 2-3 aus: File I/O andNetworking in Java (Sockets) Maximum Contiguous Subsequence Sum Concurrency Rekursion Divide &amp;amp; Conquer Random numbers, Probabilistic Algorithms Finite State Automata (Grammars) E 25 Sorting: pseudocode / in worten beschreiben oder daran erkennen, manual - Radixsort l * n - Mergesort n log n - Quicksort n log n - Heapsort n log n - Insertion Sort - Bogo Sort - Selection Sort - Cocktail Shaker F 15 Searching and String Searching - Binary Search - Linear Search - String Searching - KMP (Skip Searching) G 10 Python Draft done in class 4.</description></item><item><title>Info2 WS2018 Topics and Grading</title><link>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading/</guid><description>With questions
Sum: 115% - There might be questions that count in two categories - eg. the Complexity of a searching algorithm.
115 Lecture Topic 10 Properties, especially Complexity of Algorithms 20 Abstract Data Types / Data Structures - Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees, AVL Trees - The Java Collection Framework 15 Graphs and Graph Algorithms Graph Data Structure Graph Algorithms: Breath-First and Depth-First Search paths Dijkstra: cheapest path between start and end 20 2-3 aus: File I/O andNetworking in Java (Sockets) Maximum Contiguous Subsequence Sum Concurrency Rekursion Divide &amp;amp; Conquer Random numbers, Probabilistic Algorithms Finite State Automata (Grammars) 25 Sorting: pseudocode / in worten beschreiben oder daran erkennen, manual - Radixsort l * n - Mergesort n log n - Quicksort n log n - Heapsort n log n - Insertion Sort - Bogo Sort - Selection Sort - Cocktail Shaker 15 Searching and String Searching - Binary Search - Linear Search - String Searching - KMP (Skip Searching) 10 Python Draft done in class 4.</description></item><item><title>Info2 WS2018 Topics and Grading</title><link>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading_questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading_questions/</guid><description>Sum: 115% - There might be questions that count in two categories - eg. the Complexity of a searching algorithm.
115 Lecture Topic A 10 Properties, especially Complexity of Algorithms B 20 Abstract Data Types / Data Structures - Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees, AVL Trees - The Java Collection Framework C 15 Graphs and Graph Algorithms Graph Data Structure Graph Algorithms: Breath-First and Depth-First Search paths Dijkstra: cheapest path between start and end D 20 2-3 aus: File I/O andNetworking in Java (Sockets) Maximum Contiguous Subsequence Sum Concurrency Rekursion Divide &amp;amp; Conquer Random numbers, Probabilistic Algorithms Finite State Automata (Grammars) E 25 Sorting: pseudocode / in worten beschreiben oder daran erkennen, manual - Radixsort l * n - Mergesort n log n - Quicksort n log n - Heapsort n log n - Insertion Sort - Bogo Sort - Selection Sort - Cocktail Shaker F 15 Searching and String Searching - Binary Search - Linear Search - String Searching - KMP (Skip Searching) G 10 Python Draft done in class 4.</description></item><item><title>Info2 WS2018 Topics and Grading Draft</title><link>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading_class_draft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/material/topics_and_grading_class_draft/</guid><description>This is just the draft!! see the final version
Rough Overview: Percent and Topic Properties(Complexity) of Algorithms
10-15 Abstract Data Types / Data Structures
Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees The Java Collection Framework 10 Graphs
Graph Algorithms: Breath-First and Depth-First Search Dijkstra: cheapest path between start and end 10 Complexity of Algorithms Maximum Contiguous Subsequence Sum
File I/O 5 Networking in Java (Sockets)
Concurrency 5 Rekursion</description></item><item><title>Info2 WS2018 Topics and Grading Draft</title><link>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading_class_draft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/material/topics_and_grading_class_draft/</guid><description>This is just the draft!! see the final version
Rough Overview: Percent and Topic Properties(Complexity) of Algorithms
10-15 Abstract Data Types / Data Structures
Queue, Stack, List, Set, Directory/Map, Bags, Trees, Binary Search Trees The Java Collection Framework 10 Graphs
Graph Algorithms: Breath-First and Depth-First Search Dijkstra: cheapest path between start and end 10 Complexity of Algorithms Maximum Contiguous Subsequence Sum
File I/O 5 Networking in Java (Sockets)
Concurrency 5 Rekursion</description></item><item><title>Info2: Exercise 00:</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-14/</guid><description>Pre-Lab Assignment Lab Report / What to turn in Your report is due by 23:00 am the night before your next lab. Submit a Report in PDF Format and the Source Code as Zipped file.
As in Informatics 1, I am more interested in process than in product, although we are now getting more interested in products as well. Your report should include any collaborators on top of the first page, summarize what you learned, and note the time you invested in this exercise.</description></item><item><title>Info2: Exercise 00:</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-14/</guid><description>Pre-Lab Assignment Lab Report / What to turn in Your report is due the day before your next lab (for exact times, please refer to moodle).
Submit a Report in PDF Format and the Source Code as Zipped file.
As in Informatics 1, I am more interested in process than in product, although we are now getting more interested in products as well. Your report should include any collaborators on top of the first page, summarize what you learned, and note the time you invested in this exercise.</description></item><item><title>Info2: Exercise 00:</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-14/</guid><description>Pre-Lab Assignment Lab Report / What to turn in Your report is due the day before your next lab (for exact times, please refer to moodle).
Submit a Report in PDF Format and the Source Code as Zipped file.
As in Informatics 1, I am more interested in process than in product, although we are now getting more interested in products as well. Your report should include any collaborators on top of the first page, summarize what you learned, and note the time you invested in this exercise.</description></item><item><title>Info2: Exercise 00:</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-14/</guid><description>Pre-Lab Assignment Lab Report / What to turn in Your report is due the day before your next lab (for exact times, please refer to moodle).
Submit a Report in PDF Format and the Source Code as Zipped file.
As in Informatics 1, I am more interested in process than in product, although we are now getting more interested in products as well. Your report should include any collaborators on top of the first page, summarize what you learned, and note the time you invested in this exercise.</description></item><item><title>Info2: Exercise 00:</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-14/</guid><description>Pre-Lab Assignment Lab Report / What to turn in Your report is due the day before your next lab (for exact times, please refer to moodle).
Submit a Report in PDF Format and the Source Code as Zipped file.
As in Informatics 1, I am more interested in process than in product, although we are now getting more interested in products as well. Your report should include any collaborators on top of the first page, summarize what you learned, and note the time you invested in this exercise.</description></item><item><title>Info2: Exercise 00: Programming &amp; Tools</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-00/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements
I am familiar with programming in IntelliJ:
I can create a new Java project in IntelliJ I remember most of the concepts from A1 Ex1 I can run my new Java project in IntelliJ I am ready to use Git:
I can clone an online repository I can create an empty repository on GitLab I can update my local repository&amp;rsquo;s remotes I can add changes to be committed I can commit changes I can push changes Pre-Lab (Do this BEFORE the lab) 1.</description></item><item><title>Info2: Exercise 01: Application Design</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-01/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Info2: Exercise 01: Application Design</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-01/</guid><description>Pre-Lab Remember to do all the necessary steps listed on the Labs page, including the following exercises:
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Find out what the Class-Responsibility-Collaboration Card method is, what the use of CRC Cards is and how they are created.</description></item><item><title>Info2: Exercise 01: Application Design</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-01/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Info2: Exercise 01: Application Design</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-01/</guid><description>CRC Cards
Learning Goals After this lab you should be able to agree with each of the following statements.
I can use CRC Cards to design an application:
Using the underline methods, I can identify candidates for classes, methods and fields. By working through scenarios I can identify cases where a class needs to be split up. By working through scenarios I can identify cases where classes need to be merged.</description></item><item><title>Info2: Exercise 01: Dealing with Objects and Toolbox</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-01/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Info2: Exercise 01: Dealing with Objects and Toolbox</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-01/</guid><description>Pre-Lab Please bring these exercises P1 and P2 printed out or written out with you to lab. Please have your name on your page.
P1. How do you obtain tickets to go see a movie? Write down the steps that you take, in order.
P2. If you have tickets and have to cancel, what do you have to do? Write down the steps, in order.
P3. Read up on the Class-Responsibility-Collaboration Card method (CRC Cards).</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-02/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
This exercise builds on the design you did last week using CRC cards. What properties should a data structure have that can model movie theater seats? Given an n x m matrix and a cell c in (r, c). How do I reference the neighboring cells in the same row?</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-02/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
This exercise builds on the design you did last week using CRC cards. What properties should a data structure have that can model movie theater seats? Given an n x m matrix and a cell c in (r, c). How do I reference the neighboring cells in the same row?</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-02/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
This exercise builds on the design you did last week using CRC cards. What properties should a data structure have that can model movie theater seats? Given an n x m matrix and a cell c in (r, c). How do I reference the neighboring cells in the same row?</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-02/</guid><description>Pre-Lab This exercise builds on the design you did last week using CRC cards. Please think through the following questions together with your team before coming to the lab and write down your answers somewhere.
P1. What properties should a data structure have that can model movie theater seats?
P2. Given an n x m matrix and a cell c in (r, c). How do I reference the neighboring cells in the same row?</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-02/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
This exercise builds on the design you did last week using CRC cards. What properties should a data structure have that can model movie theater seats? Given an n x m matrix and a cell c in (r, c). How do I reference the neighboring cells in the same row?</description></item><item><title>Info2: Exercise 02: Implementing CRC Cards</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-02/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements. This looks like a lot, but it is all repetition from what you learned in Info1. Ideally you agree with each statement even before starting the lab.
I remember programming concepts concerning classes and objects:
I know the difference between classes and objects. I can instantiate an object. I remember programming concepts concerning fields and variable types:</description></item><item><title>Info2: Exercise 03: Chatterbox</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-03/</guid><description>Pre-Lab Please research the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in. There are many sites that will show you the code for this.
How do you set up a connection between two computers in Java? Write a method to read from a connection in Java. Write a method to write to a connection in Java. Assignment These are the required exercises for this week.</description></item><item><title>Info2: Exercise 03: Chatterbox</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-03/</guid><description>Pre-Lab Please research the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in. There are many sites that will show you the code for this.
How do you set up a connection between two computers in Java? Write a method to read from a connection in Java. Write a method to write to a connection in Java. How do you create concurrent threads?</description></item><item><title>Info2: Exercise 03: Histogram</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-03/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
In some programming languages, such as Ada, you can define an array of characters with any discrete type as the index:
someArray : ARRAY ['A' .. 'Z'] of INTEGER; You can then access the array, for example, using a value of character type: someArray[&amp;lsquo;T&amp;rsquo;]. Java does not have this feature.</description></item><item><title>Info2: Exercise 03: Histogram</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-03/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and be prepared to answer them in class.
P1. In some programming languages, such as Ada, you can define an array of characters with any discrete type as the index:
someArray : ARRAY ['A' .. 'Z'] of INTEGER; You can then access the array, for example, using a value of character type: someArray[&amp;lsquo;T&amp;rsquo;]. Java does not have this feature.</description></item><item><title>Info2: Exercise 03: Histogram</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-03/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
In some programming languages, such as Ada, you can define an array of characters with any discrete type as the index:
someArray : ARRAY ['A' .. 'Z'] of INTEGER; You can then access the array, for example, using a value of character type: someArray[&amp;lsquo;T&amp;rsquo;]. Java does not have this feature.</description></item><item><title>Info2: Exercise 03: Histogram</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-03/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can handle File-based IO with Java:
I can read from a text file using a Reader, eg. BufferedReader. I can write to a text file using a Writer, eg. BufferedWriter. I close my streams after I finished reading or writing. I can use try-with-resources to make sure that in the end, a resource is always closed I can handle Exceptions:</description></item><item><title>Info2: Exercise 04: Chatterbox</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-04/</guid><description>not yet released.
Pre-Lab Please research/review the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in. There are many sites that will show you the code for this.
How do you set up a connection with Sockets between two computers in Java? Write a method to read from a connection in Java. Write a method to write to a connection in Java.</description></item><item><title>Info2: Exercise 04: Chatterbox</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-04/</guid><description>Pre-Lab Write down the code for the following questions and be able to explain what is happening.
P1. How do you set up a connection with Sockets between two computers in Java?
P2. Write a method to read from a connection in Java.
P3. Write a method to write to a connection in Java.
P4. How do you create concurrent threads?
Assignment Step 1: Client sends messages to Server Start your chatterbox by writing a method that listens for a Socket connection on a port.</description></item><item><title>Info2: Exercise 04: Chatterbox</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-04/</guid><description>Pre-Lab Please research/review the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in. There are many sites that will show you the code for this.
How do you set up a connection with Sockets between two computers in Java? Write a method to read from a connection in Java. Write a method to write to a connection in Java. How do you create concurrent threads?</description></item><item><title>Info2: Exercise 04: Chatterbox</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-04/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can use the Socket API for TCP connections:
I can create a server that listens for and accepts connections I can create a client that makes a connection request to the server I can send text from a client to a server via streams I can send text from a server to a client via streams I can use multithreading to simultaneously process tcp requests and input from the user (if you do the &amp;ldquo;for the bored&amp;rdquo; part: I can use multithreading for the server to handle multiple connection requests) Pre-Lab Write down the code for the following questions and be able to explain what is happening.</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-05/</guid><description>Pre-Lab Please have these completed before coming to the lab. BTW, I like questions like this on the exam&amp;hellip;
Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N2 , respectively. Answer the following questions, if possible:
Which program has the better guarantee on the running time for large values of N (N &amp;gt; 10 000)?
Which program has the better guarantee on the running time for small values of N (N &amp;lt; 100)?</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-05/</guid><description>Pre-Lab Please have these completed before coming to the lab. BTW, I like questions like this on the exam&amp;hellip;
Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N2, respectively. Answer the following questions, if possible:
Which program has the better guarantee on the running time for large values of N (N &amp;gt; 10 000)?
Which program has the better guarantee on the running time for small values of N (N &amp;lt; 100)?</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-05/</guid><description>Pre-Lab Please have these completed before coming to the lab. BTW, I like questions like this on the exam&amp;hellip;
Part 1 Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N2, respectively. Answer the following questions, if possible:
Which program has the better guarantee on the running time for large values of N (N &amp;gt; 10 000)? Which program has the better guarantee on the running time for small values of N (N &amp;lt; 100)?</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-05/</guid><description>Pre-Lab P1. Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N2, respectively. Answer the following questions, if possible:
a) Which program has the better guarantee on the running time for large values of N (N &amp;gt; 10 000)?
b) Which program has the better guarantee on the running time for small values of N (N &amp;lt; 100)?</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-05/</guid><description>Pre-Lab Please have these completed before coming to the lab. BTW, I like questions like this on the exam&amp;hellip;
Part 1 Programs A and B are analyzed and are found to have worst-case running times no greater than 150 N log N and N2, respectively. Answer the following questions, if possible:
Which program has the better guarantee on the running time for large values of N (N &amp;gt; 10 000)? Which program has the better guarantee on the running time for small values of N (N &amp;lt; 100)?</description></item><item><title>Info2: Exercise 05: Execution times</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-05/</guid><description>Learning Goals After this lab you should be able to agree with each of the following statements.
I can evaluate the efficiency of algorithms:
I understand the correlation between input and running time for different program structures I can use big-o-notation to describe the running time of algorithms I can calculate the running time of algorithms by adding up running times of different structures I can compare running times based on their running time in big-o-notation Pre-Lab P1.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-06/</guid><description>Pre-Lab Make sure that you understand postfix evaluation.
Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation. To get your brain in gear, convert the following expressions to RPN! What are the values of the expressions?
1. &amp;lt;tt&amp;gt;1 * 2 + 3 &amp;lt;/tt&amp;gt; 2. &amp;lt;tt&amp;gt;1 + 2 * 3 &amp;lt;/tt&amp;gt; 3. &amp;lt;tt&amp;gt;1 + 2 - 3 ^ 4&amp;lt;/tt&amp;gt; 4. &amp;lt;tt&amp;gt;1 ^ 2 - 3 * 4&amp;lt;/tt&amp;gt; 5.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-06/</guid><description>Pre-Lab Make sure that you understand postfix evaluation.
Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation. To get your brain in gear, convert the following expressions to RPN! What are the values of the expressions?
1. &amp;lt;tt&amp;gt;1 * 2 + 3 &amp;lt;/tt&amp;gt; 2. &amp;lt;tt&amp;gt;1 + 2 * 3 &amp;lt;/tt&amp;gt; 3. &amp;lt;tt&amp;gt;1 + 2 - 3 ^ 4&amp;lt;/tt&amp;gt; 4. &amp;lt;tt&amp;gt;1 ^ 2 - 3 * 4&amp;lt;/tt&amp;gt; 5.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-06/</guid><description>Pre-Lab Make sure that you understand postfix evaluation.
Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation. To get your brain in gear, convert the following expressions to RPN! What are the values of the expressions?
1. 1 * 2 + 3 2. 1 + 2 * 3 3. 1 + 2 - 3 ^ 4 4. 1 ^ 2 - 3 * 4 5.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-06/</guid><description>Pre-Lab P1. Make sure that you understand postfix evaluation. If you do the complete Pre-Lab you will be able to understand the algorithms given in the hand out.
P2. What is the order of precedence for the operators &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;rdquo;, &amp;ldquo;*&amp;rdquo;, &amp;ldquo;/&amp;rdquo;, &amp;ldquo;^&amp;rdquo;? If we wanted to include &amp;ldquo;(&amp;rdquo; and &amp;ldquo;)&amp;rdquo; in this order, where would each of them be?
P3. Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-06/</guid><description>Pre-Lab Make sure that you understand postfix evaluation.
Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation. To get your brain in gear, convert the following expressions to RPN! What are the values of the expressions?
1. 1 * 2 + 3 2. 1 + 2 * 3 3. 1 + 2 - 3 ^ 4 4. 1 ^ 2 - 3 * 4 5.</description></item><item><title>Info2: Exercise 06: Reverse Polish Notation</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06/</guid><description>Pre-Lab P1. Make sure that you understand postfix evaluation. If you do the complete Pre-Lab you will be able to understand the algorithms given in the hand out.
P2. What is the order of precedence for the operators &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;rdquo;, &amp;ldquo;*&amp;rdquo;, &amp;ldquo;/&amp;rdquo;, &amp;ldquo;^&amp;rdquo;? If we wanted to include &amp;ldquo;(&amp;rdquo; and &amp;ldquo;)&amp;rdquo; in this order, where would each of them be?
P3. Łukasiewicz was a Polish logician, so his notation for parentheses-free expressions is often called Reverse Polish Notation.</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-07/</guid><description>Pre-Lab What exactly is an equilateral triangle? Can you write a class that draws a triangle? What data do you need to know in order to put a triangle at a particular position on the screen?
What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-07/</guid><description>Pre-Lab What exactly is an equilateral triangle? Can you write a class that draws a triangle? What data do you need to know in order to put a triangle at a particular position on the screen?
What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-07/</guid><description>Pre-Lab What exactly is an equilateral triangle? Can you write a class that draws a triangle? What data do you need to know in order to put a triangle at a particular position on the screen?
What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-07/</guid><description>Pre-Lab P1. What exactly is an equilateral triangle? Can you write a class that draws a triangle? What data do you need to know in order to put a triangle at a particular position on the screen?
P2. What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
P3. What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-07/</guid><description>Pre-Lab What exactly is an equilateral triangle? Can you write a class that draws a triangle? What data do you need to know in order to put a triangle at a particular position on the screen?
What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 07: Recursive Triangles</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-07/</guid><description>Pre-Lab P1. What exactly is an equilateral triangle? Draft a class that draws a triangle. What data do you need to know in order to put a triangle at a particular position on the screen?
P2. What is the mathematical formula for finding the midpoint of a line segment that connects two Points?
P3. What is the resolution of your computer screen? How can you find out? What is the largest equilateral triangle that you can show on a screen with this resolution?</description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-08/</guid><description>Pre-Lab This is one of the standard exercises that all computer science students have to solve at least once in their lifetimes! If you have never played chess, find someone who does or find a book and look up how a Queen moves and threatens in chess. Find out what a chess board looks like. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.</description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-08/</guid><description>Pre-Lab This is one of the standard exercises that all computer science students have to solve at least once in their lifetimes! If you have never played chess, find someone who does or find a book and look up how a Queen moves and threatens in chess. Find out what a chess board looks like. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.</description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-08/</guid><description>Pre-Lab P1. Make a chess board and mark how a Queen moves and threatens.
P2. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.
P3. Given two cells in a matrix, (r1, c1) and (r2, c2). How can you determine if a) the cells are in the same row? b) the cells are in the same column? c) the cells are in the same ascending diagonal (lower left to upper right)?</description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-08/</guid><description>Pre-Lab This is one of the standard exercises that all computer science students have to solve at least once in their lifetimes! If you have never played chess, find someone who does or find a book and look up how a Queen moves and threatens in chess. Find out what a chess board looks like. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.</description></item><item><title>Info2: Exercise 08: Eight Queens</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-08/</guid><description>Pre-Lab P1. Make a chess board and mark how a Queen moves and threatens.
P2. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.
P3. Given two cells in a matrix, (r1, c1) and (r2, c2). How can you determine if a) the cells are in the same row? b) the cells are in the same column? c) the cells are in the same ascending diagonal (lower left to upper right)?</description></item><item><title>Info2: Exercise 08: Multi-Threaded Chat Application</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-08/</guid><description>Pre-Lab Experiment with the Source Code Examples for Concurrency.
Do a Class Design for your Chat Application: Don&amp;rsquo;t put all of the Server in one and all of the Client in another class; design small classes with one responsibility and small methods. Especially the user interface should not be intermingled with the rest of the application.
Assignment: Multi-Threaded Chat This builds on Assignment 3, Chatterbox, where you built a little Chat Application that was only able to handle one connection from one client.</description></item><item><title>Info2: Exercise 08: Multi-Threaded Chat Application</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-08-chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-08-chat/</guid><description>Pre-Lab Experiment with the Source Code Examples for Concurrency.
Do a Class Design for your Chat Application: Don&amp;rsquo;t put all of the Server in one and all of the Client in another class; design small classes with one responsibility and small methods. Especially the user interface should not be intermingled with the rest of the application.
Assignment: Multi-Threaded Chat This builds on Assignment 3, Chatterbox, where you built a little Chat Application that was only able to handle one connection from one client.</description></item><item><title>Info2: Exercise 08: Multi-Threaded Chat Application</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-08-chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-08-chat/</guid><description>Pre-Lab Experiment with the Source Code Examples for Concurrency.
Do a Class Design for your Chat Application: Don&amp;rsquo;t put all of the Server in one and all of the Client in another class; design small classes with one responsibility and small methods. Especially the user interface should not be intermingled with the rest of the application.
Assignment: Multi-Threaded Chat This builds on Assignment 3, Chatterbox, where you built a little Chat Application that was only able to handle one connection from one client.</description></item><item><title>Info2: Exercise 08: Multi-Threaded Chat Application</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-08-chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-08-chat/</guid><description>Pre-Lab Experiment with the Source Code Examples for Concurrency.
Do a Class Design for your Chat Application: Don&amp;rsquo;t put all of the Server in one and all of the Client in another class; design small classes with one responsibility and small methods. Especially the user interface should not be intermingled with the rest of the application.
Assignment: Multi-Threaded Chat This builds on Assignment 3, Chatterbox, where you built a little Chat Application that was only able to handle one connection from one client.</description></item><item><title>Info2: Exercise 09: Eight Queens</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-09/</guid><description>Pre-Lab This is one of the standard exercises that all computer science students have to solve at least once in their lifetimes! If you have never played chess, find someone who does or find a book and look up how a Queen moves and threatens in chess. Find out what a chess board looks like. Define a matrix (two-dimensional array) of integers in Java. Write a method to put a -1 in every cell of the matrix.</description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-09/</guid><description>Pre-Lab How do you compute the area of a circle and a rectangle? Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other? How can you represent points in a plane? Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-09/</guid><description>Pre-Lab How do you compute the area of a circle and a rectangle? Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other? How can you represent points in a plane? Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-09/</guid><description>Pre-Lab P1. How do you compute the area of a circle and a rectangle?
P2. Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other?
P3. How can you represent points in a plane?
P4. Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-09/</guid><description>Pre-Lab How do you compute the area of a circle and a rectangle? Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other? How can you represent points in a plane? Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 09: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-09/</guid><description>Pre-Lab P1. How do you compute the area of a circle and a rectangle?
P2. Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other?
P3. How can you represent points in a plane?
P4. Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-10/</guid><description>Pre-Lab Define an abstract data type for a weighted graph. What methods does your ADT need? What are the signatures for the operators? Find algorithms for determining the minimum path and the cheapest path between two nodes in a directed graph. I strongly suggest visiting a library (that is one of these places that keeps ancient books around). There are Algorithm and Data Structure books available in many languages. There is also an example in the Wikipedia, but it is not really easy to understand.</description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-10/</guid><description>S-Bahn Ring generated with https://github.com/bkleinen/bvg-graph based on OpenStreetMap
Pre-Lab Define an interface data type for a weighted graph. What methods does it need? What are the signatures? Read on Depth-First-Search and Dijkstra Algorithm to compute the shortest and cheapest path in a given graph. We&amp;rsquo;ve covered them in class, also. Your algorithm will probably need an adjacency matrix oder an adjacency list as its data structure. Think about how you would implement such a structure, if you only had linked lists available.</description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-10/</guid><description>S-Bahn Ring generated with https://github.com/bkleinen/bvg-graph based on OpenStreetMap
Pre-Lab P1. Define an interface data type for a weighted graph. What methods does it need? What are the signatures?
P2. Read on Depth-First-Search and Dijkstra Algorithm to compute the shortest and cheapest path in a given graph. We&amp;rsquo;ve covered them in class, also.
P3. Your algorithm will probably need an adjacency matrix oder an adjacency list as its data structure. Think about how you would implement such a structure, if you only had linked lists available.</description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-10/</guid><description>S-Bahn Ring generated with https://github.com/bkleinen/bvg-graph based on OpenStreetMap
Pre-Lab Define an interface data type for a weighted graph. What methods does it need? What are the signatures? Read on Depth-First-Search and Dijkstra Algorithm to compute the shortest and cheapest path in a given graph. We&amp;rsquo;ve covered them in class, also. Your algorithm will probably need an adjacency matrix oder an adjacency list as its data structure. Think about how you would implement such a structure, if you only had linked lists available.</description></item><item><title>Info2: Exercise 10: Getting from A to B</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-10/</guid><description>S-Bahn Ring generated with https://github.com/bkleinen/bvg-graph based on OpenStreetMap
Pre-Lab P1. Define an interface data type for a weighted graph. What methods does it need? What are the signatures?
P2. Read up on Depth-First-Search to compute a path in a given graph. Sketch the algorithm on paper. Do you have an idea how you could find the shortest path, instead of just a path?
P3. Read up un Dijkstra Algorithm to compute the shortest path in a given graph.</description></item><item><title>Info2: Exercise 10: Probabilistic Algorithms</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-10/</guid><description>Pre-Lab How do you compute the area of a circle and a rectangle? Draw an circle that matches exactly into a square. How do the areas of the circle and the square relate to each other? How can you represent points in a plane? Prepare a sketch with formulas about the ratio of the areas and how to determine if a given point in the square is as well within the circle.</description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-11/</guid><description>Pre-Lab No Pre-Lab this time.
Assignment Part 1: Finite Automata This is to get some practice with Finite Automata.
Which Languages do these Automata accept? For the following two Finite Automata given by their transition tables, draw the transition diagram and describe the language they accept in English (or German) sentences. Give examples for words in and not in the language.
You find a NFA Simulator in https://github.com/htw-imi-info2/Lab11_DFA. Create Simulations for them with test cases from the words you found.</description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-11-nfa-not-in-ss2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-11-nfa-not-in-ss2017/</guid><description>Pre-Lab No Pre-Lab this time.
Assignment Part 1: Finite Automata This is to get some practice with Finite Automata.
Which Languages do these Automata accept? For the following two Finite Automata given by their transition tables, draw the transition diagram and describe the language they accept in English (or German) sentences. Give examples for words in and not in the language.
You find a NFA Simulator in https://github.com/htw-imi-info2/Lab11_DFA. Create Simulations for them with test cases from the words you found.</description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-11/</guid><description>Pre-Lab P1. What is the difference between an NFA and an DFA?
P2. Which sorting algorithms have you learned about so far? Review their algorithms.
Geeks for Geeks has some helpful explanations, including nice videos. Useful for a quick reminder of the algorithms. Eg. Selection Sort.
Really good more detailed explanations can be found at the Back to Back SWE YouTube Channel:
Insertion Sort Merge Sort Quick Sort Heap Sort Assignment Part 1: Finite Automata This is to get some practice with Finite Automata.</description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-11/</guid><description>Pre-Lab No Pre-Lab this time.
Assignment Part 1: Finite Automata This is to get some practice with Finite Automata.
Which Languages do these Automata accept? For the following two Finite Automata given by their transition tables, draw the transition diagram and describe the language they accept in English (or German) sentences. Give examples for words in and not in the language.
You find a NFA Simulator in https://github.com/htw-imi-info2/Lab11_DFA. Create Simulations for them with test cases from the words you found.</description></item><item><title>Info2: Exercise 11: Finite State Automata and Sorting Algorithms</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-11/</guid><description>Pre-Lab P1. What is the difference between an NFA and an DFA?
P2. Which sorting algorithms have you learned about so far? Review their algorithms.
Geeks for Geeks has some helpful explanations, including nice videos. Useful for a quick reminder of the algorithms. Eg. Selection Sort.
Really good more detailed explanations can be found at the Back to Back SWE YouTube Channel:
Insertion Sort Merge Sort Quick Sort Heap Sort Assignment 1: Finite Automata This is to get some practice with Finite Automata.</description></item><item><title>Info2: Exercise 11: Getting from A to B</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-11/</guid><description>Pre-Lab Define an abstract data type for a weighted graph. What methods does your ADT need? What are the signatures for the operators? Find algorithms for determining the minimum path and the cheapest path between two nodes in a directed graph. I strongly suggest visiting a library (that is one of these places that keeps ancient books around). There are Algorithm and Data Structure books available in many languages. There is also an example in the Wikipedia, but it is not really easy to understand.</description></item><item><title>Info2: Exercise 11: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-11/</guid><description>Foto by Mags_cat
Pre-Lab Review the rules of Scrabble, if you have never played it before. What was a permutation? What would a normalization function for different permutations of characters words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like? How do you determine if two strings are permutations of each other? How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab Review the rules of Scrabble, if you have never played it before. What was a permutation? What would a normalization function for different permutations of characters words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like? How do you determine if two strings are permutations of each other? How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab Review the rules of Scrabble, if you have never played it before. What was a permutation? What would a normalization function for different permutations of characters words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like? How do you determine if two strings are permutations of each other? How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab P1. Review the rules of Scrabble, if you have never played it before.
P2. What is a permutation?
P3. What would a normalization function for different permutations of words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like?
P4. How do you determine if two Strings are permutations of each other?
P5. For the bored: How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab Review the rules of Scrabble, if you have never played it before. What was a permutation? What would a normalization function for different permutations of characters words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like? How do you determine if two strings are permutations of each other? How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 12: Scrabble Cheater - Basic Edition</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-12/</guid><description>Foto by Mags_cat
Pre-Lab P1. Review the rules of Scrabble, if you have never played it before.
P2. What is a permutation?
P3. What would a normalization function for different permutations of words look like? That is, &amp;ldquo;JAVA&amp;rdquo; and &amp;ldquo;VAJA&amp;rdquo; are permutations, what would a normalized permutation look like?
P4. How do you determine if two Strings are permutations of each other?
P5. For the bored: How can you generate all permutations of the characters in a String?</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by storing the Words in a Hash Map, making the lookup of permutations way more efficient.</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by storing the Words in a Hash Map, making the lookup of permutations way more efficient.</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by storing the Words in a Hash Map, making the lookup of permutations way more efficient.</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by finding matches for shorter Words that can be build with your tile rack (method allValidWords()).</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by finding matches for shorter Words that can be build with your tile rack (method allValidWords()).</description></item><item><title>Info2: Exercise 13: Scrabble Cheater - Deluxe</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-13/</guid><description>Pre-Lab Foto by Piotr
What would the exact data structure be for a hash table that stores Strings and chains the collisions? Review the construction of a hash function. Note that you will need prime numbers. Does your isPrime method work? If not, fix it now. Assignment This week we will improve the Scrabble Cheater by finding matches for shorter Words that can be build with your tile rack (method allValidWords()).</description></item><item><title>Info2: Exercise 4: Histogram</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-04/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
In some programming languages, such as Ada, you can define an array of characters with any discrete type as the index:
someArray : ARRAY ['A' .. 'Z'] of INTEGER; You can then access the array, for example, using a value of character type: someArray[&amp;lsquo;T&amp;rsquo;]. Java does not have this feature.</description></item><item><title>Info2: Exercise 4: Histogram</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-04/</guid><description>Pre-Lab Please think through the following questions before coming to the lab. Write down your answers and bring them with you for pre-lab check-in.
In some programming languages, such as Ada, you can define an array of characters with any discrete type as the index:
someArray : ARRAY ['A' .. 'Z'] of INTEGER; You can then access the array, for example, using a value of character type: someArray[&amp;lsquo;T&amp;rsquo;]. Java does not have this feature.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info2/labs/lab-06-handout/</guid><description>##Definitions
Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
##Calculator algorithm
Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) ##Evaluate postfix algorithm##
Given a sequence of tokens s While s is not empty: Let t = next token.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/info2/labs/lab-06-handout/</guid><description>##Definitions
Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
##Calculator algorithm
Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) ##Evaluate postfix algorithm##
Given a sequence of tokens s While s is not empty: Let t = next token.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/info2/labs/lab-06-handout/</guid><description>Definitions Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
Calculator algorithm Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) Evaluate postfix algorithm## Given a sequence of tokens s While s is not empty: Let t = next token.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/labs/lab-06-handout/</guid><description>Definitions Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
Calculator algorithm Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) Convert infix to postfix algorithm Given a sequence of tokens s and a result r While s is not empty: Let t = next token.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/labs/lab-06-handout/</guid><description>Definitions Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
Calculator algorithm Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) Evaluate postfix algorithm## Given a sequence of tokens s While s is not empty: Let t = next token.</description></item><item><title>Info2: Handout for Exercise 6: Infix/Prefix/Postfix</title><link>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06-handout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/labs/lab-06-handout/</guid><description>Definitions Infix: The operator is placed between the two operands: 3 + 5
Prefix: The operator is placed before the two operands: + 3 5
Postfix: The operator is placed after the two operands: 3 5 +
Calculator algorithm Convert infix to postfix Use stack to evaluate postfix Output top of stack (should be the only element) Convert infix to postfix algorithm Given a sequence of tokens s and a result r While s is not empty: Let t = next token.</description></item><item><title>Info3 Schedule (tentative)</title><link>https://bkleinen.github.io/classes/ws2015/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/schedule/</guid><description>Week KW Date Lecturer Lecture Topic Lab Topic 1 41 Thu, 2015-10-08 DWW Intro to Software Engineering Fri, 2015-10-09 DWW Socio-technical Systems and Ethics 1 Case Studies of Ethical Questions 2 42 Thu, 2015-10-15 DWW Software Processes Fri, 2015-10-16 &amp;mdash; no class 1 no lab! whole day for all on 2015-10-09 3 43 Thu, 2015-10-22 DWW Requirements Engineering Fri, 2015-10-23 BK A Requirements Example 2 Use Cases and Class Diagrams 4 44 Thu, 2015-10-29 DWW Requirements Elicitation Fri, 2015-10-30 BK Agile Development 2 Use Cases and Class Diagrams 5 45 Thu, 2015-11-05 DWW System Models (Ch.</description></item><item><title>Info3 Schedule (tentative)</title><link>https://bkleinen.github.io/classes/ws2017/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/schedule/</guid><description>Week KW Date Lecture Topic Lab 1 41 Tue, 2017-10-10 Intro Ruby Intro 1 - Installation, Git and Ruby Wed, 2017-10-11 Source Code Management 2 42 Tue, 2017-10-17 Intro to Info3 1 - Installation, Git and Ruby Wed, 2017-10-18 More Ruby, Pair Programming and Code Review (and some more practical git) 3 43 Tue, 2017-10-24 Process System Modelling and Architectural Design I 2 - Use Cases and Class Diagrams Wed, 2017-10-25 System Modelling and Architectural Design II 4 44 Tue, 2017-10-31 Reformationstag (no lab) Wed, 2017-11-01 Requirements Engineering 5 45 Tue, 2017-11-07 no lecture Wed, 2017-11-08 no lecture 6 46 Tue, 2017-11-14 Software Engineering and Software Development Processes 3 - Sequence Diagrams and State Machine Diagrams Wed, 2017-11-15 Software Design Patterns 7 47 Wed, 2017-11-22 Software Testing 3 - Sequence Diagrams and State Machine Diagrams Fri, 2017-11-24 Architecture Agile Development, Agile Manifesto, Scrum 8 48 Tue, 2017-11-28 Application Architectures 4 - Testing Wed, 2017-11-29 Rails I 9 49 Tue, 2017-12-05 Patterns of Enterprise Application Architecture (POEAA) 4 - Testing Wed, 2017-12-06 Practices Refactoring, Working with Legacy Code 10 50 Wed, 2017-12-13 SOLID Principles, Refactoring to Patterns 5 - Legacy Code - Refactoring to Patterns Fri, 2017-12-15 Software Processes 11 51 Tue, 2017-12-19 Clean Code (Doppelstunde) 5 - Legacy Code - Refactoring to Patterns Wed, 2017-12-20 Rails II, Models and Preparation for the Rails Project 12 1 Tue, 2018-01-02 Practical Rails III, POEAA Revisited, Model View Controller 6 - Rails First Steps Wed, 2018-01-03 Application ORM and Associations in Rails 13 2 Tue, 2018-01-09 in Rails Internationalization and Localization 6 - Rails First Steps Wed, 2018-01-10 OO In Depth 1: Composition and Inheritance 14 3 Tue, 2018-01-16 OO in Depth OO In Depth 2: Ruby Dynamic Typing, Duck Typing 7 - Rails Associations and Internationalization Wed, 2018-01-17 Dependency Management, Build Management, Continuous Integration &amp;amp; Deployment 15 4 Tue, 2018-01-23 Managing Delivery Software Engineering and Software Development Processes revisited Trial Exam and Extra Quizz for those who missed one Wed, 2018-01-24 Exam Preparation 16 5 Tue, 2018-01-30 Exam Exam Wed, 2018-01-31 No Lecture (Prüfungszeit) Fri, 2018-02-02 Showtime !</description></item><item><title>Info3 Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2020/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/schedule/</guid><description>On the dates marked with &amp;ldquo;Präsenz&amp;rdquo; the lecture will be held in WH-C 349 as a hybrid lecture. It will be possible to attend via Zoom as well.
System Modelling and Architectural Design II
Week KW Date Lecture Topic Lab (Thursdays) 0 40 Fri 02/10/2020 Introduction to JavaScript (Linda Fernsel) 1 41 Wed 07/10/2020 Introduction to JavaScript (Linda Fernsel) 1 - Installation, Git and Javascript Fri 09/10/2020 Intro to Info3 2 42 Wed 14/10/2020 Software Engineering and Software Development Processes, Agile Development 1 - Installation, Git and Javascript Fri 16/10/2020 UML &amp;amp; System Modeling: Requirements, Use Cases and User Stories 3 43 Wed 21/10/2020 UML &amp;amp; System Modeling 2 - Use Cases and Class Diagrams (Barne Kleinen) Fri 23/10/2020 UML &amp;amp; System Modeling 4 44 Wed 28/10/2020 Requirement Engineering 2 - Use Cases and Class Diagrams Fri 30/10/2020 Product Owner Game 5 45 Wed 04/11/2020 Software Processes 3 - Sequence Diagrams and State Machine Diagrams Fri 06/11/2020 Software Testing 6 46 Wed 11/11/2020 Software Design Patterns (GOF) 3 - Sequence Diagrams and State Machine Diagrams Fri 13/11/2020 Agile Development, Scrum 7 47 Wed 18/11/2020 Software Design Patterns (GOF) 4 - Testing Fri 20/11/2020 Software Design Patterns (GOF) 8 48 Wed 25/11/2020 no lecture, postponed: Clean Code Poster preparation 4 - Testing Fri 27/11/2020 Legacy Code &amp;amp; Refactoring 9 49 Wed 02/12/2020 Clean Code Intro, Application Architectures &amp;amp; System Models (Ch.</description></item><item><title>Java Collection Library e-learning WS 2018/19</title><link>https://bkleinen.github.io/classes/ss2020/info2/misc/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/info2/misc/collections/</guid><description>Overview Your task is to get yourself more aquaintaned with the java collection library. It&amp;rsquo;s a powerful, stable and reliable library providing collections for many use cases.
We already have looked at the main interfaces, List, Set and Map, in Info1 as well as the most common implementations, ArrayList, HashSet and HashMap.
In Info2, you&amp;rsquo;ll learn more about alternative implementations and how to assess which one to use regarding their properties in terms of time and space consumption as well as their behaviour within concurrent applications.</description></item><item><title>Java Collection Library e-learning WS 2018/19</title><link>https://bkleinen.github.io/classes/ss2024/info2/misc/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2024/info2/misc/collections/</guid><description>Overview Your task is to get yourself more aquaintaned with the java collection library. It&amp;rsquo;s a powerful, stable and reliable library providing collections for many use cases.
We already have looked at the main interfaces, List, Set and Map, in Info1 as well as the most common implementations, ArrayList, HashSet and HashMap.
In Info2, you&amp;rsquo;ll learn more about alternative implementations and how to assess which one to use regarding their properties in terms of time and space consumption as well as their behaviour within concurrent applications.</description></item><item><title>Java Collection Library e-learning WS 2018/19</title><link>https://bkleinen.github.io/classes/ws2018/info2/misc/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/info2/misc/collections/</guid><description>Overview Your task is to get yourself more aquaintaned with the java collection library. It&amp;rsquo;s a powerful, stable and reliable library providing collections for many use cases.
We already have looked at the main interfaces, List, Set and Map, in Info1 as well as the most common implementations, ArrayList, HashSet and HashMap.
In Info2, you&amp;rsquo;ll learn more about alternative implementations and how to assess which one to use regarding their properties in terms of time and space consumption as well as their behaviour within concurrent applications.</description></item><item><title>Java Collection Library e-learning WS 2018/19</title><link>https://bkleinen.github.io/classes/ws2021/info2/misc/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/info2/misc/collections/</guid><description>Overview Your task is to get yourself more aquaintaned with the java collection library. It&amp;rsquo;s a powerful, stable and reliable library providing collections for many use cases.
We already have looked at the main interfaces, List, Set and Map, in Info1 as well as the most common implementations, ArrayList, HashSet and HashMap.
In Info2, you&amp;rsquo;ll learn more about alternative implementations and how to assess which one to use regarding their properties in terms of time and space consumption as well as their behaviour within concurrent applications.</description></item><item><title>JUnit in BlueJ</title><link>https://bkleinen.github.io/material/info1/junit_in_bluej/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/info1/junit_in_bluej/</guid><description>Monday, 04.December 2023 JUnit is not part of the Java API, it is a third-party software. You find all information about JUnit, including a user guide and information about and download of the latest version on https://junit.org.
As of this writing, the current version is 5.10.1, but the version included in BlueJ 5.2.1 is JUnit 5.5.2, as you can check within the installation of BlueJ:
BlueJ.app/Contents/Java&amp;gt;ls junit* junit-4.12.jar	junit-jupiter-params-5.5.2.jar	junit-platform-suite-api-1.5.2.jar junit-jupiter-5.</description></item><item><title>KaraClock Complete</title><link>https://bkleinen.github.io/classes/ws2023/info1/labs/karaclock-complete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2023/info1/labs/karaclock-complete/</guid><description>This is a complete overview of the KaraClock Exercises that lead to the implementation of the KaraClockDisplay-Example. The exercises are distributed through three Labs, as shown by the headlines here.
The material section contains an article about why I made this addition to the ClockDisplay example: ClockDisplay Example: Reflections and Improvements.
Open the Greenfoot-Kara project https://github.com/htw-imi-info1/kara-clock-lab. It contains several test worlds. Make sure you&amp;rsquo;ve instantiated the correct test world!
If you haven&amp;rsquo;t already done so, you need to install Greenfoot to open the scenarios.</description></item><item><title>Lab 00 - Intro</title><link>https://bkleinen.github.io/classes/ss2022/networks/labs/lab00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/networks/labs/lab00/</guid><description>Part 1: Playing with Web Servers As the Web and Web applications are a central part of networked applications, we will use the time before really getting started to play around with basic web servers.
You should be able to do most or all of this with your own computers. We will build Teams during the first lab, but feel free to start working on the exercises
1.a Simple Web Server in Java: NanoWebServer Have a look at these examples of very simple webservers implemented in Java: https://github.</description></item><item><title>Lab 00 - Intro</title><link>https://bkleinen.github.io/classes/ws2021/networks/labs/lab00_intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/labs/lab00_intro/</guid><description>** update 21.10.2021: nur bis 1c bearbeiten, so weit wie Sie im lab gekommen sind.**
Part 1: Playing with Web Servers As the Web and Web applications are a central part of networked applications, we will use the time before really getting started to play around with basic web servers.
You should be able to do most or all of this with your own computers. We will build Teams during the first lab, but feel free to start working on the exercises</description></item><item><title>Lab 01 - Nginx &amp; HTTP</title><link>https://bkleinen.github.io/classes/ws2021/networks/labs/lab01_ch01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/labs/lab01_ch01/</guid><description>Part 1: Set up a Real Web Server on a Virtual Machine We will do this part together in lab, where I will provide each group with a virtual server hosted at the HTW - you will install and configure nginx on port 80 on these machines.
Linux / Shell Resources Here&amp;rsquo;s the link to the very brief intro I wrote: Setting up a Debian Webserver This is my recommendation for an introductionary book: LinuxCommand.</description></item><item><title>Lab 02 - Application Layer</title><link>https://bkleinen.github.io/classes/ws2021/networks/labs/lab02_ch02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/labs/lab02_ch02/</guid><description>This lab summarizes all assignments related to chapter 2 - we will be working on Part 1 + 2 during the lectures, work on your own on Part 3. The Labs - every Wednesday at 17:30 - are open to both Groups, for all questions.
You need to include all parts in your lab report for this assignment.
Part 1: email and http Receiving HTTP (P12) Write or find a simple TCP program for a server that accepts lines of input from a client and prints the lines onto the server&amp;rsquo;s standard output.</description></item><item><title>Lab 03 - TCP and UDP</title><link>https://bkleinen.github.io/classes/ws2021/networks/labs/lab03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/labs/lab03/</guid><description>This lab summarizes lecture and lab assignments around chapter 03 (as well as some more aspects of chapter 02)
The Labs - every Wednesday at 17:30 - are open to both Groups, for all questions.
You need to include all parts in your lab report for this assignment.
Part 1: UDP Pinger The assignment is to create the UDP Pinger client part as described on page 205f. in the Textbook. The assignment is also availabe in Moodle, &amp;ldquo;Assignment 2: UDP Pinger (Part of our Lab 3)&amp;rdquo; The sceleton code and the server can be found here: htw-imi-networks/python-programming-assignments</description></item><item><title>Lab 04 - Legacy Code - Refactoring to Patterns</title><link>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/labs/lab-04/</guid><description>The Gilded Rose, Trade District, World of Warcraft.
Assignment: Gilded Rose Kata Source Code: There are three versions. Choose one. Have brief look at the readme and the GuildedRose class.
Ruby Version: https://github.com/htw-imi-info3-archive/gilded-rose-kata Java/Eclipse Version with Test Stub: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRoseJavaEclipse Original Version using Maven: https://github.com/htw-imi-info3-archive/lab-05-JavaMavenGildedRose Write Characterization Tests To be able to add the new functionality as requested you should write Characterization tests first. You will not yet refactor or add the required new functionality!</description></item><item><title>Lab 04 - Network Layer - Data Plane</title><link>https://bkleinen.github.io/classes/ws2021/networks/labs/lab04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/networks/labs/lab04/</guid><description>This lab summarizes lecture and lab assignments around chapter 04 of the textbook.
The Labs - every Wednesday at 17:30 - are open to both Groups, for all questions.
You need to include all parts in your lab report for this assignment.
Chapter 04 This will be a short lab &amp;amp; report briefly before christmas.
Part 1: IP Adresses A. determine Address Blocks and Locations (similar to P16 in the book) Use the whois service at the American Registry for Internet Numbers - ARIN Whois/RDAP - American Registry for Internet Numbers - to determine the IP address blocks for the three universities in Berlin as well as the HTW and BHT.</description></item><item><title>Lab Startup</title><link>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/labs/exercise-00/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. Each computer in WH C 576 and WH C 579 is a so-called dual-boot computer that can boot to Windows or Ubuntu Linux, or Mac OS in WH C 537. As computer science students we expect you to be able to deal with Windows, Unix, and Mac OS operating systems.
We have lots of rules for the labs, as they are used by many different people during the week.</description></item><item><title>Lab Startup</title><link>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/info1/labs/exercise-00/</guid><description>Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. We have lots of rules for the labs, as they are used by many different people during the week. You find a link to the rules (&amp;ldquo;Laborordnung&amp;rdquo;) here.
Two really important rules are:
No food. We don&amp;rsquo;t like crumbs in the keyboards. Drinks are okay if they are in a container with a screw-on lid and the lid is screwed on.</description></item><item><title>Lab Startup: Set up your development environment</title><link>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/labs/lab-00/</guid><description>&amp;mdash; To be done as e-Learning on Friday 11-Oct-2013 until Thursday 17-Oct-2013 latest! &amp;mdash;
Which Computer to use? As most of your colleagues in the former semesters completely ignored the new iMacs in our Web Technology lab and rather unfolded their old, dirty little subnotebooks in front of the 27&amp;rsquo;&amp;rsquo; screens (which even cannot be used as an external monitor), I expect that you will also mainly use your personal computers for working on the exercises.</description></item><item><title>Learn Python with Tests</title><link>https://bkleinen.github.io/material/languages/python/learn-with-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/languages/python/learn-with-tests/</guid><description>Links for Learning Python with Tests: The repo: https://github.com/htw-imi-info3/python-learning
The Python Standard Library
The Python Language Reference
Python Unit Tests, list of available assertions in TestCase</description></item><item><title>M1 Assignments</title><link>https://bkleinen.github.io/classes/ss2018/media-programming-rails/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/media-programming-rails/assignments/</guid><description>Web frameworks While developing the test application with your chosen framework, consider the following aspects of your chosen framework:
Routing and Architectural Patterns How is HTML generated Authentication Persistency and Connectivity to Databases Security Github repository https://github.com/htw-imi-m1/rails-todo-list-ss2018
Thema: Todo-Liste Backlog As a user, I can create an Entry in the Todo List As a user, I can delete an Entry As a user, I can edit an Entry As a user, I can mark an Entry as done As a user, I can see a list of all Todo Entries.</description></item><item><title>M1 Assignments</title><link>https://bkleinen.github.io/classes/ss2020/m1-web/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m1-web/assignments/</guid><description>You will do quite a lot of web development in the lecture part of this class. Thus, this lab is not about web technology or development, but rather introduces you to three other topics related to web development: Usability, publishing on the web and devops and agile. As we start off with the web part this term I&amp;rsquo;ve decided to try a new approach: Rather than working on toy-assignments within a week, I ask you to learn about the theory now, and apply them to any project later during the term.</description></item><item><title>M1 Assignments</title><link>https://bkleinen.github.io/classes/ws2017/media-programming-rails/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/media-programming-rails/assignments/</guid><description>Week 1 Project Start, The Rails World Working on your project Write down your project vision. Write down your product backlog. Roughly prioritize it for business value. Don&amp;rsquo;t hesitate to write down as many stories as you want, you don&amp;rsquo;t have to implement them all. Pick a user story that you can implement with simple CRUD operations. Draw a scribble for the screens involved. Draw a first sketch of the data model that is suffient for this story.</description></item><item><title>M1 Assignments</title><link>https://bkleinen.github.io/classes/ws2019/m1-web/assignments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m1-web/assignments/</guid><description>Week 1 Web Technology and Architectures - Framework Bento Game
Week 2 Authentication and Security
Week 3 Continuous Deployment
Week 4-5 Usability and User Experience</description></item><item><title>M1 Media Programming: Web Technology</title><link>https://bkleinen.github.io/classes/ss2018/media-programming-rails/web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/media-programming-rails/web/</guid><description>Welcome! This pages introduce you to the web application part of the &amp;ldquo;Epochenunterricht&amp;rdquo; in M1 Mediaprogramming. The Epochenunterricht consists of 3 x 5 laboratory sessions for the three study focuses Web Technology, Visual Computing and Game Technology respectively. Have a look at the tentative overall schedule to see how this breaks down.
What we will do Within the five weeks of Web Technology, you will work on your own Web Application Project in a more or less agile manner.</description></item><item><title>M1 Overall Schedule</title><link>https://bkleinen.github.io/classes/ss2018/media-programming-rails/overall-schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/media-programming-rails/overall-schedule/</guid><description> Week KW Date JF Topic Area Lecturer 1 14 Wed, 2018-04-11 * Visual Computing Klaus Jung 2 15 Wed, 2018-04-18 Visual Computing Nico Hezel 3 16 Wed, 2018-04-25 * Visual Computing Kai Barthel 4 17 Wed, 2018-05-02 Visual Computing Nico Hezel 5 18 Wed, 2018-05-09 * Visual Computing Nico Hezel 6 19 Wed, 2018-05-16 Game Technology and Interactive Systems Tobias Lenz 7 20 Wed, 2018-05-23 * Game Technology and Interactive Systems Tobias Lenz 8 21 Wed, 2018-05-30 Game Technology and Interactive Systems Tobias Lenz 9 22 Wed, 2018-06-06 * Game Technology and Interactive Systems Tobias Lenz 10 23 Wed, 2018-06-13 Game Technology and Interactive Systems Tobias Lenz 11 24 Wed, 2018-06-20 * Web Technology Barne Kleinen 12 25 Wed, 2018-06-27 Web Technology Barne Kleinen 13 26 Wed, 2018-07-04 * Web Technology Barne Kleinen 14 27 Wed, 2018-07-11 Web Technology Barne Kleinen 15 28 Wed, 2018-07-18 * Web Technology Barne Kleinen 16 29 Wed, 2018-07-25 TBD</description></item><item><title>M1 Overall Schedule</title><link>https://bkleinen.github.io/classes/ws2017/media-programming-rails/overall-schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/media-programming-rails/overall-schedule/</guid><description> Week KW Date Topic Area Lecturer 1 41 Wed, 2017-10-11 Visual Computing Klaus Jung &amp;amp; Nico Hezel 2 42 Wed, 2017-10-18 Visual Computing Klaus Jung &amp;amp; Nico Hezel 3 43 Wed, 2017-10-25 Visual Computing Klaus Jung &amp;amp; Nico Hezel 4 44 Wed, 2017-11-01 Visual Computing Klaus Jung &amp;amp; Nico Hezel 5 45 Wed, 2017-11-08 Visual Computing Klaus Jung &amp;amp; Nico Hezel 6 46 Wed, 2017-11-15 Web Technology Barne Kleinen 7 47 Wed, 2017-11-22 Web Technology Barne Kleinen 8 48 Wed, 2017-11-29 Web Technology Barne Kleinen 9 49 Wed, 2017-12-06 Web Technology Barne Kleinen 10 50 Wed, 2017-12-13 Web Technology Barne Kleinen 11 51 Wed, 2017-12-20 Game Technology and Interactive Systems David Strippgen 12 1 Wed, 2018-01-03 Game Technology and Interactive Systems David Strippgen 13 2 Wed, 2018-01-10 Game Technology and Interactive Systems David Strippgen 14 3 Wed, 2018-01-17 Game Technology and Interactive Systems David Strippgen 15 4 Wed, 2018-01-24 Game Technology and Interactive Systems David Strippgen 16 5 Wed, 2018-01-31 TBD</description></item><item><title>M1 Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ss2018/media-programming-rails/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/media-programming-rails/schedule/</guid><description> Week KW Date Topic Assignment 1 24 Wed, 2018-06-20 Project Start, Topics 2 26 Wed, 2018-07-04 Which application to build? Features of Web Frameworks Web Frameworks 3 27 Wed, 2018-07-11 Security 4 28 Wed, 2018-07-18 The Web Specialisation 5 28 Wed, 2018-07-25 Presentations</description></item><item><title>M1 Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ss2020/m1-web/schedule-web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m1-web/schedule-web/</guid><description>tentative.
Week KW Date Topic Assignment 12 25 Wed 08/04/2020 Web Dev &amp;amp; Usability: Intro 13 26 Wed 15/04/2020 Discount Usability 14 27 Wed 22/04/2020 Static Web Site Publishing 15 28 Wed 29/04/2020 Continuous Deployment and Agile Development 16 29 Wed 06/05/2020 Individual Consultations</description></item><item><title>M1 Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ws2017/media-programming-rails/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/media-programming-rails/schedule/</guid><description> Week KW Date Topic Assignment 1 46 Wed, 2017-11-15 Project Start, The Rails World Week1 2 47 Wed, 2017-11-22 Rails Dash, Active Record and Migrations Week2 3 48 Wed, 2017-11-29 Acceptance Testing and Ruby Week3 4 49 Wed, 2017-12-06 Continuous Integration and Deployment Week4 5 50 Wed, 2017-12-13 3rd Party APIs or Javascript Week5</description></item><item><title>M1 Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ws2019/m1-web/schedule-web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m1-web/schedule-web/</guid><description> Week KW Date Topic Assignment 13 2 Wed, 2020-01-08 verschoben 14 3 Wed, 2020-01-15 08:30-11:30 WH-C 579 2 x Usability and User Experience 15 4 Wed, 2020-01-22 08:30-09:45 WH-C 579 Web Technology and Architectures - Framework Bento Game 16 5 Wed, 2020-01-29 08:30-11:30 WH-C 579 Authentication and Security, Continuous Deployment</description></item><item><title>M1 Web Technology Topics</title><link>https://bkleinen.github.io/classes/ss2020/m1-web/topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m1-web/topics/</guid><description>Discount Usability The Nielsen Norman Group maintains a great web site with a wealth of information and material about Usability, User Centered Design and User Experience. Starting with Discount Usability 30 Years read about either - or all - the three mentioned methods: simplified user testing with 5 users, early test of paper prototypes, and heuristic evaluation. Your goal is to learn enough about either one of this three methods to apply it within a project.</description></item><item><title>Media Programming Schedule</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/overall-schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/overall-schedule/</guid><description>Tentative. Aka subject to possible change.
Week KW Date Topic Area Lecturer 1 15 Wed, 2017-04-12 Visual Computing Klaus Jung 2 16 Wed, 2017-04-19 Visual Computing Nico Hezel 3 17 Wed, 2017-04-26 Visual Computing Kai Barthel 4 18 Wed, 2017-05-03 Visual Computing Nico Hezel 5 19 Wed, 2017-05-10 Visual Computing Nico Hezel 6 20 Wed, 2017-05-17 Game Technology and Interactive Systems David Strippgen 7 21 Wed, 2017-05-24 Game Technology and Interactive Systems David Strippgen 8 22 Wed, 2017-05-31 Game Technology and Interactive Systems David Strippgen 9 23 Wed, 2017-06-07 Game Technology and Interactive Systems David Strippgen 10 24 Wed, 2017-06-14 Game Technology and Interactive Systems David Strippgen 11 25 Wed, 2017-06-21 Web Technology Barne Kleinen 12 26 Wed, 2017-06-28 Web Technology Barne Kleinen 13 27 Wed, 2017-07-05 Web Technology Barne Kleinen 14 28 Wed, 2017-07-12 Web Technology Barne Kleinen 15 29 Wed, 2017-07-19 Web Technology Barne Kleinen 16 30 Wed, 2017-07-26 TBD</description></item><item><title>Media Programming Schedule</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/overall-schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/overall-schedule/</guid><description>Tentative. Aka subject to possible change.
Week KW Date Topic Area Lecturer 1 41 Wed, 2016-10-12 Web Technology Barne Kleinen 2 42 Wed, 2016-10-19 Web Technology Barne Kleinen 3 43 Wed, 2016-10-26 Web Technology Barne Kleinen 4 44 Wed, 2016-11-02 Web Technology Barne Kleinen 5 45 Wed, 2016-11-09 Web Technology Barne Kleinen 6 46 Wed, 2016-11-16 Visual Computing Klaus Jung &amp;amp; Nico Hezel 7 47 Wed, 2016-11-23 Visual Computing Klaus Jung &amp;amp; Nico Hezel 8 48 Wed, 2016-11-30 Visual Computing Klaus Jung &amp;amp; Nico Hezel 9 49 Wed, 2016-12-07 Visual Computing Klaus Jung &amp;amp; Nico Hezel 10 50 Wed, 2016-12-14 Visual Computing Klaus Jung &amp;amp; Nico Hezel 11 51 Wed, 2016-12-21 Game Technology and Interactive Systems David Strippgen 13 53 Wed, 2017-01-04 Game Technology and Interactive Systems David Strippgen 14 54 Wed, 2017-01-11 Game Technology and Interactive Systems David Strippgen 15 55 Wed, 2017-01-18 Game Technology and Interactive Systems David Strippgen 16 56 Wed, 2017-01-25 Game Technology and Interactive Systems David Strippgen 17 57 Wed, 2017-02-01 TBD 18 58 Wed, 2017-02-08 TBD</description></item><item><title>Modulehandbook</title><link>https://bkleinen.github.io/software_projects/modulehandbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/software_projects/modulehandbook/</guid><description>Writing and Developing Module Handbooks Together Module handbooks are a very important basis for the planning and organization of studies and for the recognition of credits already earned. The planning of completely new study programs and modules as well as their further development are based on the module handbooks.
In order to be able to develop the module handbooks in a pleasant way, a process is needed in which it is possible to obtain feedback in an uncomplicated way and to accompany the university politics process.</description></item><item><title>News and Announcements</title><link>https://bkleinen.github.io/news/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/news/</guid><description>Archive (rather old posts)</description></item><item><title>Praxisprojekt “IMI-Map”</title><link>https://bkleinen.github.io/classes/ss2013/praxisprojekt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/praxisprojekt/</guid><description>Erste Ausgabe der IMI-Map. -&amp;gt; SG-Webseite</description></item><item><title>Praxisprojekt SS2014-WS2014</title><link>https://bkleinen.github.io/classes/ss2014/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/project/</guid><description>Preisvergleich für digitale Medien &amp;mdash; Themenvorschlag einer Gruppe von Studenten &amp;mdash;
Suchmaschinen die den aktuell günstigsten Preis für ein bestimmtes Produkt ermitteln gibt es bereits sehr viele. Ein derartiger Service für rein digitale Medien existiert in diesem Umfang jedoch noch nicht. Ziel dieses Projektes ist es ein modernes und benutzerfreundliches Such-System zu entwickeln, welches das Angebot von unterschiedlichen Anbietern digitaler Medien übersichtlich auf einer einzigen Plattform vereint. Neben einer Webseite sollen später auch native Anwendungen für gängige mobile Betriebssysteme bereitgestellt werden.</description></item><item><title>Praxisprojekt SS2015&amp;#58; Treasure Map</title><link>https://bkleinen.github.io/classes/ss2015/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2015/project/</guid><description>Foto by RachelC
Projekt Goal: Develop a Web &amp;amp; Mobile App to plan little explorations either by foot, bike or car including pre-selected locations or locations suggested by peers.
Offered as a (Praxisprojekt for IMI Bachelors)[https://imi-bachelor.htw-berlin.de/studium/projekte/projekte-im-sommersemester-2015//]. See the scenarios and user stories below for a rough idea what the apps should support.
Scenarios Scenario 1 Deniz rides home on their bike and has an hour of extra time, the sun is shining so they decide to use that hour to visit a place they have wanted to visit (wasn&amp;rsquo;t there this special bakery somewhere close to the route?</description></item><item><title>Praxisprojekt WS 2013</title><link>https://bkleinen.github.io/classes/ws2013/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/project/</guid><description>Workshop Management Application for Rails Girls Rails Girls is a series of successful events worldwide that aim at getting more women involved in computing and increase the diversity in the IT field.
Strangely enough, they haven&amp;rsquo;t yet programmed a rails web application themselves for managing and organizing their workshops!
This makes a wonderful opportunity for a group of HTW Students to act as a web development agency offering a solution to this great international community as a customer.</description></item><item><title>Preparation for Week 3</title><link>https://bkleinen.github.io/classes/ss2013/info3/assignments/preparation-for-week-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2013/info3/assignments/preparation-for-week-3/</guid><description>This week and in Exercise 2, we will start working on the web applications. Please use the time till Friday to gather some ideas about which web application you might want to develop! We will have a topic collection, discussion and decision in class on friday. Here are my current ideas, just for inspiration:
DailyTasks: An application where a user can make a list of daily tasks (e.g. study English, cleaning kitchen, exercise) and check them off every day.</description></item><item><title>Project "IMI Map goes MEVN"</title><link>https://bkleinen.github.io/classes/ss2021/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/project/</guid><description>Praxisprojekt im Master
M6. IMI Map goes MEVN - Migrate the IMI-Map from Rails to MEVN Barne Kleinen
Die IMI-Map ist eine Web-App, die Studierende beim Finden von Praktikumsplätzen und die Praktikumsbeauftragten bei der Verwaltung der Praktika unterstützt. Sie wurde in zwei früheren Praxisprojekten und einigen Bachelorarbeiten entwickelt und wird seit 2013 im Studiengang aktiv verwendet und weiterentwickelt. Sie wurde im Sommersemester 2013 als Ruby on Rails Anwendung entwickelt. Obwohl Ruby on Rails ein stabiles und immer noch aktuelles Web-Framework ist, setzen wir inzwischen in der Lehre modernere, JavaScript-basierte Frameworks ein.</description></item><item><title>Project "Who's there?"</title><link>https://bkleinen.github.io/classes/ss2020/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/project/</guid><description>Praxisprojekt im Bachelor
B5. Who&amp;rsquo;s there? How are y&amp;rsquo;all? - Light-Weight Telepresence with HTML5 Barne Kleinen
The question of how to provide an awareness of coworkers, colleagues, fellow students and friends in a spatially remote working team has been the subject of research for over 25 years. Namely, there has been a wide array of elaborate setups to provide a sense or even awareness of the remote ones: videoconferencing rooms extending visually to the remote site, telepresence robots or even remote sports and games.</description></item><item><title>Project IN_VISIBLE (Master)</title><link>https://bkleinen.github.io/classes/ws2019/m6-project/notes/target-groups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m6-project/notes/target-groups/</guid><description>Potential Users/User Groups Equality Officers (Frauenbeauftragte)
biased: present the institution as inclusive Head of Administration/Student Service
TIN People who are members of the institution
who maybe experienced pain and want to share it or maybe a positive experience as well Local TIN People who want to provide information
Alumnis
Activists Maintaining the Platform/Administrator
Hochschul-Akteur*innen in Marketing und Gleichstellung
goal: good places in rankings, make the institution attractive for potential students we need to make sure that a variety of people are interviewed (class, sexual orientation, gender identity, perspectives of intersex people, people of color)</description></item><item><title>Project IN_VISIBLE (Master)</title><link>https://bkleinen.github.io/classes/ws2019/m6-project/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m6-project/schedule/</guid><description>The Tentative Schedule.
W CW Date Topic 1 42 Wed 16/10/2019 Contextual Interviews Technology Brainstorming 2 43 Wed 23/10/2019 Affinity Tech. Proof of Concept 3 44 Wed 30/10/2019 Visions Tech. Proof of Concept 4 45 Wed 06/11/2019 Product Concepts Tech. Proof of Concept 5 46 Wed 13/11/2019 Prototype 6 47 Wed 20/11/2019 Prototype 7 48 Wed 27/11/2019 Prototype 8 49 Wed 04/12/2019 Prototype 9 50 Wed 11/12/2019 1. Evaluation 10 51 Wed 18/12/2019 Prototype 11 2 Wed 08/01/2020 Prototype 12 3 Wed 15/01/2020 Prototype 13 4 Wed 22/01/2020 2.</description></item><item><title>Projekt</title><link>https://bkleinen.github.io/classes/ws2017/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/project/</guid><description>Topic Driven Backlog no description yet.</description></item><item><title>Refactoring e-learning</title><link>https://bkleinen.github.io/classes/ws2014/info3/material/refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/material/refactoring/</guid><description>You already know refactoring since Info1 - we spent quite some time refactoring the Zuul project!
This e-learning is about exploring and understanding refactoring in more depth.
The resource on refactoring:
Fowler, Martin: Refactoring: Improving the Design of Existing Code, Addison Wesley Object Technology Series, 1999.
Ruby edition:
Jay Fields, Shane Harvie, and Martin Fowler: Refactoring Ruby Edition. Addison Wesley, 2009.
The latter is discussed in the Ruby Rouges Podcast #178.</description></item><item><title>Refactoring e-learning</title><link>https://bkleinen.github.io/classes/ws2015/info3/material/refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info3/material/refactoring/</guid><description>You already know refactoring since Info1 - we spent quite some time refactoring the Zuul project!
This e-learning is about exploring and understanding refactoring in more depth.
The resource on refactoring:
Fowler, Martin: Refactoring: Improving the Design of Existing Code, Addison Wesley Object Technology Series, 1999.
Ruby edition:
Jay Fields, Shane Harvie, and Martin Fowler: Refactoring Ruby Edition. Addison Wesley, 2009.
The latter is discussed in the Ruby Rouges Podcast #178.</description></item><item><title>Refactoring e-learning</title><link>https://bkleinen.github.io/classes/ws2017/info3/material/refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/info3/material/refactoring/</guid><description>You already know refactoring since Info1 - we spent quite some time refactoring the Zuul project!
This e-learning is about exploring and understanding refactoring in more depth.
The resource on refactoring:
Fowler, Martin: Refactoring: Improving the Design of Existing Code, Addison Wesley Object Technology Series, 1999.
Ruby edition:
Jay Fields, Shane Harvie, and Martin Fowler: Refactoring Ruby Edition. Addison Wesley, 2009.
The latter is discussed in the Ruby Rouges Podcast #178.</description></item><item><title>Refactoring e-learning</title><link>https://bkleinen.github.io/classes/ws2020/info3/material/refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/info3/material/refactoring/</guid><description>You already know refactoring since Info1 - we spent quite some time refactoring the Zuul project!
This e-learning is about exploring and understanding refactoring in more depth.
The resource on refactoring:
Fowler, Martin: Refactoring: Improving the Design of Existing Code, Addison Wesley Object Technology Series, 1999.
Ruby edition:
Jay Fields, Shane Harvie, and Martin Fowler: Refactoring Ruby Edition. Addison Wesley, 2009.
The latter is discussed in the Ruby Rouges Podcast #178.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ws2013/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info1/schedule/</guid><description>Lecture Date (Tue) Lecture (2 on Tue) Chapter (Barnes/Kölling) Lab (Tue/Thu) 1 15-Oct-2013 Introduction to Class + to Kara Lab Startup 2 Instructions, Methods 3 22-Oct-2013 Kara Programming, Variables, Loops, Conditionals Exercise 01 4 Arrays, Kara Roundup 5 29-Oct-2013 Objects, Classes, Methods, BlueJ, Parameters, Compiler Chapter 1 Gruppe 1: Exercise 02 Gruppe 2: Exercise 01 6 Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Accessor methods, Mutator Methods Chapter 2 7 5-Nov-2013 Printing with BlueJ, Conditional, Local Variables Chapter 2 Gruppe 1: Exercise 03 Gruppe 2: Exercise 02 and Exercise 03 8 Expressions, Abstraction, Modularization, Object Interaction Chapter 3 9 12-Nov-2013 Object Creation, Object and Class Diagrams, Primitive Types, Object Types, Multiple Constructors, Debugger Chapter 3 Exercise 04 10 Collections, Generics, for-each, While Loops Chapter 4 11 19-Nov-2013 More Loops, Iterators, Arrays Chapter 4 Exercise 05 12 For Loops, Library Classes, Reading Class Documentation Chapter 5 13 26-Nov-2013 Random, Packages, Maps Chapter 5 Exercise 06 14 Public vs.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ws2013/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2013/info3/schedule/</guid><description>No. Day Date Topic Lecture Ass. Lab (Friday) 1 Thu 10-Oct-13 SE Introduction to Info 3 and Software Engineering 2 Fri 11-Oct-13 SE No Lecture/Lab: E-Learning Setup your Development Environment 3 Thu 17-Oct-13 SE Software Configuration Management 4 Fri 18-Oct-13 SE Software Configuration Management 1 Development Environment &amp;amp; GIT, Markdown 5 Thu 24-Oct-13 SE 6 Fri 25-Oct-13 SE 7 Thu 31-Oct-13 SE Software Development Processes, Rest of Intro to SE 8 Fri 1-Nov-13 SE Software Development Processes,Requirements Engineering 2 UML Part I: Use Cases 9 Thu 7-Nov-13 SE Probelehrveranstaltung im Rahmen eines Berufungsverfahrens 10 Fri 8-Nov-13 SE System Modeling and Architectural Design 3 UML Part II: Class Diagrams 11 Thu 14-Nov-13 SE Agile Manifesto, Scrum (Scrum Ceremonies and Sprints) 12 Fri 15-Nov-13 Clean Code Clean Code 4 UML Part III: State Machine Diagrams 13 Thu 21-Nov-13 Clean Code SOLID Principles 14 Fri 22-Nov-13 Clean Code SOLID Principles II 5 UML Part IV: Sequence Diagrams 15 Thu 28-Nov-13 Best Practices Ruby Intro 16 Fri 29-Nov-13 Clean Code Pair Programming and Code Review 6 Ruby Exercise 17 Thu 5-Dec-13 Best Practices Software Testing 18 Fri 6-Dec-13 Clean Code Working with Legacy Code 7 Testing 1: Test Driven Design 19 Thu 12-Dec-13 Adv.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ws2014/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info1/schedule/</guid><description>Please note that there will be no Info1 classes in the first week due to introductionary things. In the second week, there will be no lecture and lab on Tuesday due to a conference - I found no sensible time slot to move our first lab to, so we&amp;rsquo;ll be starting off in the third week.
This schedule is tentative and subject to change!
Week Lecture Date (Tue) Lecture Book Lab (Tue) 1 1 14-Oct-2014 no lecture no lab 2 Introduction to Class 2 3 20-Oct-2014 Kara Programming: Instructions, Methods, Variables, Loops, Conditionals Lab Startup 4 Kara Programming: Instructions, Methods, Variables, Loops, Conditionals 3 5 28-Oct-2014 Kara Roundup, Kara and its World as Objects Exercise 01 6 Objects, Classes, Methods, BlueJ, Parameters, Compiler (Chapter 1) Ch.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ws2015/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/info1/schedule/</guid><description>Please note that there will be no Info1 classes in the first week due to introductionary things. In the second week, there will also be no lectures and due to a conference - I found no sensible time slot to move our first lab to, so we&amp;rsquo;ll be starting off in the third week.
This schedule is tentative and subject to change!
Week KW Date Lecture Lab 1 41 Tue, 2015-10-13 no class Lab Startup Thu, 2015-10-15 no class 2 42 Tue, 2015-10-20 Introduction to Class &amp;amp; Kara Programming Exercise 01 a Thu, 2015-10-22 Kara Programming: Instructions, Methods, Variables, Loops, Conditionals 3 43 Tue, 2015-10-27 Kara Roundup, Kara and its World as Objects Exercise 01 b Thu, 2015-10-29 Objects, Classes, Methods, BlueJ, Parameters, Compiler 4 44 Tue, 2015-11-03 Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Getters and Setter Exercise 02 Thu, 2015-11-05 Printing to the command line, Conditional, Local Variables, Expressions 5 45 Tue, 2015-11-10 Abstraction, Modularization, Object Interaction Exercise 03 Thu, 2015-11-12 Object Creation, Object and Class Diagrams, Primitive Types, 6 46 Tue, 2015-11-17 Object Types, Multiple Constructors, Debugger Exercise 04 Thu, 2015-11-19 Collections, Generics, for-each, While Loops 7 47 Tue, 2015-11-24 More Loops, Iterators, Arrays, For Loops, Exercise 05 Thu, 2015-11-26 Library Classes, Reading Class Documentation, Random, Packages, Maps 8 48 Tue, 2015-12-01 Public vs.</description></item><item><title>Schedule</title><link>https://bkleinen.github.io/classes/ws2016/info1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/info1/schedule/</guid><description>This schedule is tentative and subject to change.
All exercises are linked from this page. Feel free to peek, but be aware that the ones released for this class are only those linked from the lab overview page
Week KW Date Lecture Lab 1 40 Wed, 2016-10-05 no class Thu, 2016-10-06 Introduction to Class &amp;amp; Kara Programming 2 41 Wed, 2016-10-12 Kara Programming: Instructions, Methods, Variables, Loops, Conditionals Lab Startup Thu, 2016-10-13 Kara Roundup, Kara and its World as Objects 3 42 Wed, 2016-10-19 Kara Worksheet 2 continued Exercise 01 Thu, 2016-10-20 Objects, Classes, Methods, BlueJ, Parameters, Compiler (Chapter 1) 4 43 Wed, 2016-10-26 Class Definitions, Fields, Constructors, Methods, Parameters, Assignment, Getters and Setter (Chapter 2) Exercise 02 Thu, 2016-10-27 Printing to the command line, Conditional, Local Variables, Expressions (Chapter 2) 5 44 Wed, 2016-11-02 Abstraction, Modularization, Object Interaction (Chapter 3) Exercise 03 Thu, 2016-11-03 Object Creation, Object and Class Diagrams, Primitive Types, 6 45 Wed, 2016-11-09 Object Types, Multiple Constructors, Debugger Exercise 04 Thu, 2016-11-10 Collections, Generics, for-each, While Loops (Chapter 4) 7 46 Wed, 2016-11-16 More Loops, Iterators, Arrays, For Loops, Exercise 05 Thu, 2016-11-17 Library Classes, Reading Class Documentation, Random, Packages, Maps (Chapter 5) 8 47 Wed, 2016-11-23 Public vs.</description></item><item><title>Some Work in Progress</title><link>https://bkleinen.github.io/misc/ak-wip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/misc/ak-wip/</guid><description>Ein paar links zu Arbeiterkind/HTW (in Vorbereitung)
Anne Stalfort, Mitabeiterin bei ArbeiterKind.de, für www.ersteanderuni.de
ArbeiterKind.de in Hessen
Allgemeine Studienberatung
Match deinen Master - online Q&amp;amp;A session
Frag Özgün! | FAQ für Studieninteressierte | HTW Berlin
Hochschule für Technik und Wirtschaft Berlin auf LinkedIn: #studienberatung
Antidiskriminierung | HTW Berlin</description></item><item><title>Sorting Algorithms</title><link>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/algorithms/sorting-algorithms/</guid><description>..
Algorithm Description Invariant Plus O(n) Comparisions Swaps Stable adaptive space Selection Sort select smallest from rest, append to already sorted on left a[1..i] in place n^2 n^2 n not stable Insertion Sort take card from unsorted pile (right), insert it into sorted pile a[1..i] sorted adaptable, simple -&amp;gt; ok for small n n^2 n^2 n^2 stable yes O(1) extra Shell Sort Insertion sort on every h-th element decreasing h down to 1 each h-array is sorted adaptable, still simple n^(3/2) stable yes O(1) extra Bubble Sort go up through array, compare two and swap if not in right order (up to 1.</description></item><item><title>Sprint 01 - Building a Static Web Application</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-01-static-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-01-static-node-app/</guid><description>Agile Topic: Project Ideas You will be working on one project throughout the term in a small, 3-5 person team. Collect and discuss your project ideas with other students. You can pitch your idea next week in class.
Write up a short project proposal for discussion in the next lab meeting, possibly together with other students. Develop some user stories for the product backlog. After this discussion we will decide on the different projects and the associated teams for the remainder of this class.</description></item><item><title>Sprint 01 - Building a Static Web Application</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-01-static-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-01-static-node-app/</guid><description>Agile Topic: Project Ideas You will be working on one project throughout the term in a small, 3-5 person team. Collect and discuss your project ideas with other students. You can pitch your idea next week in class.
Write up a short project proposal for discussion in the next lab meeting, possibly together with other students. Develop some user stories for the product backlog. After this discussion we will decide on the different projects and the associated teams for the remainder of this class.</description></item><item><title>Sprint 02 - Building a First Express App</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-02-first-express-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-02-first-express-app/</guid><description>Agile Topic: Product Owner Name a product owner in your Scrum team. Set up your project and create a formal backlog as a plain text file (in the team but with the product owner leading). Note: we will not use a dedicated tool for managing backlogs in this class. Their use is too involved and therefore not in scope
Development Topic: Installing and Understanding Express.js Setup Express and understand the basic structure of the framework as described in Unit 2 of the book (lessons 8 and 9).</description></item><item><title>Sprint 02 - Building a First Express App</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-02-first-express-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-02-first-express-app/</guid><description>Agile Topic: Product Owner Name a product owner in your Scrum team. Set up your project and create a formal backlog as a plain text file (in the team but with the product owner leading). Note: we will not use a dedicated tool for managing backlogs in this class. Their use is too involved and therefore not in scope
Development Topic: Installing and Understanding Express.js Setup Express and understand the basic structure of the framework as described in Unit 2 of the book (lessons 8 and 9).</description></item><item><title>Sprint 02 - Persistence with Mongo</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-02-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-02-mongo/</guid><description>Sprint 02: Persistence with Mongo Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose. The functionality implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).
As usual, select a story or two you will implement using the new technological features. You will create a full CRUD (Create/read/update/delete) in later Sprints.
Example Application With this sprint, you can pretty much follow the book.</description></item><item><title>Sprint 03 - Adding Views to the Express App</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-03-express-views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-03-express-views/</guid><description>Agile Topic: Scrum Master Name a Scrum Master from your team and have this person coordinate team meetings, such as the daily scrum.
Development Topic: Adding Views to the Express App Add views and error handling to your application using Express.js (lessons 10, 11 and 12 of unit 2). If you&amp;rsquo;ve already created views in Sprint 01, you can migrate them to the Express app. Chose one or more stories where you can make use of the two new technological topics you&amp;rsquo;ve learned in Unit 2: View Templates and Dynamic Content.</description></item><item><title>Sprint 03 - Adding Views to the Express App</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-03-express-views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-03-express-views/</guid><description>Agile Topic: Scrum Master Name a Scrum Master from your team and have this person coordinate team meetings, such as the daily scrum.
Development Topic: Adding Views to the Express App Add views and error handling to your application using Express.js (lessons 10, 11 and 12 of unit 2). If you&amp;rsquo;ve already created views in Sprint 01, you can migrate them to the Express app. Chose one or more stories where you can make use of the two new technological topics you&amp;rsquo;ve learned in Unit 2: View Templates and Dynamic Content.</description></item><item><title>Sprint 03 - Deployment</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-03-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-03-deployment/</guid><description>As this Sprint is about creating tests and setting up an CI/CD pipeline. you will not implement any new functionality in this sprint.
It&amp;rsquo;s arguable if this weeks work should be called a sprint, as you will not implement any new features that are of interest to users or customers.
Nonetheless, automatic testing and continuously deploying your app such that the users and customers will be able to see and test the deliverables is a crucial part of agile development.</description></item><item><title>Sprint 03 - Persistence with Mongo</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-05-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-05-mongo/</guid><description>Sprint 03: Persistence with Mongo Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose. The functionality implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).
As usual, select a story or two you will implement using the new technological features. You will create a full CRUD (Create/read/update/delete) in later Sprints.
Example Application With this sprint, you can pretty much follow the book.</description></item><item><title>Sprint 04 - Adding Mongo Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-04-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-04-mongo/</guid><description>Agile Topic: Daily Scrum As one of the most frequent meetings, get into the habit of holding a daily stand up meeting to exchange with other team members.
Development Topic: Adding Mongo Support Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose (lessons 13-14). The functionality implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).</description></item><item><title>Sprint 04 - Adding Mongo Support</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-04-mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-04-mongo/</guid><description>Agile Topic: Daily Scrum As one of the most frequent meetings, get into the habit of holding a daily stand up meeting to exchange with other team members.
Development Topic: Adding Mongo Support Based on Unit 3, &amp;ldquo;Connecting to a Database&amp;rdquo;, you&amp;rsquo;ll implement persistence with Mongo DB and Mongoose (lessons 13-14). The functionality implemented will be showing listings and single items of one resource, as well as creating new records (no editing yet).</description></item><item><title>Sprint 04 - Deployment</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-06-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-06-deployment/</guid><description>As this Sprint is about preparing your app for deployment and deploying it on Heroku, you will not implement any new functionality in this sprint.
It&amp;rsquo;s arguable if this weeks work should be called a sprint, as you will not implement any new features that are of interest to users or customers.
Nonetheless, automatic testing and continuously deploying your app such that the users and customers will be able to see and test the deliverables is a crucial part of agile development.</description></item><item><title>Sprint 04 &amp; 05 - CRUD Part 1 and 2</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-04-05-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-04-05-crud/</guid><description>Unit 4 - Building a User Model - is a rather long unit, thus we will take two sprints to work through it. The technical topics are:
CRUD - Create, Read, Update, Delete actions on Models in the Rest architectural style Validations Model Associations It discusses CRUD by creating CRUD functionality via model, views, controller and routes for the User model.
You will need a user model for authentication in addition to your individual models.</description></item><item><title>Sprint 05 - CRUD Part 1 and 2 (2 weeks)</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-07-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-07-crud/</guid><description>Unit 4 - Building a User Model - is a rather long unit, thus we will take two weeks to work through it. The technical topics are:
CRUD - Create, Read, Update, Delete actions on Models in the Rest architectural style Validations Model Associations It discusses CRUD by creating CRUD functionality via model, views, controller and routes for the User model.
You will need a user model for authentication in addition to your individual models.</description></item><item><title>Sprint 05 - Understanding Promises</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-05-promises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-05-promises/</guid><description>Agile Topic: Sprint Backlog Select items from the product backlog for the sprint backlog. Define a sprint goal by focussing on &amp;ldquo;what&amp;rdquo; should be delivered.
Development Topic: Understanding Promises Based on lessons 15-16 of Unit 3, add controllers and promises to coordinate your interaction with the database.
Topic of the Week Promises
Add controllers and promises to your application to coordinate your interaction with the database. Work with git. Create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo; You may also clean your git history to just have one commit per story.</description></item><item><title>Sprint 05 - Understanding Promises</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-05-promises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-05-promises/</guid><description>Agile Topic: Sprint Backlog Select items from the product backlog for the sprint backlog. Define a sprint goal by focussing on &amp;ldquo;what&amp;rdquo; should be delivered.
Development Topic: Understanding Promises Based on lessons 15-16 of Unit 3, add controllers and promises to coordinate your interaction with the database.
Topic of the Week Promises
Add controllers and promises to your application to coordinate your interaction with the database. Work with git. Create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo; You may also clean your git history to just have one commit per story.</description></item><item><title>Sprint 06 - Supporting Complex Models</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-06-complex-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-06-complex-models/</guid><description>Agile Topic: Sprint Planning Focus your sprint planning meeting on &amp;ldquo;how&amp;rdquo; to deliver the sprint backlog items, possibly adjusting a previously selected sprint goal as necessary.
Development Topic: Supporting Complex Models Lessons 17 and 18 of Unit 4 cover model associations and validations using the example of a user model.
You will need such a model for authentication in addition to your domain models (i.e. models relevant for implemeting your business logic).</description></item><item><title>Sprint 06 - Supporting Complex Models</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-06-complex-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-06-complex-models/</guid><description>Agile Topic: Sprint Planning Focus your sprint planning meeting on &amp;ldquo;how&amp;rdquo; to deliver the sprint backlog items, possibly adjusting a previously selected sprint goal as necessary.
Development Topic: Supporting Complex Models Lessons 17 and 18 of Unit 4 cover model associations and validations using the example of a user model.
You will need such a model for authentication in addition to your domain models (i.e. models relevant for implemeting your business logic).</description></item><item><title>Sprint 06 User Authentication</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-08-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-08-authentication/</guid><description>Sprint 06 User Authentication Build in a User Authentication and some extras according to
Unit 5 - &amp;ldquo;User Authentication&amp;rdquo;.
Sprint 06 in the Module-Handbook example application:
https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_06
Note that this unit only covers authentication - establishing the identity of the user - but no authorisation. Restricting access to parts of the application will be handled during the next sprint.
Sprint 06 Extras To add some more protection against attacs, add helmet.</description></item><item><title>Sprint 06 User Authentication</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-06-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-06-authentication/</guid><description>Sprint 06 User Authentication Build in a User Authentication and some extras according to
Unit 5 - &amp;ldquo;User Authentication&amp;rdquo;.
Sprint 06 in the Module-Handbook example application:
https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_06
Note that this unit only covers authentication - establishing the identity of the user - but no authorisation. Restricting access to parts of the application will be handled during the next sprint.
Sprint 06 Extras To add some more protection against attacs, add helmet.</description></item><item><title>Sprint 07 - Adding CRUD Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-07-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-07-crud/</guid><description>Agile Topic: Estimation Estimate the effort for individal backlog items by means of Planning Poker. Use the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13, and 21 for scoring.
Development Topic: Adding CRUD Support Lessons 19-21 of Unit 4 describe the necessary steps for adding CRUD (Create - Read - Update - Delete) support to a model. It describes how to implement CRUD functionality across models, views, controllers as well as by defining the appropriate routes.</description></item><item><title>Sprint 07 - Adding CRUD Support</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-07-crud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-07-crud/</guid><description>Agile Topic: Estimation Estimate the effort for individal backlog items by means of Planning Poker. Use the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13, and 21 for scoring.
Development Topic: Adding CRUD Support Lessons 19-21 of Unit 4 describe the necessary steps for adding CRUD (Create - Read - Update - Delete) support to a model. It describes how to implement CRUD functionality across models, views, controllers as well as by defining the appropriate routes.</description></item><item><title>Sprint 07 API and JWT</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-09-api-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-09-api-jwt/</guid><description>Sprint 07 API and JWT Pick or create user stories that make use of an api delivering JSON data. Build in one form of api authentication/authorisation (API Token or JWT) Unit 6 - &amp;ldquo;Building an API&amp;rdquo;.
Sprint 07 in the Module-Handbook example application:
https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_07
Sprint 07 - Testing Testing APIs with Jest and Superagent is straightforward. Testing Routes that need authentication See the documentation in the Example app: https://github.com/htw-imi-wtat1/module-handbook/blob/master/doc/authentication_authorization.md</description></item><item><title>Sprint 07 API and JWT</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-07-api-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-07-api-jwt/</guid><description>Sprint 07 API and JWT Pick or create user stories that make use of an api delivering JSON data. Build in one form of api authentication/authorisation (API Token or JWT) Unit 6 - &amp;ldquo;Building an API&amp;rdquo;.
Sprint 07 in the Module-Handbook example application:
https://github.com/htw-imi-wtat1/module-handbook/releases/tag/Sprint_07
Sprint 07 - Testing Testing APIs with Jest and Superagent is straightforward. Testing Routes that need authentication See the documentation in the Example app: https://github.com/htw-imi-wtat1/module-handbook/blob/master/doc/authentication_authorization.md Backlog and Report make sure to define your stories and connect them to the appropriate technical topic in the Backlog -</description></item><item><title>Sprint 08 - Adding Login Support</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-08-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-08-login/</guid><description>Agile Topic: Definition of Done Discuss the &amp;ldquo;Definition of Done&amp;rdquo; for the items in your sprint backlog.
Development Topic: Adding Login Support Add support for user login, following lessons 22-23 of unit 5 of the book. Note that this unit only covers authentication but no authorisation. Restricting access to parts of the application will be handled during the next sprint.
Topic of the Week User login, password hashing:
Add support for user login based on user id and password.</description></item><item><title>Sprint 08 - Adding Login Support</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-08-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-08-login/</guid><description>Agile Topic: Definition of Done Discuss the &amp;ldquo;Definition of Done&amp;rdquo; for the items in your sprint backlog.
Development Topic: Adding Login Support Add support for user login, following lessons 22-23 of unit 5 of the book. Note that this unit only covers authentication but no authorisation. Restricting access to parts of the application will be handled during the next sprint.
Topic of the Week User login, password hashing:
Add support for user login based on user id and password.</description></item><item><title>Sprint 08 - Vue 1 - Tutorial</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-08-vue1-tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-08-vue1-tutorial/</guid><description>Sprint 08: Work through the Vue Tutorial Work through the Vue Tutorial, at least the Introduction and Components In-Depth: https://v3.vuejs.org/guide/introduction.html (make sure you hit vue 3!)
Play around with component that might be useful/used within your app - this is just a preparation sprint, you won&amp;rsquo;t be implementing any new functionality for your app.
Backlog and Report write a summary of what worked, what didn&amp;rsquo;t work and what you&amp;rsquo;ve learned as your report and upload it in the moodle area.</description></item><item><title>Sprint 08 - Vue 3 - Implementation</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-10-vue3-implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-10-vue3-implementation/</guid><description>Finally: Implement something with Vue. Implement your (possibly revised) concept you&amp;rsquo;ve created during the last sprint.
Backlog and Report make sure to define your stories and connect them to the appropriate technical topic in the Backlog -
write a summary of what worked, what didn&amp;rsquo;t work and what you&amp;rsquo;ve learned as your report and upload it in the moodle area.
include a personal reflection about the sprint and what you&amp;rsquo;ve learned from each team member in the report.</description></item><item><title>Sprint 09 - Adding Support for Passport.js</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-09-passport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-09-passport/</guid><description>Agile Topic: Sprint Review Hold a sprint review meeting for the current sprint. What were the biggest technical obstacles that prevented you to reach the sprint goal? What would need to be adjusted to avoid these technical problems in the future?
Development Topic: Adding Support for Passport.js Lessons 24 and 25 describe the use of the Node module Passport.js. Follow along by implementing a user story from your backlog that relies on user authentication, either by means of the &amp;ldquo;local&amp;rdquo; strategy or by means of an external authentication provider (not covered in the book).</description></item><item><title>Sprint 09 - Adding Support for Passport.js</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-09-passport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-09-passport/</guid><description>Agile Topic: Sprint Review Hold a sprint review meeting for the current sprint. What were the biggest technical obstacles that prevented you to reach the sprint goal? What would need to be adjusted to avoid these technical problems in the future?
Development Topic: Adding Support for Passport.js Lessons 24 and 25 describe the use of the Node module Passport.js. Follow along by implementing a user story from your backlog that relies on user authentication, either by means of the &amp;ldquo;local&amp;rdquo; strategy or by means of an external authentication provider (not covered in the book).</description></item><item><title>Sprint 09 - Vue 2 - Concept</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-09-vue2-concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-09-vue2-concept/</guid><description>Sprint 09: More Vue and Concept for using it in your app Continue learning Vue by working through the tutorial. You won&amp;rsquo;t need everything, skim through parts, but make sure to set up some tests.
Think about how Vue can be used within your app and write down a concept for the components you will develop. You&amp;rsquo;ll add real time communication during the last sprint - maybe there&amp;rsquo;s an useful application for that within your app.</description></item><item><title>Sprint 09-12 - Real Time Communication and React</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/sprint-09-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/sprint-09-12/</guid><description>Sprint 09-12: Real Time Communication and React You should plan the remaining 4 sprints together, as you may want to postpone Sprint 09 to combine it with a React frontend.
Thus, the following order is tentative:
Sprint 09: Real-Time-Communication (Unit 7, &amp;ldquo;Adding Chat Functionality&amp;rdquo;) Sprint 10: React Tutorial (Main Concepts in the React Doc) Sprint 11-12: Implement Stories with React Please plan the following sprints using the backlog planning tool at:</description></item><item><title>Sprint 09-12 - Real Time Communication and React</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-09-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-09-12/</guid><description>Sprint 09-12: Real Time Communication and React You should plan the remaining 4 sprints together, as you may want to postpone Sprint 09 to combine it with a React frontend.
Thus, the following order is tentative:
Sprint 09: Real-Time-Communication (Unit 7, &amp;ldquo;Adding Chat Functionality&amp;rdquo;) Sprint 10: React Tutorial (Main Concepts in the React Doc) Sprint 11-12: Implement Stories with React Please plan the following sprints using the backlog planning tool at:</description></item><item><title>Sprint 10 - Building a REST API</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-10-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-10-rest/</guid><description>Agile Topic: Sprint Retrospective Hold a sprint retrospective meeting for the current sprint. Discuss process and external issues that prevented you from working towards the sprint goal, e.g. capacity limitations. Agree on steps to improve the situation for upcoming sprints.
Development Topic: Building a REST API Lessons 26 and 27 introduce RESTful APIs and describe the steps to add support for such APIs to your application. Choose a user story that benefits from a headless REST API and implement it in your application context.</description></item><item><title>Sprint 10 - Building a REST API</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-10-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-10-rest/</guid><description>Agile Topic: Sprint Retrospective Hold a sprint retrospective meeting for the current sprint. Discuss process and external issues that prevented you from working towards the sprint goal, e.g. capacity limitations. Agree on steps to improve the situation for upcoming sprints.
Development Topic: Building a REST API Lessons 26 and 27 introduce RESTful APIs and describe the steps to add support for such APIs to your application. Choose a user story that benefits from a headless REST API and implement it in your application context.</description></item><item><title>Sprint 11 - Real Time Communication</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-11-realtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-11-realtime/</guid><description>Sprint 11: Real-Time-Communication with socket.io Find something in your app that may benefit from real-time communication, as described in Unit 7 - Real-Time Communication possibly combined with vue, and implement it.
Alternatively, you may decide on another JavaScript Library that would be useful within your app and implement some functionality using that library.
Backlog and Report make sure to define your stories and connect them to the appropriate technical topic in the Backlog -</description></item><item><title>Sprint 11 - Securing a REST API</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-11-securing-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-11-securing-rest/</guid><description>Agile Topic No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that you may encounter.
Development Topic: Securing a REST API Lessons 28 and 29 describe mechanisms to secure a RESTful API. Choose a user story that benefits from exposing a secure REST API and implement it in your application context.
Topic of the Week JWT:</description></item><item><title>Sprint 11 - Securing a REST API</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-11-securing-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-11-securing-rest/</guid><description>Agile Topic No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that you may encounter.
Development Topic: Securing a REST API Lessons 28 and 29 describe mechanisms to secure a RESTful API. Choose a user story that benefits from exposing a secure REST API and implement it in your application context.
Topic of the Week JWT:</description></item><item><title>Sprint 12 - Adding Support for Socket.io</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-12-socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-12-socket/</guid><description>Agile Topic No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that you may encounter during the regular Scrum events.
Development Topic: Adding Support for Socket.io Find something in your app that may benefit from real-time communication. Add support for this fuctionality following the instructions given in lessons 30 - 33 of unit 7.
Topic of the Week Socket.</description></item><item><title>Sprint 12 - Adding Support for Socket.io</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-12-socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/topics/sprint-12-socket/</guid><description>Agile Topic No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that you may encounter during the regular Scrum events.
Development Topic: Adding Support for Socket.io Find something in your app that may benefit from real-time communication. Add support for this fuctionality following the instructions given in lessons 30 - 33 of unit 7.
Topic of the Week Socket.</description></item><item><title>Sprint 13 - Deployment to Heroku</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-13-heroku/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/topics/sprint-13-heroku/</guid><description>Agile Topic No specific agile topic to be covered in this sprint. Continue to follow the Scrum methodology in your development work, correcting any issues that you may encounter during the regular Scrum events.
Development Topic: Deployment to Heroku Deploy your app to Heroku along the lines of the process described in unit 8 (lessons 34 - 37). A user story should be used to guide deployment decisions. It&amp;rsquo;s arguable if this week&amp;rsquo;s work should be called a sprint, as you will not implement any new features that are of interest to users or customers.</description></item><item><title>Startup - Project Idea</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-00-project-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-00-project-ideas/</guid><description>Project Ideas Collect and Discuss your project ideas in the Forum &amp;ldquo;Project Ideas&amp;rdquo; in Moodle.
You will be working on one project throughout the term in a small, 3 person team.
You can submit and discuss any ideas for now.
You will write Project Proposals as Assignment for Week 02, and the teams will be formed during class in week 02.</description></item><item><title>Startup - Project Idea</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-00-project-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-00-project-ideas/</guid><description>Project Ideas Collect and Discuss your project ideas in the Forum &amp;ldquo;Project Ideas&amp;rdquo; in Moodle.
You will be working on one project throughout the term in a small, 3 person team.
You can submit and discuss any ideas for now.
You will write Project Proposals as Assignment for week 02, and the teams will be formed during class in week 02.</description></item><item><title>Tentative Schedule</title><link>https://bkleinen.github.io/classes/ss2014/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2014/info3/schedule/</guid><description>Week KW Tuesday Friday Lecture Topic Lab Group 1 14 01/04/2014 No Lecture (Hochschultag) 04/04/2014 Intro to Info3 2 15 04/08/2014 Software Testing 1 1. Gruppe 04/11/2014 Software Testing &amp;amp; Software Configuration Management 3 16 04/15/2014 Software Configuration Management 1 2. Gruppe 04/18/2014 No Lecture (Karfreitag) 4 17 04/22/2014 Software Engineering and Software Development Processes 2 1. Gruppe 04/25/2014 Software Development Processes,Requirements Engineering 5 18 29/04/2014 Requirements Engineering, System Modeling and Architectural Design 2 2.</description></item><item><title>Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2014/info3/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/info3/schedule/</guid><description>Week KW Tuesday Friday Lecture Topic Lab Group - &amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;- &amp;mdash;&amp;mdash;&amp;mdash;- Part 1: Intro, Tools &amp;amp; Ruby 1 41 09/10/2014 Intro to Info3 10/10/2014 Ruby Intro Installation Party 14:00-15:30 WH-C 537 for both groups! both 2 42 16/10/2014 Source Code Management and Continuous Integration 17/10/2014 More Ruby, Pair Programming and Code Review 1 - Lab Startup and Ruby Finger Exercises 1. Gruppe - &amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;- &amp;mdash;&amp;mdash;&amp;mdash;- Part 2: Software Engineering, Processes and Software Design 3 43 23/10/2014 Practical Git 24/10/2014 Software Engineering and Software Development Processes 1 - Lab Startup and Ruby Finger Exercises 2.</description></item><item><title>Topic 01 - Project Proposal</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-01-proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-01-proposal/</guid><description>Proposal Write down your project Idea as a short proposal. (1-2 Pages). You can use any kind of format. You can also include sketches how the user interface might look like.
Scope Working through different topics of web development with node and react, you will develop a web application that has
at least one model class that can be created, read, updated and deleted a user model user authentication something with real-time communication (e.</description></item><item><title>Topic 01 - Project Proposal</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-01-proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-01-proposal/</guid><description>Proposal Write down your project Idea as a short proposal. (1-2 Pages). You can use any kind of format. You can also include sketches how the user interface might look like.
Scope Working through different topics of web development with node and react, you will develop a web application that has
at least one model class that can be created, read, updated and deleted a user model user authentication something with real-time communication (e.</description></item><item><title>Topic 02 - Product Backlog</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-02-backlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-02-backlog/</guid><description>Backlog Write a simple Product Backlog for Your Project.
Don&amp;rsquo;t worry about writing too many stories, or too complex ones. You don&amp;rsquo;t need to implement all of them - and it will be easier if you have several to choose from for the sprints. You order your backlog by business value now; but you will pick stories that can be implemented with the technologies we learn(ed) during the week for each sprint.</description></item><item><title>Topic 02 - Product Backlog</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-02-backlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-02-backlog/</guid><description>Backlog Write a simple Product Backlog for Your Project.
Don&amp;rsquo;t worry about writing too many stories, or too complex ones. You don&amp;rsquo;t need to implement all of them - and it will be easier if you have several to choose from for the sprints. You order your backlog by business value now; but you will pick stories that can be implemented with the technologies we learn(ed) during the week for each sprint.</description></item><item><title>Topic 03 - Sprint 01 - First Node App</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-01-first-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/topic-01-first-node-app/</guid><description>Sprint 01: Project Ideas &amp;amp; First Node App During the first week, you will work individually. Install Node and create a first (pure) node app that serves at least one static html file.
Use the week to think about an app idea that you would like to use during the term. You can pitch your idea next week in class.
If you want to, you could use your static html site to show your idea what the app might look like.</description></item><item><title>Topic 03 - Sprint 01 - Two Static Sites</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-03-first-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-03-first-node-app/</guid><description>Sprint 01: First Node App with two static sites number the stories in your backlog (see the example below) create a static prototype for the most important story or stories in your backlog. it should contain at least two different static sites and routes. follow the tutorial in unit 01 in the book - create a simple node app without any other framework. work with git. create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo; you may also clean your git history to just have one commit per story.</description></item><item><title>Topic 04 - Sprint 02 - First Express App with view templates and dynamic content</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-04-first-express-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/topics/topic-04-first-express-app/</guid><description>Sprint 02: First Express App with view templates and dynamic content number the stories in your backlog (see the example below) choose and implement stories according to this weeks topic work with git. create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo; you may also clean your git history to just have one commit per story. tag the version where the sprint was completed with &amp;ldquo;Sprint_02&amp;rdquo; include the repo url in your status report (you can use any service, e.</description></item><item><title>Topic 04 - Sprint 02 - First Express App with view templates and dynamic content</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/topics/sprint-01/</guid><description>Sprint 01: First Express App with View Templates and Dynamic Content In the first sprint, you will mainly set up your express application and get set up with your backlog and project.
Set up the project and the backlog set up your project and backlog in the Topic Driven Backlog Tool. choose and implement stories according to this weeks topic work with git. create a branch for each story and merge it into master with a merge commit like &amp;ldquo;Story_001 Overview of Study Program&amp;rdquo; you may also clean your git history to just have one commit per story.</description></item><item><title>Troubleshooting</title><link>https://bkleinen.github.io/material/web-technology/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/material/web-technology/troubleshooting/</guid><description>Troubleshooting Steps for Rails The Rails Framework consists of a complex combination of various tools. There is no compilation step, everything is started from the command line.
As a consequence, things break at runtime, providing you with an informative stack trace and error message that help you find the problem.
You need to learn how to read those stack traces and error messages.
Here are some pointers how to do it:</description></item><item><title>User-Centered Web Technology SS2017 Schedule</title><link>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/schedule/</guid><description>Tentative Schedule - Lab Topics are subject to change! Week KW Date Lab Assignment Work during the Week Milestones Reading 1 13 Thu, 2018-04-05 Introduction 2 14 Thu, 2018-04-12 Groups, Topics, Planning of the Interviews Interview Planning 3 15 Thu, 2018-04-19 Interviews: Important Points, Planning of Interpretation Sessions User Interviews 4 16 Thu, 2018-04-26 Interpretation Sessions User Interviews 5 17 Thu, 2018-05-03 Interpretation Sessions Interpretation Sessions 7 19 Thu, 2018-05-17 &amp;mdash;&amp;mdash; Himmelfahrt &amp;mdash;&amp;mdash; Write-Up Report I 8 20 Thu, 2018-05-24 Creating the Affinity Diagram Affinity Diagram cont' 9 21 Thu, 2018-05-31 no class 10 22 Thu, 2018-06-07 Wall Walk 11 23 Thu, 2018-06-14 Visioning, Planning of Paper Prototypes Create Visions &amp;amp; Product Concepts 12 24 Thu, 2018-06-21 Creating the Paper Prototypes Paper Prototypes Creation 13 25 Thu, 2018-06-28 Creating Paper Prototypes, Evaluation Developing the Prototype Report II 14 26 Thu, 2018-07-05 Paper Prototype Evaluation &amp;amp; Retrospective Further Evaluation &amp;amp; Concept, Presentation Preparation 15 27 Thu, 2018-07-12 Final Presentations 8:45-12 Uhr!</description></item><item><title>User-Centered Web Technology SS2018</title><link>https://bkleinen.github.io/classes/ss2018/wt4/reports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/wt4/reports/</guid><description>Report 1 Start a Project Template You will have many iterations of the project template! Do not delete anything, strikeout with date.
Project Details: These include the summary of the Project Title: The Title or codename of the project. Description: A summary defining the objective of the project. Stakeholders: Members who are involved with or have requested the project. Impact Assessment: The observed or intended impact of the project deliverable: Who will be affected by this project?</description></item><item><title>User-Centered Web Technology SS2018 Schedule</title><link>https://bkleinen.github.io/classes/ss2018/wt4/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2018/wt4/schedule/</guid><description>Tentative Schedule Week KW Date Topic Reading Reports Due 1 14 Thu, 2018-04-12 Introduction to class &amp;amp; Topics Chapter 2: What is User-Centered Design &amp;amp; 3 Working with Users 2 15 Thu, 2018-04-19 Introduction to UCD 3 16 Thu, 2018-04-26 User Research up to 3/5: Personas 4 17 Thu, 2018-05-03 User Research: Personas 5 18 Thu, 2018-05-10 &amp;mdash; no class &amp;mdash; 6 19 Thu, 2018-05-17 Design the Product User Research Report 7 20 Thu, 2018-05-24 Design the Product 8 21 Mon, 2018-06-04 Low Fidelity Prototype 9 22 Thu, 2018-06-07 Low Fidelity Prototype 10 23 Thu, 2018-06-14 User Testing I Product Design Report 11 24 Thu, 2018-06-21 User Testing I 12 25 Thu, 2018-06-28 High Fidelity Prototype 13 26 Thu, 2018-07-05 Input on A/B Tests and Prototype Tests / High Fidelity Prototype 14 27 Thu, 2018-07-12 Input on Usability Tests / User Testing II 15 28 Thu, 2018-07-19 User Testing II 16 29 Thu, 2018-07-26 Final Presentations Final Report (tbd) Resources Personas Required Reading about Personas: Chapter 4: Personas.</description></item><item><title>Web Applications WS2014/2015 - Schedule</title><link>https://bkleinen.github.io/classes/ws2014/webapplications/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2014/webapplications/schedule/</guid><description>||| |a|b|
Topics - general Thoughts do Web Application Frameworks first: Rails, Angular, Meteor. With an emphasis on Rails and Angular. I could do one lecture about Tools: Scrum, POEAA, TDD, SCM/Git, Continuous Integration Security should be part of all topics General Topics Security, Security, Security Week KW Thursday Orga Lecture Topic Group Source 1 41 10/10/2014 Intro to Web Applications bentobox 2 42 16/10/2014 Referatsthemen festlegen Projekt Topics Pitch 3 43 23/10/2014 Web Projekt Themen festlegen Ruby on Rails B.</description></item><item><title>Web Applications WS2015/2016 - Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/schedule/</guid><description>Tentative - this will still be changed and adapted.
Week KW Date Topic Groups/Names Homework 1 41 Thu, 2015-10-08 e-learning: Rails Startup &amp;ndash; &amp;ndash; 2 42 Thu, 2015-10-15 e-learning: Rails Startup &amp;ndash; &amp;ndash; 3 43 Thu, 2015-10-22 Introduction, Ruby, Presentation Topics &amp;mdash; Find Topic and Group for Rails Project (Moodle), Ruby Koans 4 44 Thu, 2015-10-29 Settlement of Presentation Topics BK Homework 1 Rails: Active Record and Associations BK 5 45 Thu, 2015-11-05 Rails: Routing, Active Records Queries, Deployment, Migrations BK Homework 2 6 46 Thu, 2015-11-12 Rails: Integration Tests and CI Servers BK 7 47 Thu, 2015-11-19 Rails: Routing, Patterns and MVC BK Homework 3 8 48 Thu, 2015-11-26 Rails: Feature Tests, Session Management in Rails BK Homework 4 CSS and Responsive Design Matthias, Simon 9 49 Thu, 2015-12-03 NodeJS Konrad, Joshua und Stefan Homework 5 - Sprint 1 15:45-17:15 AngularJS Konstantin, Sebastian, Markus 10 50 Thu, 2015-12-10 AngularJS Katia, Ludwig Homework 6 - Sprint 2 15:45-17:15 JavaScript: Foundations and Manipulating the DOM TBD 11 51 Thu, 2015-12-17 JavaScript, Ecma 6, AJAX Christina, Nadine, Tu Homework 7 - Sprint 3 Testing, TDD, BDD, UI-Testing Lars, Jessica 14 1 Thu, 2016-01-07 Build/Release Process: Hosting &amp;amp; Deployment, Continuous Delivery Tim, Stefan K.</description></item><item><title>Web Applications WS2015/2016 - Homework 1</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week1/</guid><description>Homework for Week 1 Project description: Describe your Project on about half a page in complete sentences. Create a github repository and list your project in the wiki: https://github.com/htw-imi-wt1wa-ws2015/rails-projects/wiki Create Use Case Scenarios accompanied with Screen Scribbles for at least one Use Case per Person. Design a Domain Model for your Project. Document it using UML. It should show the associations between the Model classes. Create a Rails app and your models.</description></item><item><title>Web Applications WS2015/2016 - Homework 11</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week11/</guid><description>Homework for Week 11 / Sprint 7 You just keep working on your Project, one Story in your Backlog at a time:
include the backlog in your report. For each story, list its number/id its name storypoints sprint(s) it was/is in (eg. sprint3, or: sprint4(committed, but not completed) sprint5 (completed) etc.) include your level of done in each report, such that I don&amp;rsquo;t have to search for it. (you should have that starting with sprint4) for each story you&amp;rsquo;ve been working on, write down acceptance criteria.</description></item><item><title>Web Applications WS2015/2016 - Homework 2</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week2/</guid><description>Homework for Week 2 Make sure that you&amp;rsquo;re clear on the associations between the classes in your domain model. Create Migrations for adding the foreign keys and, if needed, association tables to the database. Write down the commands you used. You should have at least two associations of different kinds. Run the migrations. Experiment using the rails console to create AR Instances and Associations. using this, create a rake task db:populate to create example data.</description></item><item><title>Web Applications WS2015/2016 - Homework 3</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week3/</guid><description>Homework for Week 3 Decide on (at least) one more advanced view making use of an association, design and implement it. Find a way to practice working with the request parameters that makes sense in your application, e.g. implement a search implement a sort on a field create forms editing more than one object If you&amp;rsquo;re more than 2 people in the group, pick a second view to work on. Add rspec and basic test cases as discussed in class.</description></item><item><title>Web Applications WS2015/2016 - Homework 4</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week4/</guid><description>Homework for Week 4 Create end-to-end (feature or integration tests) for the feature or feature you&amp;rsquo;ve created last week. Create a test for exercise 2 of last week (search, sort, etc, whatever you&amp;rsquo;ve created) create more feature tests if you want to. create a hand-rolled login-procedure following Chapter 8 of Michael Hartl&amp;rsquo;s Tutorial. (note: this is to do it once yourself, you wouldn&amp;rsquo;t create your own in a real project, but rather use a library) Do this either test-driven or add feature tests for the successful login.</description></item><item><title>Web Applications WS2015/2016 - Homework 5</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week5/</guid><description>Homework for Week 5 / Sprint 1 Provide a short description for your Project: Goals/Vision, which Technologies you want to use. Create a backlog for your Project. See https://www.mountaingoatsoftware.com/blog/a-sample-format-for-a-spreadsheet-based-product-backlog for an example. Make sure your stories have an ID and that you have a way to prioritize your backlog. Decide on one, two or a few stories you want to start with. You&amp;rsquo;re still learning the technology, but you should have a goal you&amp;rsquo;re aiming at.</description></item><item><title>Web Applications WS2015/2016 - Homework 6</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week6/</guid><description>Homework for Week 6 / Sprint 2 Prioritize your backlog. Estimate a couple of stories. Create a screen flow for the next or next few stories. Mark these stories as being part of SPRINT2. Using an HTML templating engine / HTML generator library that can be used with your framework to create a click-dummy for the user stories. Make sure to mark the basic installation as your &amp;ldquo;initial commit&amp;rdquo; and document each step with a commit reading something like &amp;ldquo;Story 4711: did this and that&amp;rdquo; Use the simple git workflow described in the links below to generate merges per story.</description></item><item><title>Web Applications WS2015/2016 - Homework 7</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week7/</guid><description>Homework for Week 7 / Sprint 3 Review and groom your Backlog. That is, if you&amp;rsquo;re created a click-dummy for one or more stories, you should defined new stories for actually implementing the functionality. Don&amp;rsquo;t forget to estimate them. Perform a Sprint Planning in your Team. Make sure you understand and write down the acceptance criteria for each story! Document the Tasks you identified for each of your stories. Decide on which stories you want to commit - that is, you are pretty sure you can complete till the next deadline.</description></item><item><title>Web Applications WS2015/2016 - Homework 8</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week10/</guid><description>Homework for Week 10 / Sprint 6 You just keep working on your Project, one Story in your Backlog at a time:
include the backlog in your report. For each story, list its number/id its name storypoints sprint(s) it was/is in (eg. sprint3, or: sprint4(committed, but not completed) sprint5 (completed) etc.) include your level of done in each report, such that I don&amp;rsquo;t have to search for it. (you should have that starting with sprint4) for each story you&amp;rsquo;ve been working on, write down acceptance criteria.</description></item><item><title>Web Applications WS2015/2016 - Homework 8</title><link>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2015/wt1wa/homework/week8/</guid><description>Homework for Week 8 / Sprint 4 If you haven&amp;rsquo;t done that yet, start testing your application. Define your level of done. see this article, for example. Perform a Sprint Planning in your Team. Document the Tasks you identified for each of your stories. Decide on which stories you want to commit - that is, you are pretty sure you can complete till the next deadline. It&amp;rsquo;s ok to plan another story (or two) that you don&amp;rsquo;t yet commit on.</description></item><item><title>Web Applications WS2019/2020</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework0/</guid><description>Assignment 1 Bitte eine Seite schreiben zu den Fragen:
Foto und Name Was bringe ich mit? Was möchte ich lernen/vertiefen? Welche Use Cases / User Stories sind für die App zu implementieren? In welchen Arbeitsgruppen waren Sie? Bitte fassen Sie das Ergebnis einer Arbeitsgruppe kurz in eigenen Worten zusammen. bis DIENSTAG abend 22:00 als PDF in Moodle hochladen.</description></item><item><title>Web Applications WS2019/2020</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework1/</guid><description>Assignment 2 Based on the Storys defined in Class, prepare Storyboards and where suitable Paper Prototypes for at least the first Story.
Reading Material:
Storyboards Brief Intro in Contextual Design Article Chapter 12 of Rapid Contextual Design (Moodle) Chapter 13 of Contextual Design (Moodle, optional) Paper Prototypes Brief Intro in Contextual Design Article Chapter 13 Rapid Contextual Design (Moodle) Chapter 17 Validating the Design (Moodle, optional) Videos, optional: Video: Google Rapid Prototyping 1 of 3: Sketching &amp;amp; Paper Prototyping Video: Web Application - Paper Prototype Design Thinking - Paper Prototypes - including a paper prototype for a service The articles in moodle refer to a method called &amp;ldquo;Contextual Design&amp;rdquo; by Holtzblatt and Beyer.</description></item><item><title>Web Applications WS2019/2020</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/homework3/</guid><description>Assignment 3 This weeks work has two main parts:
perform a Paper Prototype Usability Test Set up your Project with SCM Paper Prototype Usability Test Use the time in class to run a brief usability test based on your paper prototypes. Make sure you&amp;rsquo;re testing a clearly defined tasks, and assign the roles User, Human Computer, Facilitator/Notetaker and Oberservers as described in Paper Prototyping As A Usability Testing Technique.
Reading Material:</description></item><item><title>Web Applications WS2019/2020 - Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/schedule/</guid><description>Tentative - this will still be changed and adapted.
Tentative Schedule Week KW Date What Who Homework / Due Tue 22:00 next week 1 41 Thu 10/10/2019 Class Intro BK Homework 0 2 42 Thu 17/10/2019 User Story Mapping &amp;amp; First Project BK 3 43 Thu 24/10/2019 Paper Prototypes / Storyboards BK 4 44 Thu 31/10/2019 e-learning 5 45 Thu 07/11/2019 Patterns of Enterprise Application Architectures BK Continuous Deployment BK 6 46 Thu 14/11/2019 Gemeinsamer Besuch des World Usability Days - bitte anmelden!</description></item><item><title>Web Applications WS2019/2020 - Homework 1</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week1/</guid><description>Homework for Week 1 Project description: Describe your Project on about half a page in complete sentences. Create a github repository and list your project in the wiki: https://github.com/htw-imi-wt1wa-ws2015/rails-projects/wiki Create Use Case Scenarios accompanied with Screen Scribbles for at least one Use Case per Person. Design a Domain Model for your Project. Document it using UML. It should show the associations between the Model classes. Create a Rails app and your models.</description></item><item><title>Web Applications WS2019/2020 - Homework 11</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week11/</guid><description>Homework for Week 11 / Sprint 7 You just keep working on your Project, one Story in your Backlog at a time:
include the backlog in your report. For each story, list its number/id its name storypoints sprint(s) it was/is in (eg. sprint3, or: sprint4(committed, but not completed) sprint5 (completed) etc.) include your level of done in each report, such that I don&amp;rsquo;t have to search for it. (you should have that starting with sprint4) for each story you&amp;rsquo;ve been working on, write down acceptance criteria.</description></item><item><title>Web Applications WS2019/2020 - Homework 2</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week2/</guid><description>Homework for Week 2 Make sure that you&amp;rsquo;re clear on the associations between the classes in your domain model. Create Migrations for adding the foreign keys and, if needed, association tables to the database. Write down the commands you used. You should have at least two associations of different kinds. Run the migrations. Experiment using the rails console to create AR Instances and Associations. using this, create a rake task db:populate to create example data.</description></item><item><title>Web Applications WS2019/2020 - Homework 3</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week3/</guid><description>Homework for Week 3 Decide on (at least) one more advanced view making use of an association, design and implement it. Find a way to practice working with the request parameters that makes sense in your application, e.g. implement a search implement a sort on a field create forms editing more than one object If you&amp;rsquo;re more than 2 people in the group, pick a second view to work on. Add rspec and basic test cases as discussed in class.</description></item><item><title>Web Applications WS2019/2020 - Homework 4</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week4/</guid><description>Homework for Week 4 Create end-to-end (feature or integration tests) for the feature or feature you&amp;rsquo;ve created last week. Create a test for exercise 2 of last week (search, sort, etc, whatever you&amp;rsquo;ve created) create more feature tests if you want to. create a hand-rolled login-procedure following Chapter 8 of Michael Hartl&amp;rsquo;s Tutorial. (note: this is to do it once yourself, you wouldn&amp;rsquo;t create your own in a real project, but rather use a library) Do this either test-driven or add feature tests for the successful login.</description></item><item><title>Web Applications WS2019/2020 - Homework 5</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week5/</guid><description>Homework for Week 5 / Sprint 1 Provide a short description for your Project: Goals/Vision, which Technologies you want to use. Create a backlog for your Project. See https://www.mountaingoatsoftware.com/blog/a-sample-format-for-a-spreadsheet-based-product-backlog for an example. Make sure your stories have an ID and that you have a way to prioritize your backlog. Decide on one, two or a few stories you want to start with. You&amp;rsquo;re still learning the technology, but you should have a goal you&amp;rsquo;re aiming at.</description></item><item><title>Web Applications WS2019/2020 - Homework 6</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week6/</guid><description>Homework for Week 6 / Sprint 2 Prioritize your backlog. Estimate a couple of stories. Create a screen flow for the next or next few stories. Mark these stories as being part of SPRINT2. Using an HTML templating engine / HTML generator library that can be used with your framework to create a click-dummy for the user stories. Make sure to mark the basic installation as your &amp;ldquo;initial commit&amp;rdquo; and document each step with a commit reading something like &amp;ldquo;Story 4711: did this and that&amp;rdquo; Use the simple git workflow described in the links below to generate merges per story.</description></item><item><title>Web Applications WS2019/2020 - Homework 7</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week7/</guid><description>Homework for Week 7 / Sprint 3 Review and groom your Backlog. That is, if you&amp;rsquo;re created a click-dummy for one or more stories, you should defined new stories for actually implementing the functionality. Don&amp;rsquo;t forget to estimate them. Perform a Sprint Planning in your Team. Make sure you understand and write down the acceptance criteria for each story! Document the Tasks you identified for each of your stories. Decide on which stories you want to commit - that is, you are pretty sure you can complete till the next deadline.</description></item><item><title>Web Applications WS2019/2020 - Homework 8</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week10/</guid><description>Homework for Week 10 / Sprint 6 You just keep working on your Project, one Story in your Backlog at a time:
include the backlog in your report. For each story, list its number/id its name storypoints sprint(s) it was/is in (eg. sprint3, or: sprint4(committed, but not completed) sprint5 (completed) etc.) include your level of done in each report, such that I don&amp;rsquo;t have to search for it. (you should have that starting with sprint4) for each story you&amp;rsquo;ve been working on, write down acceptance criteria.</description></item><item><title>Web Applications WS2019/2020 - Homework 8</title><link>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/m-wt1-webapplications/assignments/week8/</guid><description>Homework for Week 8 / Sprint 4 If you haven&amp;rsquo;t done that yet, start testing your application. Define your level of done. see this article, for example. Perform a Sprint Planning in your Team. Document the Tasks you identified for each of your stories. Decide on which stories you want to commit - that is, you are pretty sure you can complete till the next deadline. It&amp;rsquo;s ok to plan another story (or two) that you don&amp;rsquo;t yet commit on.</description></item><item><title>Web Applications WS2020/2021 - Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2020/m-wt1-webapplications/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/m-wt1-webapplications/schedule/</guid><description>Tentative Schedule Week KW Date Topic 1 41 Fri 09/10/2020 Class Intro 2 42 Fri 16/10/2020 Design Sprint: Monday - Map &amp;amp; Target 3 43 Fri 23/10/2020 Design Sprint: Tuesday - Sketch 4 44 Fri 30/10/2020 Design Sprint: Wednesday - Decide 5 45 Fri 06/11/2020 Design Sprint: Thursday - Prototype 6 46 Fri 13/11/2020 Design Sprint: Friday - Test 7 47 Fri 20/11/2020 &amp;ndash; no class &amp;ndash; 8 48 Fri 27/11/2020 Tech Pitch 9 49 Fri 04/12/2020 Development 10 50 Fri 11/12/2020 Development 11 51 Fri 18/12/2020 Development 12 1 Fri 08/01/2021 Development 13 2 Fri 15/01/2021 Development 14 3 Fri 22/01/2021 &amp;ndash; 15 4 Fri 29/01/2021 Usability Assessment 16 5 Fri 05/02/2021 Security Assessment &amp;amp; Group Consultations 17 6 Fri 12/02/2021 Showtime der Praxisprojekte</description></item><item><title>Web Applications WS2020/2021 - Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2021/m-wt1-webapplications/schedule/</guid><description>The schedule is, as always, tentative.
Week KW Date The App Hand-Ins (mon before) 1 41 Tue 12/10/2021 Class Intro 2 42 Tue 19/10/2021 no class 3 43 Tue 26/10/2021 Design Sprint: Monday - Map &amp;amp; Target 4 44 Tue 02/11/2021 Design Sprint: Tuesday - Sketch 5 45 Tue 09/11/2021 Design Sprint: Wednesday - Decide 6 46 Tue 16/11/2021 Design Sprint: Thursday - Prototype 7 47 Tue 23/11/2021 Design Sprint: Friday - Test 8 48 Tue 30/11/2021 Tech Pitch, Decision &amp;amp; Dev Planning 9 49 Tue 07/12/2021 (cancelled) 10 50 Tue 14/12/2021 Development / CI/CD Pipeline 11 51 Tue 21/12/2021 Development / Containers Project Descriptions / Technical Challenge 52 Tue 28/12/2021 &amp;mdash; Vorlesungsfrei &amp;mdash; 12 1 Tue 04/01/2022 13 2 Tue 11/01/2022 Development / Usability 10.</description></item><item><title>Web Applications WS2020/2021 - Sprint Day 1 - Monday</title><link>https://bkleinen.github.io/classes/ws2020/m-wt1-webapplications/sprint/day1-monday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2020/m-wt1-webapplications/sprint/day1-monday/</guid><description>Day 1 (Monday): Map how to: https://www.thesprintbook.com/remote#map Schedule See the Checklist
Preparation Decide who will be the Decider and who the Facilitator Fill out the SprintPlanner for your Team and upload it to Moodle Monday 10 a.m. Explain the Sprint (10min?) 10:15-ish Set a long-term goal List Sprint Questions (30min?) 11:30-ish Make a map: use The Design Sprint Note-n-Map - (45min?) sum: 90 min?
1pm Lunch Break 2pm Ask the Experts: dies können Sie überspringen, bzw.</description></item><item><title>Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/schedule/</guid><description>Tentative. Aka subject to possible change.
Week KW Date Topic Assignment 1 15 Wed, 2017-06-21 Ruby and Ruby on Rails, Project Start Week1 2 16 Wed, 2017-07-05 Active Record, Associations and Migrations Week2 3 17 Wed, 2017-07-12 Testing, Deployment Workflow Week3 4 18 Wed, 2017-07-19 User Authentication and Templates, AJAX Week4 5 19 Wed, 2017-07-26 Open Practice Week5</description></item><item><title>Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ws2016/media-programming-rails/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2016/media-programming-rails/schedule/</guid><description>Tentative. Aka subject to possible change.
Week KW Date Topic Assignment 1 41 Wed, 2016-10-12 Rails Dash, Project Start Week1 2 42 Wed, 2016-10-19 Active Record Associations and Migrations Week2 3 43 Wed, 2016-10-26 Testing, Deployment Workflow, Ruby Week3 4 44 Wed, 2016-11-02 User Authentication and Templates Week4 5 45 Wed, 2016-11-09 AJAX, SPA and APIs</description></item><item><title>Week 1 - First Steps in Ruby and Ruby on Rails</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-1/</guid><description>Overview install ruby and ruby on rails contribute to the ruby-learning project create a project vision and backlog work through the &amp;ldquo;getting started with rails&amp;rdquo;-guide 0. Install Ruby and Ruby on Rails There are hints for installtation in the Getting Started with Rails Guide linked below.
1. contribute to the ruby-learning project In class, we will / did start a project to learn about ruby: https://github.com/htw-imi-m1-ss2017/ruby-learning
Finish one topic per person.</description></item><item><title>Week 2 - Active Record Associations, Migrations and Views</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-2/</guid><description>Week 2 ongoing: Contribute to the Ruby-Learning project If you haven&amp;rsquo;t already, contribute to the ruby learning project:
https://github.com/htw-imi-m1-ss2017/ruby-learning
Finish one topic per person. Please send me your github login to add you as a contributor for the project.
Active Record Associations, Migrations and Views Reading and preparation You should have enough background information for working on this week&amp;rsquo;s assignment based on the Getting started with Rails you worked through last week.</description></item><item><title>Week 3 - Testing, CI and CD</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-3/</guid><description>Week 3 Reading In week 3, we&amp;rsquo;ll work on Rails Testing. Please read through the Rails Testing Guide and have a look at the Capybara DSL which we will use to write end-to-end feature tests.
A Guide to Testing Rails Applications Capybara&amp;rsquo;s DSL Also, we&amp;rsquo;ll set up continuous integration and continuous deployment using the services travis and heroku respectively.
Travis for Ruby Rails 5 on Heroku Background Martin Fowler: Continuous Integration Continuous Integration - The digest on the Thoughtworks Page Testing, Setting up a Deployment Workflow, and some Ruby Working on your project again, see the example project for clarification on what to do.</description></item><item><title>Week 4&amp;5 - Login and AJAX</title><link>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-4-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/media-programming-rails/assignments/week-4-5/</guid><description>In the last two weeks, you will add a simple login-mechanism and add a bit of JavaScript.
Reading For next week, read about rolling your own authentication in rails:
Michael Hartl&amp;rsquo;s Rails Tutorial Chapter 8 Alternatively, you can decide to use a third-party framework like devise, for example devise ;-) for authentication: Plataformatec: devise Working with JavaScript in Rails Authentication /Login &amp;amp; Logout For hand rolled variant: Add a user model and set it up with encrypted password Add Sessions, Login and Logout to your application Restrict Access to Some Pages Again, see the example project for clarification on what to do.</description></item><item><title>WT2 Poster Session</title><link>https://bkleinen.github.io/classes/ws2018/wt2/postersession/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/postersession/</guid><description>Topics Chapter Pages Who? 0 Chapter 07: A Basis for Good Product Behavior 12 BK 1 Chapter 08: Introduction 26 2 Chapter 09: Platform and Posture 31 3 Chapter 10: Optimizing for Intermediates 11 4 Chapter 11: Orchestration and Flow 22 5 Chapter 12: Reducing Work and Eliminating Excise 27 6 Chapter 13: Metaphors, Idioms, and Affordances 25 7 Chapter 14: Rethinking Data Entry, Storage, and Retrieval 31 8 Chapter 15: Preventing Errors and Informing Decisions 22 9 Chapter 16: Designing for Different Needs 26 10 Chapter 17: Integrating Visual Design 28 Timetable Min Topic 30 Introduction 60 Reading &amp;amp; Self-Study Break 30 Poster Creation 60 Poster Session Relevanz und Auswertung (Chapter 08-17) Eine Klausur-Frage zu Ihrem eigenen Kapitel Eine Klausur-Frage zu einem von Ihnen gewählten anderen Kapitel</description></item><item><title>WT2 Poster Session</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/postersession/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/postersession/</guid><description>Topics Chapter Pages Who? 0 Chapter 07: A Basis for Good Product Behavior 12 BK 1 Chapter 08: Digital Etiquette 26 2 Chapter 09: Platform and Posture 31 3 Chapter 10: Optimizing for Intermediates 11 4 Chapter 11: Orchestration and Flow 22 5 Chapter 12: Reducing Work and Eliminating Excise 27 6 Chapter 13: Metaphors, Idioms, and Affordances 25 7 Chapter 14: Rethinking Data Entry, Storage, and Retrieval 31 8 Chapter 15: Preventing Errors and Informing Decisions 22 9 Chapter 16: Designing for Different Needs 26 10 Chapter 17: Integrating Visual Design 28 Timetable Min Topic 30 Introduction 60 Reading &amp;amp; Self-Study Break 30 Poster Creation 60 Poster Session Relevanz und Auswertung (Chapter 08-17) Eine Klausur-Frage zu Ihrem eigenen Kapitel Eine Klausur-Frage zu einem von Ihnen gewählten anderen Kapitel</description></item><item><title>WT2 Usability WS 2019/20</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/literature/</guid><description/></item><item><title>WT2 Usability WS 2019/20 Schedule</title><link>https://bkleinen.github.io/classes/ws2019/wt2-usability/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2019/wt2-usability/schedule/</guid><description>Week KW Date Due Lecture Lab 1 41 Fri 11/10/2019 Introduction, Guidelines Usability Heuristics Topic Brainstorming 2 42 Fri 18/10/2019 Overview UCD Process, Introduction e-learning Finalization of Topics and Project Focus 3 43 Fri 25/10/2019 Usability Heuristics e-learning Heuristical Analysis of Example Applications 4 44 Fri 01/11/2019 A1 Contextual Inquiry. Required Reading: About Face Ch.1+2 (Moodle) Contextual Interviews &amp;amp; Interpretation Sessions 5 45 Fri 08/11/2019 Personas. Required Reading: About Face Ch.</description></item><item><title>WT2 WS 2018/19</title><link>https://bkleinen.github.io/classes/ws2018/wt2/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/literature/</guid><description/></item><item><title>WT2 WS2018 Schedule</title><link>https://bkleinen.github.io/classes/ws2018/wt2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2018/wt2/schedule/</guid><description>Week KW Date Due Lecture Lab 1 41 Tue, 2018-10-09 Introduction, Guidelines Usability Heuristics Topic Brainstorming 2 42 Tue, 2018-10-16 Overview UCD Process, Introduction e-learning Finalization of Topics and Project Focus 3 43 Tue, 2018-10-23 * Usability Heuristics e-learning Heuristical Analysis of Example Applications 4 44 Tue, 2018-10-30 A1 User Research and Modeling. Required Reading: About Face Ch.1+2 (Moodle) 5 45 Tue, 2018-11-06 User Research and Modeling. Required Reading: About Face Ch.</description></item><item><title>WT4 SS2017 - Report 1</title><link>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-1/</guid><description>Report 1: Contextual Inquiry The first report is due before our next meeting: 31/05/2017, 22:00
It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Contextual Inquiry Your Qualification Questions as well your Script for soliciting interviewees any other preparation for the interviews For each interview: (You should do at least 2 interviews per person in your team) the results of the interpretation session: Student/User/Person Profile Affinity Notes captured in the interpretation session Any other Artefacts/Notes made during the interpretation session or that seem otherwise relevant Reflection A reflection on the work you did so far in the scheme of a retrospective:</description></item><item><title>WT4 SS2017 - Report 2</title><link>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-2/</guid><description>Report 2: Visioning and Product Concepts The second report is due Sunday, July 9th, 22:00
It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Affinity Diagrams and Wall Walk Fotos of your Affinity Diagrams, summary of the main categories. List of Issues Hot Ideas The latter list can be included as clearly readable fotos of the Flipcharts.</description></item><item><title>WT4 SS2017 - Report 3</title><link>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2017/user-centered-web-technology/labs/report-3/</guid><description>The final Report should present your work for this course as a whole, with an emphasis of the product concept as you&amp;rsquo;ve presented it in the final presentation.
Please include the first two reports as well as your presentation slides, compiling a coherent report on the complete project.
The only new content would be the evaluation of the prototypes as a special section, and probably a rewrite / addition to the product concept as a result of this evaluation.</description></item><item><title>WT4 SS2020 - Report 1</title><link>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-1/</guid><description>Report 1: Contextual Inquiry The first report is due before our next meeting: tbd, 22:00
It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Contextual Inquiry any other preparation for the interviews For each interview: (You should do at least 2 interviews per person in your team) the results of the interpretation session: Student/User/Person Profile Affinity Notes captured in the interpretation session Any other Artefacts/Notes made during the interpretation session or that seem otherwise relevant Reflection A reflection on the work you did so far in the scheme of a retrospective:</description></item><item><title>WT4 SS2020 - Report 2</title><link>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-2/</guid><description>Report 2: Visioning and Product Concepts The second report is due tbd, 22:00
It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Affinity Diagrams and Wall Walk Fotos of your Affinity Diagrams, summary of the main categories. List of Issues Hot Ideas The latter list can be included as clearly readable fotos of the Flipcharts.</description></item><item><title>WT4 SS2020 - Report 3</title><link>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/labs/report-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/labs/report-3/</guid><description>The final Report should present your work for this course as a whole, with an emphasis of the product concept as you&amp;rsquo;ve presented it in the final presentation.
Please include the first two reports as well as your presentation slides, compiling a coherent report on the complete project.
The only new content would be the evaluation of the prototypes as a special section, and probably a rewrite / addition to the product concept as a result of this evaluation.</description></item><item><title>WT4 SS2020 - Report 3</title><link>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/reports/report-3/</guid><description>The third and final report should summarize your whole project, starting with the visions and product concepts this term as this was the start of your individual project.
Paper Prototypes in their final state Include Fotos or other appropriate Form of Documentation of the paper prototypes, Interpretation Notes of the Interview Sessions and Documentation / Changes you made based on these interviews.
Videos are also great to include, but please upload them to the mediathek or somewhere else and just provide a link in your reports.</description></item><item><title>WT4 SS2020 - User-Centered Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/m-wt4-ucd/schedule/</guid><description>Tentative Schedule - Lab Topics are subject to change! Week KW Date Lab Assignment Work during the Week Milestones Reading 1 14 Thu 02/04/2020 Introduction Chapter 1 - Introduction &amp;amp; Chapter 2 - User Data Drives Design (27 + 11 P.) 2 15 Thu 09/04/2020 Interview Planning Chapter 3 - Principles of Contextual Inquiry (43-80, 37 P.) 3 16 Thu 16/04/2020 Groups, Topics, Planning of the Interviews User Interviews &amp;amp; Interpretation Sessions with peers Chapter 4 - The Interpretation Session (P81-105, 26P.</description></item><item><title>WT4 SS2021 - Report 1</title><link>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-1/</guid><description>Report 1: Contextual Inquiry The first report is due before our next meeting: tbd, 22:00
It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Contextual Inquiry Your Qualification Questions as well your Script for soliciting interviewees any other preparation for the interviews For each interview: (You should do at least 2 interviews per person in your team) the results of the interpretation session: Student/User/Person Profile Affinity Notes captured in the interpretation session Any other Artefacts/Notes made during the interpretation session or that seem otherwise relevant Reflection A reflection on the work you did so far in the scheme of a retrospective:</description></item><item><title>WT4 SS2021 - Report 2</title><link>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-2/</guid><description>Report 2: Affinity Diagram and Wall Walk It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Documentation of Affinity Diagrams and Wall Walk Slide Show to present your Affinity. See the caption on Page 204 in Rapid Contextual Design, &amp;ldquo;Comunicating with slide shows - the language of managers and corporations&amp;rdquo; for an suggestion on how to present the user data from the affinity in a slide show.</description></item><item><title>WT4 SS2021 - Report 3</title><link>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-3/</guid><description>Report 3: Visioning and Product Concepts It should be submitted to moodle as pdf and contain the following parts:
Overview Your topic, goal and names of all persons in your team Personas include your Personas. Visioning Document the
Visions developed, their structured evaluation, Product Concepts the Product Concept and the results of the cool drilldown. If Fotos of your Flipcharts/Artefacts are legible and speak for their own, they are sufficient.</description></item><item><title>WT4 SS2021 - Report 4</title><link>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/reports/report-4/</guid><description>Report 4: Prototype Evaluation and Summary This report should summarize your whole project, starting with the visions and product concepts this term as this was the start of your individual project.
Paper Prototypes in their final state Include Fotos or other appropriate Form of Documentation of the paper prototypes, Interpretation Notes of the Interview Sessions and Documentation / Changes you made based on these interviews.
Videos are also great to include, but please upload them to the mediathek or somewhere else and just provide a link in your reports.</description></item><item><title>WT4 SS2021 - User-Centered Web Technology Schedule</title><link>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/m-wt4-ucd/schedule/</guid><description>Tentative Schedule - definitive only for the week to come. Week KW Date Reading Schedule (Tentative) Work during the Week Course Meeting 1 14 Fri 09/04/2021 Video: Karen Holtzblatt - Contextual Design &amp;amp; The Cool Concepts Karen Holtzblatt: UX Y’All 2020 – Remote Contextual Design Introduction to class 2 15 Fri 16/04/2021 Chapter 1 - Introduction &amp;amp; Chapter 2 - User Data Drives Design (27 + 11 P.) Interview logistics Finalizaton of Topics &amp;amp; Groups 3 16 Fri 23/04/2021 Chapter 3 - Principles of Contextual Inquiry (43-80, 37 P.</description></item><item><title>WTAT1 Literature</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/literature/</guid><description>You will develop an application using the MERN - Stack: Mongo, Express, React and Node.
During the Term, we will mainly use these books:
MERN Stack Fischer, Ludovico (2017): React for Real. Raleigh: The Pragmatic Bookshelf. Redmond, Eric, Wilson, Jim R. (2012): Seven Databases in Seven Weeks. Raleigh: The Pragmatic Bookshelf. Wexler, Jonathan (2019): Get Programming with Node.js. Shelter Island: Manning. Source Code for this book on Github. Agile Development and Scrum: Scrum Foundations eLearning Series on scrumalliance.</description></item><item><title>WTAT1 Literature</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/literature/</guid><description>Literature and Resources Textbook for Node, Express and Mongo Wexler, Jonathan (2019): Get Programming with Node.js. Shelter Island: Manning. Source Code for this book on Github. JavaScript Mozilla Developer Network - JavaScript Guide Eloquent JavaScript 3rd Edition JavaScript Tutorial w3schools Vue Documentation on vue.js site - concrete parts will be assigned to the vue sprints Agile Development and Scrum: Scrum Foundations eLearning Series on scrumalliance.org The Scrum Guide</description></item><item><title>WTAT1 Literature</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/literature/</guid><description>Textbook for Node, Express and Mongo Wexler, Jonathan (2019): Get Programming with Node.js. Shelter Island: Manning. Source Code for this book on Github. JavaScript Mozilla Developer Network - JavaScript Guide Eloquent JavaScript 3rd Edition JavaScript Tutorial w3schools Express Express.js Home Page Mongo DB Mongo DB Home Page Agile Development and Scrum: Scrum Foundations eLearning Series on scrumalliance.org The Scrum Guide</description></item><item><title>WTAT1 Literature</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/literature/</guid><description>Textbook for Node, Express and Mongo Wexler, Jonathan (2019): Get Programming with Node.js. Shelter Island: Manning. Source Code for this book on Github. JavaScript Mozilla Developer Network - JavaScript Guide Eloquent JavaScript 3rd Edition JavaScript Tutorial w3schools Express Express.js Home Page Mongo DB Mongo DB Home Page Agile Development and Scrum: Scrum Foundations eLearning Series on scrumalliance.org The Scrum Guide</description></item><item><title>WTAT1 Schedule</title><link>https://bkleinen.github.io/classes/ss2020/wtat1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2020/wtat1/schedule/</guid><description>Tentative Schedule. Agile Track: please read or watch the according material in the Scrum Guide. Lecture: Brief input about the topic as BBB lecture. Tech Track: Please read the provided material (moodle) before the lecture, such that you can start with the according sprint right away.
Week KW Date Agile Track Lecture Tech Track (According Sprints are due one week later) Due 1 15 Tue 07/04/2020 Intro Node.js Unit 0 - Installation and Setup A0: Project Ideas 2 16 Tue 14/04/2020 Product Backlog A1: Proposals 3 17 Tue 21/04/2020 Scrum Theory and Values Node.</description></item><item><title>WTAT1 Schedule Summer Term 2021</title><link>https://bkleinen.github.io/classes/ss2021/wtat1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2021/wtat1/schedule/</guid><description>This is to be read as follows: For example: During Week 2 of the term - which is Calendar Week 15 - you need to study the agile and tech topic, first individually and then within the team. Furthermore, you need to work on the corresponding sprint and turn in the sprint report by Friday, 22:00
Reading Material for the Tech Topics can be found in Moodle. For the Agile Topics, read the scrum guides and watch these short videos.</description></item><item><title>WTAT1 Schedule Summer Term 2022</title><link>https://bkleinen.github.io/classes/ss2022/wtat1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2022/wtat1/schedule/</guid><description>Overview Summer Term 2022 Week KW Agile Topic Tech Topic Development Date Time Presentations/Class Meeting 1 14 Scrum Theory and Values Unit 0 - Installation and Setup Fri 08/04/2022 15:45-17:15 Introduction to Class, Scrum Overview, Product Backlogs 15 ** Good Friday ** Fri 15/04/2022 15:45-17:15 No class meeting 2 16 Scrum Artifacts: Product Backlog Unit 1 - Getting Started Sprint 01 - Static Node App Fri 22/04/2022 15:45-17:15 Project Proposals and Teams, Presentation Assignments, Node.</description></item><item><title>WTAT1 Schedule Summer Term 2023</title><link>https://bkleinen.github.io/classes/ss2023/wtat1/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ss2023/wtat1/schedule/</guid><description>Overview Summer Term 2023 Week KW Agile Topic Tech Topic Development Date Time Presentations/Class Topics 1 15 Scrum Theory and Values Unit 0 - Installation and Setup Fri 14/04/2023 15:45-17:15 Introduction to Class, Scrum Overview, Product Backlogs 2 16 Scrum Artifacts: Product Backlog Unit 1 - Getting Started Sprint 01 - Static Node App Fri 21/04/2023 15:45-17:15 Project Proposals and Teams, Presentation Assignments, Node.js 3 17 Scrum Roles: Product Owner Unit 2 - Express.</description></item><item><title>WTAT2 Tentative Schedule</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/schedule/</guid><description>Week KW Date Lecture Topic Required Reading read this before the corresponding class! Lab 1 40 Thu, 2017-10-05 Agile Web Development - Intro Time Box, Topics, Rails Installation 2 41 Thu, 2017-10-12 Rails Dash, Ruby * Getting Started with Rails Definition of Topics &amp;amp; Groups, Installation cont&amp;rsquo;ed 3 42 Thu, 2017-10-19 Web Applications Overview, Active Record Associations and Migrations * Active Record Basics Topic 1: Rails and Active Record 4 43 Thu, 2017-10-26 Domain Models, Associations in the View * Active Record Associations Topic 1: Rails and Active Record 5 44 Thu, 2017-11-02 Testing and Bootstrap Ch.</description></item></channel></rss>